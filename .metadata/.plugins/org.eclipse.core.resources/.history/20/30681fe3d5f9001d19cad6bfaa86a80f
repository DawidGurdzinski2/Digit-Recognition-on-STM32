#include "W25Q64Drv.h"



HAL_StatusTypeDef W25Q64_Transmit_Data(MEMORY * this,uint8_t *data, uint16_t size)
{
	HAL_StatusTypeDef status;

	status = HAL_SPI_Transmit(this->pSpi, data, size, 1000);

	return status;
}

HAL_StatusTypeDef W25Q64_SPI_Receive_Data(MEMORY * this,uint8_t *data, uint16_t size)
{
	HAL_StatusTypeDef status;

	status = HAL_SPI_Receive(this->pSpi, data, size, 1000);

	return status;
}

void W25Q64_Set_ChipSelect_Low(MEMORY * this)
{
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_RESET);
}

void W25Q64_Set_ChipSelect_High(MEMORY * this)
{
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_SET);
}

uint8_t W25Q64_Init(MEMORY * this)
{
	this->CS_port=W25Q64_CS_GPIO_Port;
	this->CS_Pin=W25Q64_CS_Pin;
	this->pSpi=&hspi3;


	W25Q64_ResetFlash();
	W25Q64_get_JEDEC_ID(&w25q64_memory);

	if(WIBOND_ID == w25q64_memory.manufacturer_ID && SPI_DEVICE_ID == w25q64_memory.memory_type && CAPACITY_64_MBIT == w25q64_memory.capacity)
		return HAL_OK;
	else
		return HAL_ERROR;
}

void W25Q64_ResetFlash(void)
{
	uint8_t data_to_send[] = { ENABLE_RESET, RESET };

	W25Q64_Set_ChipSelect_Low();
	W25Q64_SPI_Transmit_Data(data_to_send, 1);
	W25Q64_Set_ChipSelect_High();

        W25Q64_Set_ChipSelect_Low();
	W25Q64_SPI_Transmit_Data(&data_to_send[1], 1);
	W25Q64_Set_ChipSelect_High();
}

void W25Q64_get_JEDEC_ID(struct memory_info *info)
{
	uint8_t data_to_send = 0x9F;
	uint8_t receive_data[3] = { 0, 0, 0 };

	W25Q64_Set_ChipSelect_Low();

	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
	W25Q64_SPI_Receive_Data(receive_data, 3);

	W25Q64_Set_ChipSelect_High();

	info->manufacturer_ID = receive_data[0];
	info->memory_type = receive_data[1];
	info->capacity = receive_data[2];
}

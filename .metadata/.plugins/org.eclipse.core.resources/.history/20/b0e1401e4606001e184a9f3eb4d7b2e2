
#include "ST7789V_GFX.h"
#include "ST7789V.h"
/*TODO
 * Draw Text

*/

/*
  * @brief rysuje pixel na ekranie
  * @param  this - wskaznik na strukture ST7789V
  * @param X - wspołzedne X pixela
  * @param Y - wspołzedne Y pixela
  * @param color - kolor pixela
  * @retval None
*/

void ST7789V_DrawPixel(ST7789V *this,uint16_t X,uint16_t Y,uint16_t color){
	ST7789V_SetAdress(this, X, Y, X+1, Y+1);
	uint8_t adressC[2]={color>>8,color & 0xFF};
	ST7789V_WriteData(this, adressC, 2);



}

/*
  * @brief rysuje prostokat na ekranie
  * @param  this - wskaznik na strukture ST7789V
  * @param X0 - wspołzedne X pierwszego pixela
  * @param Y0 - wspołzedne Y pierwszego pixela
  * @param X1 - wspołzedne X ostatniego pixela
  * @param Y1 - wspołzedne Y ostatniego pixela
  * @param color - kolor prostokąta
  * @retval None
*/

void ST7789V_DrawRect(ST7789V *this,uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color){
	if(X0>X1){
		uint16_t temp1=X0;
		X0=X1;
		X1=temp1;
	}

	if(Y0>Y1){
		uint16_t temp2=Y0;
		Y0=Y1;
		Y1=temp2;
	}
	ST7789V_SetAdress(this, X0, Y0, X1, Y1);
	uint16_t X_size=X1-X0+1;
	uint16_t Y_size=Y1-Y0+1;
	uint8_t colorA=color>>8;
	uint8_t colorB=color & 0xFF;
	uint32_t dataSize=X_size*Y_size*2;
	uint32_t chunkDataSize=200*2; //even number
	uint32_t chunks=dataSize/chunkDataSize;
	uint32_t restDataSize=dataSize-chunks*chunkDataSize;

	uint8_t buff[chunkDataSize];
	uint8_t buffRest[restDataSize];
	for(uint32_t i =0;i<chunkDataSize;i+=2){
		buff[i]=colorA;
		buff[i+1]=colorB;
	}
	for(uint32_t i =0;i<restDataSize;i+=2){
		buffRest[i]=colorA;
		buffRest[i+1]=colorB;
	}
	for(uint16_t i=0;i<chunks;i++){

		ST7789V_WriteData(this, buff, chunkDataSize);

	}
	ST7789V_WriteData(this, buffRest, restDataSize);
}

/*
  * @brief rysuje koło na ekranie
  * @param  this - wskaznik na strukture ST7789V
  * @param X- wspołzedne X srodka kołą
  * @param Y- wspołzedne Y srodka kołą
  * @param radius - promien koła
  * @param color - kolor prostokąta
  * @retval None
*/
void ST7789V_DrawCircle(ST7789V *this,uint16_t X ,uint16_t Y,uint16_t radius ,uint16_t color){
	int rad = radius;
	int y = 0;
	int xChange = 1 - (radius << 1);
	int yChange = 0;
	int radiusError = 0;
	while (rad >= y)
	{
		for (int i = X - rad; i <= X + rad; i++)
		{
			ST7789V_DrawPixel(this,i, Y + y,color);
			ST7789V_DrawPixel(this,i, Y - y,color);
		}
		for (int i = X - y; i <= X + y; i++)
		{
			ST7789V_DrawPixel(this,i, Y + rad,color);
			ST7789V_DrawPixel(this,i, Y - rad,color);
		}
		y++;
		radiusError += yChange;
		yChange += 2;
		if (((radiusError << 1) + xChange) > 0)
		{
			rad--;
			radiusError += xChange;
			xChange += 2;
		}
	}
}

/**
 * @brief Write a char
 * @param  x&y -> cursor of the start point.
 * @param ch -> char to write
 * @param font -> fontstyle of the string
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */


void ST7789_WriteChar(ST7789V * this,uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor){
	uint32_t i, b, j;
	ST7789_Select();
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
	for (i = 0; i < font.height; i++) {
		b = font.data[(ch - 32) * font.height + i];
		for (j = 0; j < font.width; j++) {
			if ((b << j) & 0x8000) {
				uint8_t data[] = {color >> 8, color & 0xFF};
				ST7789V_WriteData( this,data, sizeof(data));
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
				ST7789V_WriteData( this,data, sizeof(data));
			}
		}
	}
	ST7789_UnSelect();
}




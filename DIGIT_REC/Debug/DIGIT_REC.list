
DIGIT_REC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a0  080051a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  2000000c  080051b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080051b4  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa9  00000000  00000000  0003090a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018102  00000000  00000000  00034ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120b1  00000000  00000000  0004cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb93  00000000  00000000  0005f09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edc2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039bc  00000000  00000000  000edc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005150 	.word	0x08005150

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005150 	.word	0x08005150

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000560:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000564:	f000 b974 	b.w	8000850 <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f806 	bl	8000580 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9d08      	ldr	r5, [sp, #32]
 8000586:	4604      	mov	r4, r0
 8000588:	468e      	mov	lr, r1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d14d      	bne.n	800062a <__udivmoddi4+0xaa>
 800058e:	428a      	cmp	r2, r1
 8000590:	4694      	mov	ip, r2
 8000592:	d969      	bls.n	8000668 <__udivmoddi4+0xe8>
 8000594:	fab2 f282 	clz	r2, r2
 8000598:	b152      	cbz	r2, 80005b0 <__udivmoddi4+0x30>
 800059a:	fa01 f302 	lsl.w	r3, r1, r2
 800059e:	f1c2 0120 	rsb	r1, r2, #32
 80005a2:	fa20 f101 	lsr.w	r1, r0, r1
 80005a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005aa:	ea41 0e03 	orr.w	lr, r1, r3
 80005ae:	4094      	lsls	r4, r2
 80005b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005b4:	0c21      	lsrs	r1, r4, #16
 80005b6:	fbbe f6f8 	udiv	r6, lr, r8
 80005ba:	fa1f f78c 	uxth.w	r7, ip
 80005be:	fb08 e316 	mls	r3, r8, r6, lr
 80005c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005c6:	fb06 f107 	mul.w	r1, r6, r7
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d90a      	bls.n	80005e4 <__udivmoddi4+0x64>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80005d6:	f080 811f 	bcs.w	8000818 <__udivmoddi4+0x298>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 811c 	bls.w	8000818 <__udivmoddi4+0x298>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	4463      	add	r3, ip
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b2a4      	uxth	r4, r4
 80005e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005ec:	fb08 3310 	mls	r3, r8, r0, r3
 80005f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005f4:	fb00 f707 	mul.w	r7, r0, r7
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	d90a      	bls.n	8000612 <__udivmoddi4+0x92>
 80005fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000600:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000604:	f080 810a 	bcs.w	800081c <__udivmoddi4+0x29c>
 8000608:	42a7      	cmp	r7, r4
 800060a:	f240 8107 	bls.w	800081c <__udivmoddi4+0x29c>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000616:	1be4      	subs	r4, r4, r7
 8000618:	2600      	movs	r6, #0
 800061a:	b11d      	cbz	r5, 8000624 <__udivmoddi4+0xa4>
 800061c:	40d4      	lsrs	r4, r2
 800061e:	2300      	movs	r3, #0
 8000620:	e9c5 4300 	strd	r4, r3, [r5]
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	428b      	cmp	r3, r1
 800062c:	d909      	bls.n	8000642 <__udivmoddi4+0xc2>
 800062e:	2d00      	cmp	r5, #0
 8000630:	f000 80ef 	beq.w	8000812 <__udivmoddi4+0x292>
 8000634:	2600      	movs	r6, #0
 8000636:	e9c5 0100 	strd	r0, r1, [r5]
 800063a:	4630      	mov	r0, r6
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	fab3 f683 	clz	r6, r3
 8000646:	2e00      	cmp	r6, #0
 8000648:	d14a      	bne.n	80006e0 <__udivmoddi4+0x160>
 800064a:	428b      	cmp	r3, r1
 800064c:	d302      	bcc.n	8000654 <__udivmoddi4+0xd4>
 800064e:	4282      	cmp	r2, r0
 8000650:	f200 80f9 	bhi.w	8000846 <__udivmoddi4+0x2c6>
 8000654:	1a84      	subs	r4, r0, r2
 8000656:	eb61 0303 	sbc.w	r3, r1, r3
 800065a:	2001      	movs	r0, #1
 800065c:	469e      	mov	lr, r3
 800065e:	2d00      	cmp	r5, #0
 8000660:	d0e0      	beq.n	8000624 <__udivmoddi4+0xa4>
 8000662:	e9c5 4e00 	strd	r4, lr, [r5]
 8000666:	e7dd      	b.n	8000624 <__udivmoddi4+0xa4>
 8000668:	b902      	cbnz	r2, 800066c <__udivmoddi4+0xec>
 800066a:	deff      	udf	#255	; 0xff
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	2a00      	cmp	r2, #0
 8000672:	f040 8092 	bne.w	800079a <__udivmoddi4+0x21a>
 8000676:	eba1 010c 	sub.w	r1, r1, ip
 800067a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800067e:	fa1f fe8c 	uxth.w	lr, ip
 8000682:	2601      	movs	r6, #1
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f3f7 	udiv	r3, r1, r7
 800068a:	fb07 1113 	mls	r1, r7, r3, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb0e f003 	mul.w	r0, lr, r3
 8000696:	4288      	cmp	r0, r1
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0x12c>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x12a>
 80006a4:	4288      	cmp	r0, r1
 80006a6:	f200 80cb 	bhi.w	8000840 <__udivmoddi4+0x2c0>
 80006aa:	4643      	mov	r3, r8
 80006ac:	1a09      	subs	r1, r1, r0
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b4:	fb07 1110 	mls	r1, r7, r0, r1
 80006b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006bc:	fb0e fe00 	mul.w	lr, lr, r0
 80006c0:	45a6      	cmp	lr, r4
 80006c2:	d908      	bls.n	80006d6 <__udivmoddi4+0x156>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006cc:	d202      	bcs.n	80006d4 <__udivmoddi4+0x154>
 80006ce:	45a6      	cmp	lr, r4
 80006d0:	f200 80bb 	bhi.w	800084a <__udivmoddi4+0x2ca>
 80006d4:	4608      	mov	r0, r1
 80006d6:	eba4 040e 	sub.w	r4, r4, lr
 80006da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006de:	e79c      	b.n	800061a <__udivmoddi4+0x9a>
 80006e0:	f1c6 0720 	rsb	r7, r6, #32
 80006e4:	40b3      	lsls	r3, r6
 80006e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ee:	fa20 f407 	lsr.w	r4, r0, r7
 80006f2:	fa01 f306 	lsl.w	r3, r1, r6
 80006f6:	431c      	orrs	r4, r3
 80006f8:	40f9      	lsrs	r1, r7
 80006fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000702:	fbb1 f8f9 	udiv	r8, r1, r9
 8000706:	0c20      	lsrs	r0, r4, #16
 8000708:	fa1f fe8c 	uxth.w	lr, ip
 800070c:	fb09 1118 	mls	r1, r9, r8, r1
 8000710:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000714:	fb08 f00e 	mul.w	r0, r8, lr
 8000718:	4288      	cmp	r0, r1
 800071a:	fa02 f206 	lsl.w	r2, r2, r6
 800071e:	d90b      	bls.n	8000738 <__udivmoddi4+0x1b8>
 8000720:	eb1c 0101 	adds.w	r1, ip, r1
 8000724:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000728:	f080 8088 	bcs.w	800083c <__udivmoddi4+0x2bc>
 800072c:	4288      	cmp	r0, r1
 800072e:	f240 8085 	bls.w	800083c <__udivmoddi4+0x2bc>
 8000732:	f1a8 0802 	sub.w	r8, r8, #2
 8000736:	4461      	add	r1, ip
 8000738:	1a09      	subs	r1, r1, r0
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000740:	fb09 1110 	mls	r1, r9, r0, r1
 8000744:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000748:	fb00 fe0e 	mul.w	lr, r0, lr
 800074c:	458e      	cmp	lr, r1
 800074e:	d908      	bls.n	8000762 <__udivmoddi4+0x1e2>
 8000750:	eb1c 0101 	adds.w	r1, ip, r1
 8000754:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000758:	d26c      	bcs.n	8000834 <__udivmoddi4+0x2b4>
 800075a:	458e      	cmp	lr, r1
 800075c:	d96a      	bls.n	8000834 <__udivmoddi4+0x2b4>
 800075e:	3802      	subs	r0, #2
 8000760:	4461      	add	r1, ip
 8000762:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000766:	fba0 9402 	umull	r9, r4, r0, r2
 800076a:	eba1 010e 	sub.w	r1, r1, lr
 800076e:	42a1      	cmp	r1, r4
 8000770:	46c8      	mov	r8, r9
 8000772:	46a6      	mov	lr, r4
 8000774:	d356      	bcc.n	8000824 <__udivmoddi4+0x2a4>
 8000776:	d053      	beq.n	8000820 <__udivmoddi4+0x2a0>
 8000778:	b15d      	cbz	r5, 8000792 <__udivmoddi4+0x212>
 800077a:	ebb3 0208 	subs.w	r2, r3, r8
 800077e:	eb61 010e 	sbc.w	r1, r1, lr
 8000782:	fa01 f707 	lsl.w	r7, r1, r7
 8000786:	fa22 f306 	lsr.w	r3, r2, r6
 800078a:	40f1      	lsrs	r1, r6
 800078c:	431f      	orrs	r7, r3
 800078e:	e9c5 7100 	strd	r7, r1, [r5]
 8000792:	2600      	movs	r6, #0
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a4:	fa21 f303 	lsr.w	r3, r1, r3
 80007a8:	4091      	lsls	r1, r2
 80007aa:	4301      	orrs	r1, r0
 80007ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007b8:	fb07 3610 	mls	r6, r7, r0, r3
 80007bc:	0c0b      	lsrs	r3, r1, #16
 80007be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007c2:	fb00 f60e 	mul.w	r6, r0, lr
 80007c6:	429e      	cmp	r6, r3
 80007c8:	fa04 f402 	lsl.w	r4, r4, r2
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x260>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80007d6:	d22f      	bcs.n	8000838 <__udivmoddi4+0x2b8>
 80007d8:	429e      	cmp	r6, r3
 80007da:	d92d      	bls.n	8000838 <__udivmoddi4+0x2b8>
 80007dc:	3802      	subs	r0, #2
 80007de:	4463      	add	r3, ip
 80007e0:	1b9b      	subs	r3, r3, r6
 80007e2:	b289      	uxth	r1, r1
 80007e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007e8:	fb07 3316 	mls	r3, r7, r6, r3
 80007ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f0:	fb06 f30e 	mul.w	r3, r6, lr
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x28a>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000800:	d216      	bcs.n	8000830 <__udivmoddi4+0x2b0>
 8000802:	428b      	cmp	r3, r1
 8000804:	d914      	bls.n	8000830 <__udivmoddi4+0x2b0>
 8000806:	3e02      	subs	r6, #2
 8000808:	4461      	add	r1, ip
 800080a:	1ac9      	subs	r1, r1, r3
 800080c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000810:	e738      	b.n	8000684 <__udivmoddi4+0x104>
 8000812:	462e      	mov	r6, r5
 8000814:	4628      	mov	r0, r5
 8000816:	e705      	b.n	8000624 <__udivmoddi4+0xa4>
 8000818:	4606      	mov	r6, r0
 800081a:	e6e3      	b.n	80005e4 <__udivmoddi4+0x64>
 800081c:	4618      	mov	r0, r3
 800081e:	e6f8      	b.n	8000612 <__udivmoddi4+0x92>
 8000820:	454b      	cmp	r3, r9
 8000822:	d2a9      	bcs.n	8000778 <__udivmoddi4+0x1f8>
 8000824:	ebb9 0802 	subs.w	r8, r9, r2
 8000828:	eb64 0e0c 	sbc.w	lr, r4, ip
 800082c:	3801      	subs	r0, #1
 800082e:	e7a3      	b.n	8000778 <__udivmoddi4+0x1f8>
 8000830:	4646      	mov	r6, r8
 8000832:	e7ea      	b.n	800080a <__udivmoddi4+0x28a>
 8000834:	4620      	mov	r0, r4
 8000836:	e794      	b.n	8000762 <__udivmoddi4+0x1e2>
 8000838:	4640      	mov	r0, r8
 800083a:	e7d1      	b.n	80007e0 <__udivmoddi4+0x260>
 800083c:	46d0      	mov	r8, sl
 800083e:	e77b      	b.n	8000738 <__udivmoddi4+0x1b8>
 8000840:	3b02      	subs	r3, #2
 8000842:	4461      	add	r1, ip
 8000844:	e732      	b.n	80006ac <__udivmoddi4+0x12c>
 8000846:	4630      	mov	r0, r6
 8000848:	e709      	b.n	800065e <__udivmoddi4+0xde>
 800084a:	4464      	add	r4, ip
 800084c:	3802      	subs	r0, #2
 800084e:	e742      	b.n	80006d6 <__udivmoddi4+0x156>

08000850 <__aeabi_idiv0>:
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_DMA_Init+0x3c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <MX_DMA_Init+0x3c>)
 8000864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_DMA_Init+0x3c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	203a      	movs	r0, #58	; 0x3a
 800087c:	f000 fde7 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000880:	203a      	movs	r0, #58	; 0x3a
 8000882:	f000 fe00 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_GPIO_Init+0xe8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <MX_GPIO_Init+0xe8>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0xe8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0xe8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <MX_GPIO_Init+0xe8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0xe8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_GPIO_Init+0xe8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <MX_GPIO_Init+0xe8>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_GPIO_Init+0xe8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000904:	481e      	ldr	r0, [pc, #120]	; (8000980 <MX_GPIO_Init+0xec>)
 8000906:	f001 fae5 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin|W25Q64_CS_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2143      	movs	r1, #67	; 0x43
 800090e:	481d      	ldr	r0, [pc, #116]	; (8000984 <MX_GPIO_Init+0xf0>)
 8000910:	f001 fae0 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2104      	movs	r1, #4
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_GPIO_Init+0xf0>)
 800091a:	f001 fadb 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|ADC_CS_Pin;
 800091e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_GPIO_Init+0xec>)
 8000938:	f001 f930 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_LED_Pin|W25Q64_CS_Pin;
 800093c:	2347      	movs	r3, #71	; 0x47
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_GPIO_Init+0xf0>)
 8000954:	f001 f922 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 8000958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0xec>)
 800096e:	f001 f915 	bl	8001b9c <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b0d0      	sub	sp, #320	; 0x140
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fbed 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f8af 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f7ff ff7d 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 800099a:	f7ff ff5b 	bl	8000854 <MX_DMA_Init>
  MX_SPI1_Init();
 800099e:	f000 f917 	bl	8000bd0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80009a2:	f000 f94d 	bl	8000c40 <MX_SPI3_Init>
  MX_SPI4_Init();
 80009a6:	f000 f981 	bl	8000cac <MX_SPI4_Init>
  MX_TIM2_Init();
 80009aa:	f000 fb47 	bl	800103c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//1cnt =100 us
 80009ae:	4848      	ldr	r0, [pc, #288]	; (8000ad0 <main+0x148>)
 80009b0:	f002 fe1c 	bl	80035ec <HAL_TIM_Base_Start>
  ST7789V_Init(&ST7789VDrv);
 80009b4:	4847      	ldr	r0, [pc, #284]	; (8000ad4 <main+0x14c>)
 80009b6:	f003 fda9 	bl	800450c <ST7789V_Init>
  DataStruct=CreateChunkMatrix(buff);
 80009ba:	4c47      	ldr	r4, [pc, #284]	; (8000ad8 <main+0x150>)
 80009bc:	463b      	mov	r3, r7
 80009be:	4947      	ldr	r1, [pc, #284]	; (8000adc <main+0x154>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 f8bd 	bl	8003b40 <CreateChunkMatrix>
 80009c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80009ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  RefreshMenu(&ST7789VDrv, &DataStruct);
 80009d4:	4940      	ldr	r1, [pc, #256]	; (8000ad8 <main+0x150>)
 80009d6:	483f      	ldr	r0, [pc, #252]	; (8000ad4 <main+0x14c>)
 80009d8:	f003 fce3 	bl	80043a2 <RefreshMenu>

  uint8_t read_buffer[256];
  uint8_t write_buffer[]="test";
 80009dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80009e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009e4:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <main+0x158>)
 80009e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ea:	6018      	str	r0, [r3, #0]
 80009ec:	3304      	adds	r3, #4
 80009ee:	7019      	strb	r1, [r3, #0]
  W25Q64_Init(&w25q64);
 80009f0:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <main+0x15c>)
 80009f2:	f004 fa01 	bl	8004df8 <W25Q64_Init>

  double test = 5.33;
 80009f6:	a334      	add	r3, pc, #208	; (adr r3, 8000ac8 <main+0x140>)
 80009f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  double testout=0;
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  uint8_t testarr[8];

  SplitDouble(test, testarr);
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	ed97 0b4e 	vldr	d0, [r7, #312]	; 0x138
 8000a16:	f004 f917 	bl	8004c48 <SplitDouble>
  testout=ReconstructDouble(testarr);
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 f933 	bl	8004c8a <ReconstructDouble>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd28 	bl	800047c <__aeabi_i2d>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	460b      	mov	r3, r1
 8000a30:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130


  float testoutf=0;
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  float test2f=5.3;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <main+0x160>)
 8000a3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  uint8_t testarrf[4];

  Splitfloat(test2f, testarrf);
 8000a42:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8000a46:	f7ff fd2b 	bl	80004a0 <__aeabi_f2d>
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	460d      	mov	r5, r1
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	ec45 4b10 	vmov	d0, r4, r5
 8000a58:	f004 f93c 	bl	8004cd4 <Splitfloat>
  testoutf=ReconstructFloat(testarrf);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f95b 	bl	8004d1c <ReconstructFloat>
 8000a66:	ee07 0a90 	vmov	s15, r0
 8000a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6e:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c

  W25Q64_SectorErase(&w25q64,0);
 8000a72:	2100      	movs	r1, #0
 8000a74:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <main+0x15c>)
 8000a76:	f004 fa7f 	bl	8004f78 <W25Q64_SectorErase>
  W25Q64_ReadDataBytes(&w25q64,0x0000, read_buffer, 256);
 8000a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	2100      	movs	r1, #0
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <main+0x15c>)
 8000a86:	f004 fae2 	bl	800504e <W25Q64_ReadDataBytes>
  W25Q64_PageProgram(&w25q64,0x0000, write_buffer, sizeof(write_buffer));
 8000a8a:	f107 0220 	add.w	r2, r7, #32
 8000a8e:	2305      	movs	r3, #5
 8000a90:	2100      	movs	r1, #0
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <main+0x15c>)
 8000a94:	f004 faa5 	bl	8004fe2 <W25Q64_PageProgram>
  W25Q64_ReadDataBytes(&w25q64,0x0000, read_buffer, 256);
 8000a98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <main+0x15c>)
 8000aa4:	f004 fad3 	bl	800504e <W25Q64_ReadDataBytes>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 8000aa8:	4910      	ldr	r1, [pc, #64]	; (8000aec <main+0x164>)
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <main+0x168>)
 8000aac:	f004 f816 	bl	8004adc <XPT2046_TouchGetCoordinates>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f8      	beq.n	8000aa8 <main+0x120>
		  LoopScreen(&ST7789VDrv, &DataStruct, PosX, PosY);
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <main+0x168>)
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <main+0x164>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <main+0x150>)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <main+0x14c>)
 8000ac2:	f003 fcb9 	bl	8004438 <LoopScreen>
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 8000ac6:	e7ef      	b.n	8000aa8 <main+0x120>
 8000ac8:	851eb852 	.word	0x851eb852
 8000acc:	401551eb 	.word	0x401551eb
 8000ad0:	200004e8 	.word	0x200004e8
 8000ad4:	20000348 	.word	0x20000348
 8000ad8:	20000338 	.word	0x20000338
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	08005168 	.word	0x08005168
 8000ae4:	2000036c 	.word	0x2000036c
 8000ae8:	40a9999a 	.word	0x40a9999a
 8000aec:	2000036a 	.word	0x2000036a
 8000af0:	20000368 	.word	0x20000368

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fb1c 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000b64:	230c      	movs	r3, #12
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b70:	2305      	movs	r3, #5
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f9c5 	bl	8001f08 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b84:	f000 f81e 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fc27 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb0:	f000 f808 	bl	8000bc4 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <MX_SPI1_Init+0x6c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000be4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000be8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c1e:	220a      	movs	r2, #10
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c24:	f001 fd94 	bl	8002750 <HAL_SPI_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c2e:	f7ff ffc9 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000380 	.word	0x20000380
 8000c3c:	40013000 	.word	0x40013000

08000c40 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_SPI3_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_SPI3_Init+0x64>)
 8000c92:	f001 fd5d 	bl	8002750 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f7ff ff92 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200003d8 	.word	0x200003d8
 8000ca8:	40003c00 	.word	0x40003c00

08000cac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cb2:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <MX_SPI4_Init+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cdc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_SPI4_Init+0x64>)
 8000cfe:	f001 fd27 	bl	8002750 <HAL_SPI_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000d08:	f7ff ff5c 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000430 	.word	0x20000430
 8000d14:	40013400 	.word	0x40013400

08000d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a82      	ldr	r2, [pc, #520]	; (8000f40 <HAL_SPI_MspInit+0x228>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d15a      	bne.n	8000df0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	4b81      	ldr	r3, [pc, #516]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a80      	ldr	r2, [pc, #512]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b7e      	ldr	r3, [pc, #504]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	4b7a      	ldr	r3, [pc, #488]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a79      	ldr	r2, [pc, #484]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b77      	ldr	r3, [pc, #476]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d82:	2305      	movs	r3, #5
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	486e      	ldr	r0, [pc, #440]	; (8000f48 <HAL_SPI_MspInit+0x230>)
 8000d8e:	f000 ff05 	bl	8001b9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000d92:	4b6e      	ldr	r3, [pc, #440]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000d94:	4a6e      	ldr	r2, [pc, #440]	; (8000f50 <HAL_SPI_MspInit+0x238>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000d98:	4b6c      	ldr	r3, [pc, #432]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000d9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da0:	4b6a      	ldr	r3, [pc, #424]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000da2:	2240      	movs	r2, #64	; 0x40
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da6:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dac:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db4:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dba:	4b64      	ldr	r3, [pc, #400]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dc0:	4b62      	ldr	r3, [pc, #392]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b61      	ldr	r3, [pc, #388]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dcc:	4b5f      	ldr	r3, [pc, #380]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dd2:	485e      	ldr	r0, [pc, #376]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dd4:	f000 fb72 	bl	80014bc <HAL_DMA_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000dde:	f7ff fef1 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000de6:	649a      	str	r2, [r3, #72]	; 0x48
 8000de8:	4a58      	ldr	r2, [pc, #352]	; (8000f4c <HAL_SPI_MspInit+0x234>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000dee:	e0a3      	b.n	8000f38 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a57      	ldr	r2, [pc, #348]	; (8000f54 <HAL_SPI_MspInit+0x23c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13d      	bne.n	8000e76 <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e44:	2307      	movs	r3, #7
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4842      	ldr	r0, [pc, #264]	; (8000f58 <HAL_SPI_MspInit+0x240>)
 8000e50:	f000 fea4 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e54:	2330      	movs	r3, #48	; 0x30
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e64:	2306      	movs	r3, #6
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483a      	ldr	r0, [pc, #232]	; (8000f58 <HAL_SPI_MspInit+0x240>)
 8000e70:	f000 fe94 	bl	8001b9c <HAL_GPIO_Init>
}
 8000e74:	e060      	b.n	8000f38 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI4)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a38      	ldr	r2, [pc, #224]	; (8000f5c <HAL_SPI_MspInit+0x244>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d15b      	bne.n	8000f38 <HAL_SPI_MspInit+0x220>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_SPI_MspInit+0x22c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4816      	ldr	r0, [pc, #88]	; (8000f48 <HAL_SPI_MspInit+0x230>)
 8000ef0:	f000 fe54 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000f06:	2306      	movs	r3, #6
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <HAL_SPI_MspInit+0x240>)
 8000f12:	f000 fe43 	bl	8001b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000f28:	2306      	movs	r3, #6
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_SPI_MspInit+0x230>)
 8000f34:	f000 fe32 	bl	8001b9c <HAL_GPIO_Init>
}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	20000488 	.word	0x20000488
 8000f50:	40026440 	.word	0x40026440
 8000f54:	40003c00 	.word	0x40003c00
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40013400 	.word	0x40013400

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f908 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA2_Stream2_IRQHandler+0x10>)
 800100a:	f000 fb5d 	bl	80016c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000488 	.word	0x20000488

08001018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM2_Init+0x98>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001062:	f242 720f 	movw	r2, #9999	; 0x270f
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM2_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001084:	f002 fa62 	bl	800354c <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800108e:	f7ff fd99 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010a0:	f002 fafe 	bl	80036a0 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010aa:	f7ff fd8b 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010bc:	f002 fcd2 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f7ff fd7d 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004e8 	.word	0x200004e8

080010d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d10d      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_TIM_Base_MspInit+0x3c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_TIM_Base_MspInit+0x3c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_TIM_Base_MspInit+0x3c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ff69 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 ffd7 	bl	80050f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fc1d 	bl	8000988 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	080051a8 	.word	0x080051a8
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20000540 	.word	0x20000540

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f94f 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fede 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f967 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000530 	.word	0x20000530

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000530 	.word	0x20000530

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff feb6 	bl	8001238 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e099      	b.n	800160c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	e00f      	b.n	800151a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fa:	f7ff fe9d 	bl	8001238 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b05      	cmp	r3, #5
 8001506:	d908      	bls.n	800151a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e078      	b.n	800160c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e8      	bne.n	80014fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_DMA_Init+0x158>)
 8001534:	4013      	ands	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2b04      	cmp	r3, #4
 8001572:	d107      	bne.n	8001584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4313      	orrs	r3, r2
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f023 0307 	bic.w	r3, r3, #7
 800159a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d117      	bne.n	80015de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa6f 	bl	8001aa4 <DMA_CheckFifoParam>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015da:	2301      	movs	r3, #1
 80015dc:	e016      	b.n	800160c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fa26 	bl	8001a38 <DMA_CalcBaseAndBitshift>
 80015ec:	4603      	mov	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f010803f 	.word	0xf010803f

08001618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_DMA_Start_IT+0x26>
 800163a:	2302      	movs	r3, #2
 800163c:	e040      	b.n	80016c0 <HAL_DMA_Start_IT+0xa8>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d12f      	bne.n	80016b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2202      	movs	r2, #2
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f9b8 	bl	80019dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0216 	orr.w	r2, r2, #22
 8001686:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0208 	orr.w	r2, r2, #8
 800169e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e005      	b.n	80016be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
 80016bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d4:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <HAL_DMA_IRQHandler+0x248>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a8e      	ldr	r2, [pc, #568]	; (8001914 <HAL_DMA_IRQHandler+0x24c>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0a9b      	lsrs	r3, r3, #10
 80016e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2208      	movs	r2, #8
 80016f4:	409a      	lsls	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01a      	beq.n	8001734 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	2208      	movs	r2, #8
 8001722:	409a      	lsls	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	2201      	movs	r2, #1
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d012      	beq.n	800176a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176e:	2204      	movs	r2, #4
 8001770:	409a      	lsls	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2204      	movs	r2, #4
 800178e:	409a      	lsls	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f043 0204 	orr.w	r2, r3, #4
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2210      	movs	r2, #16
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d043      	beq.n	8001838 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03c      	beq.n	8001838 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2210      	movs	r2, #16
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d018      	beq.n	800180a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d108      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d024      	beq.n	8001838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
 80017f6:	e01f      	b.n	8001838 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01b      	beq.n	8001838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e016      	b.n	8001838 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0208 	bic.w	r2, r2, #8
 8001826:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	2220      	movs	r2, #32
 800183e:	409a      	lsls	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 808f 	beq.w	8001968 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8087 	beq.w	8001968 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2220      	movs	r2, #32
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b05      	cmp	r3, #5
 8001870:	d136      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0216 	bic.w	r2, r2, #22
 8001880:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001890:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <HAL_DMA_IRQHandler+0x1da>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0208 	bic.w	r2, r2, #8
 80018b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	223f      	movs	r2, #63	; 0x3f
 80018b8:	409a      	lsls	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d07e      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
        }
        return;
 80018de:	e079      	b.n	80019d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01d      	beq.n	800192a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10d      	bne.n	8001918 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	2b00      	cmp	r3, #0
 8001902:	d031      	beq.n	8001968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
 800190c:	e02c      	b.n	8001968 <HAL_DMA_IRQHandler+0x2a0>
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000
 8001914:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d023      	beq.n	8001968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
 8001928:	e01e      	b.n	8001968 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10f      	bne.n	8001958 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0210 	bic.w	r2, r2, #16
 8001946:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	2b00      	cmp	r3, #0
 800196e:	d032      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d022      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2205      	movs	r2, #5
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3301      	adds	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	d307      	bcc.n	80019b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f2      	bne.n	8001994 <HAL_DMA_IRQHandler+0x2cc>
 80019ae:	e000      	b.n	80019b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
 80019d2:	e000      	b.n	80019d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019d4:	bf00      	nop
    }
  }
}
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d108      	bne.n	8001a1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a1a:	e007      	b.n	8001a2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b10      	subs	r3, #16
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <DMA_CalcBaseAndBitshift+0x64>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <DMA_CalcBaseAndBitshift+0x68>)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d909      	bls.n	8001a7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	1d1a      	adds	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58
 8001a78:	e007      	b.n	8001a8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	aaaaaaab 	.word	0xaaaaaaab
 8001aa0:	08005184 	.word	0x08005184

08001aa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11f      	bne.n	8001afe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d856      	bhi.n	8001b72 <DMA_CheckFifoParam+0xce>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <DMA_CheckFifoParam+0x28>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001aef 	.word	0x08001aef
 8001ad4:	08001add 	.word	0x08001add
 8001ad8:	08001b73 	.word	0x08001b73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d046      	beq.n	8001b76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aec:	e043      	b.n	8001b76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af6:	d140      	bne.n	8001b7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001afc:	e03d      	b.n	8001b7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b06:	d121      	bne.n	8001b4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d837      	bhi.n	8001b7e <DMA_CheckFifoParam+0xda>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <DMA_CheckFifoParam+0x70>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b2b 	.word	0x08001b2b
 8001b1c:	08001b25 	.word	0x08001b25
 8001b20:	08001b3d 	.word	0x08001b3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e030      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d025      	beq.n	8001b82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b3a:	e022      	b.n	8001b82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b44:	d11f      	bne.n	8001b86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b4a:	e01c      	b.n	8001b86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d903      	bls.n	8001b5a <DMA_CheckFifoParam+0xb6>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d003      	beq.n	8001b60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b58:	e018      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5e:	e015      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b70:	e00b      	b.n	8001b8a <DMA_CheckFifoParam+0xe6>
      break;
 8001b72:	bf00      	nop
 8001b74:	e00a      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e008      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e006      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e004      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e002      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b86:	bf00      	nop
 8001b88:	e000      	b.n	8001b8c <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e159      	b.n	8001e6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8148 	bne.w	8001e66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a2 	beq.w	8001e66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_GPIO_Init+0x2e8>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a56      	ldr	r2, [pc, #344]	; (8001e84 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_GPIO_Init+0x2e8>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_GPIO_Init+0x2ec>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x202>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_GPIO_Init+0x2f4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x1fe>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_GPIO_Init+0x2f8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x1fa>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a46      	ldr	r2, [pc, #280]	; (8001e98 <HAL_GPIO_Init+0x2fc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x1f6>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <HAL_GPIO_Init+0x300>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x1f2>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d8e:	2307      	movs	r3, #7
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	; (8001e88 <HAL_GPIO_Init+0x2ec>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f aea2 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40013c00 	.word	0x40013c00

08001ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e001      	b.n	8001ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	619a      	str	r2, [r3, #24]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e267      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d00c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d112      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e242      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6f      	ldr	r2, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b69      	ldr	r3, [pc, #420]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a68      	ldr	r2, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f93a 	bl	8001238 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f936 	bl	8001238 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e207      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f926 	bl	8001238 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f922 	bl	8001238 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1f3      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1c7      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_RCC_OscConfig+0x244>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff f8db 	bl	8001238 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff f8d7 	bl	8001238 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1a8      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4925      	ldr	r1, [pc, #148]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_OscConfig+0x244>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f8ba 	bl	8001238 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff f8b6 	bl	8001238 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e187      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d036      	beq.n	8002160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_OscConfig+0x248>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f89a 	bl	8001238 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff f896 	bl	8001238 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e167      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_OscConfig+0x240>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
 8002126:	e01b      	b.n	8002160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_OscConfig+0x248>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff f883 	bl	8001238 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e00e      	b.n	8002154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002136:	f7ff f87f 	bl	8001238 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d907      	bls.n	8002154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e150      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ea      	bne.n	8002136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8097 	beq.w	800229c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10f      	bne.n	800219e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a7c      	ldr	r2, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b77      	ldr	r3, [pc, #476]	; (800237c <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCC_OscConfig+0x474>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a73      	ldr	r2, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x474>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f83f 	bl	8001238 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7ff f83b 	bl	8001238 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e10c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_OscConfig+0x474>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2ea>
 80021e4:	4b64      	ldr	r3, [pc, #400]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a63      	ldr	r2, [pc, #396]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x30c>
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a5b      	ldr	r2, [pc, #364]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 8002214:	4b58      	ldr	r3, [pc, #352]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	; 0x70
 8002220:	4b55      	ldr	r3, [pc, #340]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a54      	ldr	r2, [pc, #336]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff f800 	bl	8001238 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fffc 	bl	8001238 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0cb      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ee      	beq.n	800223c <HAL_RCC_OscConfig+0x334>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe ffea 	bl	8001238 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe ffe6 	bl	8001238 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0b5      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4a38      	ldr	r2, [pc, #224]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a1 	beq.w	80023e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d05c      	beq.n	800236c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d141      	bne.n	800233e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ffba 	bl	8001238 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe ffb6 	bl	8001238 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e087      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	491b      	ldr	r1, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x478>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe ff8f 	bl	8001238 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe ff8b 	bl	8001238 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e05c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x416>
 800233c:	e054      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x478>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe ff78 	bl	8001238 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe ff74 	bl	8001238 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e045      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_OscConfig+0x470>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x444>
 800236a:	e03d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e038      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d028      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d121      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d11a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0cc      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90c      	bls.n	8002434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800246e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e067      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fea6 	bl	8001238 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fea2 	bl	8001238 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20c      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fe06 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08005174 	.word	0x08005174
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b090      	sub	sp, #64	; 0x40
 80025ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
 80025d0:	2300      	movs	r3, #0
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d00d      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x40>
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f200 80a1 	bhi.w	8002730 <HAL_RCC_GetSysClockFreq+0x16c>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x34>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x3a>
 80025f6:	e09b      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_GetSysClockFreq+0x184>)
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025fc:	e09b      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025fe:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_GetSysClockFreq+0x188>)
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002602:	e098      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d028      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	2200      	movs	r2, #0
 8002622:	623b      	str	r3, [r7, #32]
 8002624:	627a      	str	r2, [r7, #36]	; 0x24
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800262c:	2100      	movs	r1, #0
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_GetSysClockFreq+0x188>)
 8002630:	fb03 f201 	mul.w	r2, r3, r1
 8002634:	2300      	movs	r3, #0
 8002636:	fb00 f303 	mul.w	r3, r0, r3
 800263a:	4413      	add	r3, r2
 800263c:	4a43      	ldr	r2, [pc, #268]	; (800274c <HAL_RCC_GetSysClockFreq+0x188>)
 800263e:	fba0 1202 	umull	r1, r2, r0, r2
 8002642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002644:	460a      	mov	r2, r1
 8002646:	62ba      	str	r2, [r7, #40]	; 0x28
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	4413      	add	r3, r2
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	2200      	movs	r2, #0
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	61fa      	str	r2, [r7, #28]
 8002656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800265a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800265e:	f7fd ff77 	bl	8000550 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4613      	mov	r3, r2
 8002668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800266a:	e053      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	617a      	str	r2, [r7, #20]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800267e:	f04f 0b00 	mov.w	fp, #0
 8002682:	4652      	mov	r2, sl
 8002684:	465b      	mov	r3, fp
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	ebb2 080a 	subs.w	r8, r2, sl
 800269e:	eb63 090b 	sbc.w	r9, r3, fp
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026b6:	ebb2 0408 	subs.w	r4, r2, r8
 80026ba:	eb63 0509 	sbc.w	r5, r3, r9
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	00eb      	lsls	r3, r5, #3
 80026c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026cc:	00e2      	lsls	r2, r4, #3
 80026ce:	4614      	mov	r4, r2
 80026d0:	461d      	mov	r5, r3
 80026d2:	eb14 030a 	adds.w	r3, r4, sl
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	eb45 030b 	adc.w	r3, r5, fp
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ea:	4629      	mov	r1, r5
 80026ec:	028b      	lsls	r3, r1, #10
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f4:	4621      	mov	r1, r4
 80026f6:	028a      	lsls	r2, r1, #10
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	2200      	movs	r2, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	60fa      	str	r2, [r7, #12]
 8002704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002708:	f7fd ff22 	bl	8000550 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_GetSysClockFreq+0x180>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800272e:	e002      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetSysClockFreq+0x184>)
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002738:	4618      	mov	r0, r3
 800273a:	3740      	adds	r7, #64	; 0x40
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	00f42400 	.word	0x00f42400
 800274c:	017d7840 	.word	0x017d7840

08002750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e07b      	b.n	800285a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002772:	d009      	beq.n	8002788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
 800277a:	e005      	b.n	8002788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fab8 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	ea42 0103 	orr.w	r1, r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0104 	and.w	r1, r3, #4
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0210 	and.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002848:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b088      	sub	sp, #32
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_SPI_Transmit+0x22>
 8002880:	2302      	movs	r3, #2
 8002882:	e126      	b.n	8002ad2 <HAL_SPI_Transmit+0x270>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800288c:	f7fe fcd4 	bl	8001238 <HAL_GetTick>
 8002890:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a6:	e10b      	b.n	8002ac0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Transmit+0x52>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028b8:	e102      	b.n	8002ac0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002900:	d10f      	bne.n	8002922 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002920:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d007      	beq.n	8002940 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002948:	d14b      	bne.n	80029e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_SPI_Transmit+0xf6>
 8002952:	8afb      	ldrh	r3, [r7, #22]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d13e      	bne.n	80029d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	1c9a      	adds	r2, r3, #2
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800297c:	e02b      	b.n	80029d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d112      	bne.n	80029b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	881a      	ldrh	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	1c9a      	adds	r2, r3, #2
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80029b0:	e011      	b.n	80029d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b2:	f7fe fc41 	bl	8001238 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d803      	bhi.n	80029ca <HAL_SPI_Transmit+0x168>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c8:	d102      	bne.n	80029d0 <HAL_SPI_Transmit+0x16e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029d4:	e074      	b.n	8002ac0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ce      	bne.n	800297e <HAL_SPI_Transmit+0x11c>
 80029e0:	e04c      	b.n	8002a7c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_Transmit+0x18e>
 80029ea:	8afb      	ldrh	r3, [r7, #22]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d140      	bne.n	8002a72 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a16:	e02c      	b.n	8002a72 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d113      	bne.n	8002a4e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a4c:	e011      	b.n	8002a72 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4e:	f7fe fbf3 	bl	8001238 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d803      	bhi.n	8002a66 <HAL_SPI_Transmit+0x204>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Transmit+0x20a>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a70:	e026      	b.n	8002ac0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1cd      	bne.n	8002a18 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fd21 	bl	80034c8 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e000      	b.n	8002ac0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b088      	sub	sp, #32
 8002ade:	af02      	add	r7, sp, #8
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002af6:	d112      	bne.n	8002b1e <HAL_SPI_Receive+0x44>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10e      	bne.n	8002b1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2204      	movs	r2, #4
 8002b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f8f1 	bl	8002cfc <HAL_SPI_TransmitReceive>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	e0ea      	b.n	8002cf4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_Receive+0x52>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0e3      	b.n	8002cf4 <HAL_SPI_Receive+0x21a>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b34:	f7fe fb80 	bl	8001238 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b4a:	e0ca      	b.n	8002ce2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Receive+0x7e>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b5c:	e0c1      	b.n	8002ce2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2204      	movs	r2, #4
 8002b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba4:	d10f      	bne.n	8002bc6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d007      	beq.n	8002be4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d162      	bne.n	8002cb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bec:	e02e      	b.n	8002c4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d115      	bne.n	8002c28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f103 020c 	add.w	r2, r3, #12
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c26:	e011      	b.n	8002c4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c28:	f7fe fb06 	bl	8001238 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d803      	bhi.n	8002c40 <HAL_SPI_Receive+0x166>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3e:	d102      	bne.n	8002c46 <HAL_SPI_Receive+0x16c>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c4a:	e04a      	b.n	8002ce2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1cb      	bne.n	8002bee <HAL_SPI_Receive+0x114>
 8002c56:	e031      	b.n	8002cbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d113      	bne.n	8002c8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	b292      	uxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c8c:	e011      	b.n	8002cb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8e:	f7fe fad3 	bl	8001238 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d803      	bhi.n	8002ca6 <HAL_SPI_Receive+0x1cc>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_Receive+0x1d2>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cb0:	e017      	b.n	8002ce2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1cd      	bne.n	8002c58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fb9b 	bl	80033fc <SPI_EndRxTransaction>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
 8002cde:	e000      	b.n	8002ce2 <HAL_SPI_Receive+0x208>
  }

error :
 8002ce0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x26>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e18a      	b.n	8003038 <HAL_SPI_TransmitReceive+0x33c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2a:	f7fe fa85 	bl	8001238 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d00f      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x70>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d52:	d107      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x68>
 8002d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d003      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d6a:	e15b      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x82>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x82>
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d84:	e14e      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d003      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2205      	movs	r2, #5
 8002d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	887a      	ldrh	r2, [r7, #2]
 8002dc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d007      	beq.n	8002dee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d178      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x10a>
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d166      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	1c9a      	adds	r2, r3, #2
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2a:	e053      	b.n	8002ed4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d11b      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x176>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x176>
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d113      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d119      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x1b8>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	b292      	uxth	r2, r2
 8002e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eb4:	f7fe f9c0 	bl	8001238 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d807      	bhi.n	8002ed4 <HAL_SPI_TransmitReceive+0x1d8>
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eca:	d003      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ed2:	e0a7      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1a6      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x130>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1a1      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x130>
 8002ee8:	e07c      	b.n	8002fe4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x1fc>
 8002ef2:	8b7b      	ldrh	r3, [r7, #26]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d16b      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1e:	e057      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d11c      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x26c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d017      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0x26c>
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d114      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d119      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x2ae>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d014      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002faa:	f7fe f945 	bl	8001238 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d803      	bhi.n	8002fc2 <HAL_SPI_TransmitReceive+0x2c6>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2cc>
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fce:	e029      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1a2      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x224>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d19d      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fa6d 	bl	80034c8 <SPI_EndRxTxTransaction>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003000:	e010      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	e000      	b.n	8003024 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003034:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003038:	4618      	mov	r0, r3
 800303a:	3730      	adds	r7, #48	; 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_SPI_Transmit_DMA+0x20>
 800305c:	2302      	movs	r3, #2
 800305e:	e09b      	b.n	8003198 <HAL_SPI_Transmit_DMA+0x158>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003078:	e089      	b.n	800318e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_Transmit_DMA+0x46>
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    goto error;
 800308a:	e080      	b.n	800318e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2203      	movs	r2, #3
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d2:	d10f      	bne.n	80030f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_SPI_Transmit_DMA+0x160>)
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_SPI_Transmit_DMA+0x164>)
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_SPI_Transmit_DMA+0x168>)
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	2200      	movs	r2, #0
 8003112:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	4619      	mov	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800312c:	f7fe fa74 	bl	8001618 <HAL_DMA_Start_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800314e:	e01e      	b.n	800318e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d007      	beq.n	800316e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0202 	orr.w	r2, r2, #2
 800318c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08003291 	.word	0x08003291
 80031a4:	080031e9 	.word	0x080031e9
 80031a8:	080032ad 	.word	0x080032ad

080031ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f6:	f7fe f81f 	bl	8001238 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320a:	d03b      	beq.n	8003284 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0220 	bic.w	r2, r2, #32
 800321a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0202 	bic.w	r2, r2, #2
 800322a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	2164      	movs	r1, #100	; 0x64
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f000 f949 	bl	80034c8 <SPI_EndRxTxTransaction>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7ff ffa9 	bl	80031d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003282:	e002      	b.n	800328a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f7ff ff91 	bl	80031ac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff8e 	bl	80031c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0203 	bic.w	r2, r2, #3
 80032c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff ff78 	bl	80031d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032fc:	f7fd ff9c 	bl	8001238 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4413      	add	r3, r2
 800330a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800330c:	f7fd ff94 	bl	8001238 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003312:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	0d1b      	lsrs	r3, r3, #20
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003322:	e054      	b.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332a:	d050      	beq.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332c:	f7fd ff84 	bl	8001238 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d13d      	bne.n	80033be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335a:	d111      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d004      	beq.n	8003370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d107      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d10f      	bne.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e017      	b.n	80033ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d19b      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000

080033fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003410:	d111      	bne.n	8003436 <SPI_EndRxTransaction+0x3a>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d004      	beq.n	8003426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d107      	bne.n	8003436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343e:	d12a      	bne.n	8003496 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003448:	d012      	beq.n	8003470 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff ff49 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02d      	beq.n	80034bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e026      	b.n	80034be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	2101      	movs	r1, #1
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff ff36 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01a      	beq.n	80034bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e013      	b.n	80034be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	2101      	movs	r1, #1
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff23 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e000      	b.n	80034be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <SPI_EndRxTxTransaction+0x7c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <SPI_EndRxTxTransaction+0x80>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0d5b      	lsrs	r3, r3, #21
 80034e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f2:	d112      	bne.n	800351a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff fef4 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e00f      	b.n	800353a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3b01      	subs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d0f2      	beq.n	800351a <SPI_EndRxTxTransaction+0x52>
 8003534:	e000      	b.n	8003538 <SPI_EndRxTxTransaction+0x70>
        break;
 8003536:	bf00      	nop
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000
 8003548:	165e9f81 	.word	0x165e9f81

0800354c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e041      	b.n	80035e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fdb0 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 f950 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d001      	beq.n	8003604 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e03c      	b.n	800367e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <HAL_TIM_Base_Start+0xa0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_TIM_Base_Start+0x5c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d013      	beq.n	8003648 <HAL_TIM_Base_Start+0x5c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_TIM_Base_Start+0xa4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start+0x5c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_TIM_Base_Start+0xa8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start+0x5c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_TIM_Base_Start+0xac>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start+0x5c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <HAL_TIM_Base_Start+0xb0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d111      	bne.n	800366c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d010      	beq.n	800367c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	e007      	b.n	800367c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40014000 	.word	0x40014000

080036a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_ConfigClockSource+0x1c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0b4      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x186>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f4:	d03e      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0xd4>
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fa:	f200 8087 	bhi.w	800380c <HAL_TIM_ConfigClockSource+0x16c>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	f000 8086 	beq.w	8003812 <HAL_TIM_ConfigClockSource+0x172>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d87f      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b70      	cmp	r3, #112	; 0x70
 800370e:	d01a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0xa6>
 8003710:	2b70      	cmp	r3, #112	; 0x70
 8003712:	d87b      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b60      	cmp	r3, #96	; 0x60
 8003716:	d050      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x11a>
 8003718:	2b60      	cmp	r3, #96	; 0x60
 800371a:	d877      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b50      	cmp	r3, #80	; 0x50
 800371e:	d03c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xfa>
 8003720:	2b50      	cmp	r3, #80	; 0x50
 8003722:	d873      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d058      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x13a>
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d86f      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b30      	cmp	r3, #48	; 0x30
 800372e:	d064      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003730:	2b30      	cmp	r3, #48	; 0x30
 8003732:	d86b      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b20      	cmp	r3, #32
 8003736:	d060      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d867      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d05c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003740:	2b10      	cmp	r3, #16
 8003742:	d05a      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	e062      	b.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f000 f965 	bl	8003a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	609a      	str	r2, [r3, #8]
      break;
 8003772:	e04f      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f000 f94e 	bl	8003a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003796:	609a      	str	r2, [r3, #8]
      break;
 8003798:	e03c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 f8c2 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2150      	movs	r1, #80	; 0x50
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f91b 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80037b8:	e02c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 f8e1 	bl	800398e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2160      	movs	r1, #96	; 0x60
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f90b 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80037d8:	e01c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 f8a2 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2140      	movs	r1, #64	; 0x40
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f8fb 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80037f8:	e00c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 f8f2 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800380a:	e003      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e000      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a34      	ldr	r2, [pc, #208]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00f      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d00b      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a31      	ldr	r2, [pc, #196]	; (8003918 <TIM_Base_SetConfig+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a30      	ldr	r2, [pc, #192]	; (800391c <TIM_Base_SetConfig+0xec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <TIM_Base_SetConfig+0xf0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01b      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d017      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a22      	ldr	r2, [pc, #136]	; (8003918 <TIM_Base_SetConfig+0xe8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a21      	ldr	r2, [pc, #132]	; (800391c <TIM_Base_SetConfig+0xec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <TIM_Base_SetConfig+0xf0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <TIM_Base_SetConfig+0xf4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <TIM_Base_SetConfig+0xf8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_Base_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0210 	bic.w	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 0307 	orr.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e050      	b.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10c      	bne.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000

08003b40 <CreateChunkMatrix>:
#include "matrix.h"




ChunkMatrix CreateChunkMatrix(uint8_t * buff){
 8003b40:	b490      	push	{r4, r7}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	ChunkMatrix new_ChunkMatrix;
	new_ChunkMatrix.ChunkSize=8;
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	723b      	strb	r3, [r7, #8]
	new_ChunkMatrix.MatrixRes=28;
 8003b4e:	231c      	movs	r3, #28
 8003b50:	727b      	strb	r3, [r7, #9]
	new_ChunkMatrix.ChunkNum=new_ChunkMatrix.MatrixRes*new_ChunkMatrix.MatrixRes;
 8003b52:	7a7b      	ldrb	r3, [r7, #9]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	7a7b      	ldrb	r3, [r7, #9]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	fb12 f303 	smulbb	r3, r2, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	817b      	strh	r3, [r7, #10]
	//uint8_t buff[new_ChunkMatrix.ChunkNum];
	new_ChunkMatrix.Chunks=buff;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	617b      	str	r3, [r7, #20]
	new_ChunkMatrix.Color1=SHAD1;
 8003b66:	2300      	movs	r3, #0
 8003b68:	81bb      	strh	r3, [r7, #12]
	new_ChunkMatrix.Color2=SHAD2;
 8003b6a:	f244 2308 	movw	r3, #16904	; 0x4208
 8003b6e:	81fb      	strh	r3, [r7, #14]
	new_ChunkMatrix.Color3=SHAD3;
 8003b70:	f245 238a 	movw	r3, #21130	; 0x528a
 8003b74:	823b      	strh	r3, [r7, #16]
	new_ChunkMatrix.Color4=SHAD4;
 8003b76:	f648 4351 	movw	r3, #35921	; 0x8c51
 8003b7a:	827b      	strh	r3, [r7, #18]
	return new_ChunkMatrix;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	461c      	mov	r4, r3
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc90      	pop	{r4, r7}
 8003b92:	4770      	bx	lr

08003b94 <CalcChunk>:



//column 0-27  row 0-27
void CalcChunk(ST7789V *this,ChunkMatrix * cmtx,uint16_t X ,uint16_t Y){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	80fb      	strh	r3, [r7, #6]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80bb      	strh	r3, [r7, #4]
	uint8_t column =30-(X-X%cmtx->ChunkSize)/cmtx->ChunkSize;
 8003baa:	88f9      	ldrh	r1, [r7, #6]
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	fb93 f0f2 	sdiv	r0, r3, r2
 8003bb6:	fb00 f202 	mul.w	r2, r0, r2
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	1acb      	subs	r3, r1, r3
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f1c3 031e 	rsb	r3, r3, #30
 8003bcc:	75fb      	strb	r3, [r7, #23]
	uint8_t row=40-(Y-Y%cmtx->ChunkSize)/cmtx->ChunkSize;
 8003bce:	88b9      	ldrh	r1, [r7, #4]
 8003bd0:	88bb      	ldrh	r3, [r7, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	fb93 f0f2 	sdiv	r0, r3, r2
 8003bda:	fb00 f202 	mul.w	r2, r0, r2
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	1acb      	subs	r3, r1, r3
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8003bf0:	75bb      	strb	r3, [r7, #22]
	static uint8_t prevRow=0,prevCol=0;
	if(column==0) column=1;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <CalcChunk+0x68>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
	if(column>=29) column=cmtx->MatrixRes;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b1c      	cmp	r3, #28
 8003c00:	d902      	bls.n	8003c08 <CalcChunk+0x74>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	75fb      	strb	r3, [r7, #23]
	column--;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
	if(row==0) row=1;
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <CalcChunk+0x84>
 8003c14:	2301      	movs	r3, #1
 8003c16:	75bb      	strb	r3, [r7, #22]
	if(row>=29) row=cmtx->MatrixRes;
 8003c18:	7dbb      	ldrb	r3, [r7, #22]
 8003c1a:	2b1c      	cmp	r3, #28
 8003c1c:	d902      	bls.n	8003c24 <CalcChunk+0x90>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	75bb      	strb	r3, [r7, #22]
	row--;
 8003c24:	7dbb      	ldrb	r3, [r7, #22]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	75bb      	strb	r3, [r7, #22]
	if(prevRow!=row || prevCol!=column){
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <CalcChunk+0xcc>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	7dba      	ldrb	r2, [r7, #22]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d104      	bne.n	8003c3e <CalcChunk+0xaa>
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <CalcChunk+0xd0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	7dfa      	ldrb	r2, [r7, #23]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d00b      	beq.n	8003c56 <CalcChunk+0xc2>
		FillChunks(this,cmtx,row, column);
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	7dba      	ldrb	r2, [r7, #22]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f80f 	bl	8003c68 <FillChunks>
		prevRow=row;
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <CalcChunk+0xcc>)
 8003c4c:	7dbb      	ldrb	r3, [r7, #22]
 8003c4e:	7013      	strb	r3, [r2, #0]
		prevCol=column;
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <CalcChunk+0xd0>)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	7013      	strb	r3, [r2, #0]
	}
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000534 	.word	0x20000534
 8003c64:	20000535 	.word	0x20000535

08003c68 <FillChunks>:
 * 6 - L LD D
 * 7 - L LU U RU R
 * 8 - U RU R
 * 9 - L LU U
 */
void  FillChunks(ST7789V *this,ChunkMatrix * cmtx,uint8_t row , uint8_t column){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	460b      	mov	r3, r1
 8003c78:	71fb      	strb	r3, [r7, #7]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71bb      	strb	r3, [r7, #6]
	uint8_t bound1=0,bound2=0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
 8003c82:	2300      	movs	r3, #0
 8003c84:	75bb      	strb	r3, [r7, #22]
	if(row==0)
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <FillChunks+0x2a>
		bound1=4;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	75fb      	strb	r3, [r7, #23]
 8003c90:	e004      	b.n	8003c9c <FillChunks+0x34>
	else if(row==27)
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b1b      	cmp	r3, #27
 8003c96:	d101      	bne.n	8003c9c <FillChunks+0x34>
		bound1=7;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	75fb      	strb	r3, [r7, #23]
	if(column==0)
 8003c9c:	79bb      	ldrb	r3, [r7, #6]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <FillChunks+0x40>
		bound2=1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75bb      	strb	r3, [r7, #22]
 8003ca6:	e004      	b.n	8003cb2 <FillChunks+0x4a>
	else if(column==27)
 8003ca8:	79bb      	ldrb	r3, [r7, #6]
 8003caa:	2b1b      	cmp	r3, #27
 8003cac:	d101      	bne.n	8003cb2 <FillChunks+0x4a>
		bound2=2;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	75bb      	strb	r3, [r7, #22]
	switch(bound1+bound2){
 8003cb2:	7dfa      	ldrb	r2, [r7, #23]
 8003cb4:	7dbb      	ldrb	r3, [r7, #22]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	f200 8218 	bhi.w	80040ee <FillChunks+0x486>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <FillChunks+0x5c>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003daf 	.word	0x08003daf
 8003ccc:	08003e2d 	.word	0x08003e2d
 8003cd0:	080040ef 	.word	0x080040ef
 8003cd4:	08003eab 	.word	0x08003eab
 8003cd8:	08003f29 	.word	0x08003f29
 8003cdc:	08003f7b 	.word	0x08003f7b
 8003ce0:	08003fcd 	.word	0x08003fcd
 8003ce4:	0800404b 	.word	0x0800404b
 8003ce8:	0800409d 	.word	0x0800409d
		case 0:{
			PutDataToArray(this,cmtx,row, column-1, 64); //L
 8003cec:	79bb      	ldrb	r3, [r7, #6]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	79fa      	ldrb	r2, [r7, #7]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	9100      	str	r1, [sp, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa04 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64); //LU
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	79bb      	ldrb	r3, [r7, #6]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	9100      	str	r1, [sp, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f9f8 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	79bb      	ldrb	r3, [r7, #6]
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	9100      	str	r1, [sp, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9ee 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	79fa      	ldrb	r2, [r7, #7]
 8003d30:	21ff      	movs	r1, #255	; 0xff
 8003d32:	9100      	str	r1, [sp, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f9e6 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1,64);//RU
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	79bb      	ldrb	r3, [r7, #6]
 8003d44:	3301      	adds	r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2140      	movs	r1, #64	; 0x40
 8003d4a:	9100      	str	r1, [sp, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9da 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	79fa      	ldrb	r2, [r7, #7]
 8003d5c:	2140      	movs	r1, #64	; 0x40
 8003d5e:	9100      	str	r1, [sp, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f9d0 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	79bb      	ldrb	r3, [r7, #6]
 8003d70:	3301      	adds	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	9100      	str	r1, [sp, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f9c4 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	3301      	adds	r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	79bb      	ldrb	r3, [r7, #6]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	9100      	str	r1, [sp, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9ba 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	3301      	adds	r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	79bb      	ldrb	r3, [r7, #6]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	9100      	str	r1, [sp, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9ae 	bl	8004108 <PutDataToArray>
			break;
 8003dac:	e1a8      	b.n	8004100 <FillChunks+0x498>
		}
		case 1:{// 1 - U D R RU RD
			PutDataToArray(this,cmtx,row+1, column, 64); //D
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	9100      	str	r1, [sp, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9a3 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64); //RD
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2140      	movs	r1, #64	; 0x40
 8003dd0:	9100      	str	r1, [sp, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f997 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003dda:	79bb      	ldrb	r3, [r7, #6]
 8003ddc:	79fa      	ldrb	r2, [r7, #7]
 8003dde:	21ff      	movs	r1, #255	; 0xff
 8003de0:	9100      	str	r1, [sp, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f98f 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	79bb      	ldrb	r3, [r7, #6]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	9100      	str	r1, [sp, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f983 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	79bb      	ldrb	r3, [r7, #6]
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	9100      	str	r1, [sp, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f979 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8003e16:	79bb      	ldrb	r3, [r7, #6]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	79fa      	ldrb	r2, [r7, #7]
 8003e1e:	2140      	movs	r1, #64	; 0x40
 8003e20:	9100      	str	r1, [sp, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f96f 	bl	8004108 <PutDataToArray>
			break;
 8003e2a:	e169      	b.n	8004100 <FillChunks+0x498>
		}
		case 2:{//2 - U D L LU LD
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	79bb      	ldrb	r3, [r7, #6]
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	9100      	str	r1, [sp, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f964 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	79bb      	ldrb	r3, [r7, #6]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	9100      	str	r1, [sp, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f958 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003e58:	79bb      	ldrb	r3, [r7, #6]
 8003e5a:	79fa      	ldrb	r2, [r7, #7]
 8003e5c:	21ff      	movs	r1, #255	; 0xff
 8003e5e:	9100      	str	r1, [sp, #0]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f950 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	79bb      	ldrb	r3, [r7, #6]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	9100      	str	r1, [sp, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f944 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	79bb      	ldrb	r3, [r7, #6]
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	9100      	str	r1, [sp, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f93a 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8003e94:	79bb      	ldrb	r3, [r7, #6]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	79fa      	ldrb	r2, [r7, #7]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	9100      	str	r1, [sp, #0]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f930 	bl	8004108 <PutDataToArray>
			break;
 8003ea8:	e12a      	b.n	8004100 <FillChunks+0x498>
		}
		case 4:{// 4 - L LD D RD R
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8003eaa:	79bb      	ldrb	r3, [r7, #6]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	79fa      	ldrb	r2, [r7, #7]
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	9100      	str	r1, [sp, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f925 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	79bb      	ldrb	r3, [r7, #6]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	9100      	str	r1, [sp, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f919 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003ed6:	79bb      	ldrb	r3, [r7, #6]
 8003ed8:	79fa      	ldrb	r2, [r7, #7]
 8003eda:	21ff      	movs	r1, #255	; 0xff
 8003edc:	9100      	str	r1, [sp, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f911 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	79bb      	ldrb	r3, [r7, #6]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	9100      	str	r1, [sp, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f905 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	3301      	adds	r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	79bb      	ldrb	r3, [r7, #6]
 8003f06:	2140      	movs	r1, #64	; 0x40
 8003f08:	9100      	str	r1, [sp, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8fb 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8003f12:	79bb      	ldrb	r3, [r7, #6]
 8003f14:	3301      	adds	r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	79fa      	ldrb	r2, [r7, #7]
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	9100      	str	r1, [sp, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8f1 	bl	8004108 <PutDataToArray>

			break;
 8003f26:	e0eb      	b.n	8004100 <FillChunks+0x498>
		}
		case 5:{//5 - D RD R
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8003f28:	79bb      	ldrb	r3, [r7, #6]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	79fa      	ldrb	r2, [r7, #7]
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	9100      	str	r1, [sp, #0]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f8e6 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	79bb      	ldrb	r3, [r7, #6]
 8003f44:	3301      	adds	r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	9100      	str	r1, [sp, #0]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f8da 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003f54:	79bb      	ldrb	r3, [r7, #6]
 8003f56:	79fa      	ldrb	r2, [r7, #7]
 8003f58:	21ff      	movs	r1, #255	; 0xff
 8003f5a:	9100      	str	r1, [sp, #0]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8d2 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	79bb      	ldrb	r3, [r7, #6]
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	9100      	str	r1, [sp, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f8c8 	bl	8004108 <PutDataToArray>
			break;
 8003f78:	e0c2      	b.n	8004100 <FillChunks+0x498>
		}
		case 6:{// 6 - L LD D
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8003f7a:	79bb      	ldrb	r3, [r7, #6]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	79fa      	ldrb	r2, [r7, #7]
 8003f82:	2140      	movs	r1, #64	; 0x40
 8003f84:	9100      	str	r1, [sp, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f8bd 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003f8e:	79bb      	ldrb	r3, [r7, #6]
 8003f90:	79fa      	ldrb	r2, [r7, #7]
 8003f92:	21ff      	movs	r1, #255	; 0xff
 8003f94:	9100      	str	r1, [sp, #0]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8b5 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2140      	movs	r1, #64	; 0x40
 8003fac:	9100      	str	r1, [sp, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f8a9 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	79bb      	ldrb	r3, [r7, #6]
 8003fbe:	2140      	movs	r1, #64	; 0x40
 8003fc0:	9100      	str	r1, [sp, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f89f 	bl	8004108 <PutDataToArray>
			break;
 8003fca:	e099      	b.n	8004100 <FillChunks+0x498>
		}
		case 7:{//7 - L LU U RU R
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8003fcc:	79bb      	ldrb	r3, [r7, #6]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	79fa      	ldrb	r2, [r7, #7]
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	9100      	str	r1, [sp, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f894 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	79bb      	ldrb	r3, [r7, #6]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	9100      	str	r1, [sp, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f888 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8003ff8:	79bb      	ldrb	r3, [r7, #6]
 8003ffa:	79fa      	ldrb	r2, [r7, #7]
 8003ffc:	21ff      	movs	r1, #255	; 0xff
 8003ffe:	9100      	str	r1, [sp, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f880 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	3b01      	subs	r3, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	79bb      	ldrb	r3, [r7, #6]
 8004010:	3301      	adds	r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	9100      	str	r1, [sp, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f874 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8004020:	79bb      	ldrb	r3, [r7, #6]
 8004022:	3301      	adds	r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	79fa      	ldrb	r2, [r7, #7]
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	9100      	str	r1, [sp, #0]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f86a 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	3b01      	subs	r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	79bb      	ldrb	r3, [r7, #6]
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	9100      	str	r1, [sp, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f860 	bl	8004108 <PutDataToArray>
			break;
 8004048:	e05a      	b.n	8004100 <FillChunks+0x498>
		}
		case 8:{//8 - U RU R
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	3b01      	subs	r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	2140      	movs	r1, #64	; 0x40
 8004054:	9100      	str	r1, [sp, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f855 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	3b01      	subs	r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	79bb      	ldrb	r3, [r7, #6]
 8004066:	3301      	adds	r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2140      	movs	r1, #64	; 0x40
 800406c:	9100      	str	r1, [sp, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f849 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8004076:	79bb      	ldrb	r3, [r7, #6]
 8004078:	79fa      	ldrb	r2, [r7, #7]
 800407a:	21ff      	movs	r1, #255	; 0xff
 800407c:	9100      	str	r1, [sp, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f841 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8004086:	79bb      	ldrb	r3, [r7, #6]
 8004088:	3301      	adds	r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	79fa      	ldrb	r2, [r7, #7]
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	9100      	str	r1, [sp, #0]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f837 	bl	8004108 <PutDataToArray>
			break;
 800409a:	e031      	b.n	8004100 <FillChunks+0x498>
		}
		case 9:{//9 - L LU U
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	3b01      	subs	r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	79bb      	ldrb	r3, [r7, #6]
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	9100      	str	r1, [sp, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f82c 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	79bb      	ldrb	r3, [r7, #6]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	9100      	str	r1, [sp, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f820 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 80040c8:	79bb      	ldrb	r3, [r7, #6]
 80040ca:	79fa      	ldrb	r2, [r7, #7]
 80040cc:	21ff      	movs	r1, #255	; 0xff
 80040ce:	9100      	str	r1, [sp, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f818 	bl	8004108 <PutDataToArray>
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 80040d8:	79bb      	ldrb	r3, [r7, #6]
 80040da:	3b01      	subs	r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	79fa      	ldrb	r2, [r7, #7]
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	9100      	str	r1, [sp, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f80e 	bl	8004108 <PutDataToArray>
			break;
 80040ec:	e008      	b.n	8004100 <FillChunks+0x498>
		}
		default:{
			PutDataToArray(this,cmtx,row, column, 255);
 80040ee:	79bb      	ldrb	r3, [r7, #6]
 80040f0:	79fa      	ldrb	r2, [r7, #7]
 80040f2:	21ff      	movs	r1, #255	; 0xff
 80040f4:	9100      	str	r1, [sp, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f805 	bl	8004108 <PutDataToArray>
			break;
 80040fe:	bf00      	nop
		}
	}
}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <PutDataToArray>:

void PutDataToArray(ST7789V *this,ChunkMatrix * cmtx,uint8_t row , uint8_t column,uint16_t value){
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	460b      	mov	r3, r1
 8004118:	71fb      	strb	r3, [r7, #7]
 800411a:	4613      	mov	r3, r2
 800411c:	71bb      	strb	r3, [r7, #6]
	if(cmtx->Chunks[cmtx->MatrixRes*row+column]<=128 &&value!=255){
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	7852      	ldrb	r2, [r2, #1]
 8004126:	4611      	mov	r1, r2
 8004128:	79fa      	ldrb	r2, [r7, #7]
 800412a:	fb02 f101 	mul.w	r1, r2, r1
 800412e:	79ba      	ldrb	r2, [r7, #6]
 8004130:	440a      	add	r2, r1
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d81f      	bhi.n	800417a <PutDataToArray+0x72>
 800413a:	8c3b      	ldrh	r3, [r7, #32]
 800413c:	2bff      	cmp	r3, #255	; 0xff
 800413e:	d01c      	beq.n	800417a <PutDataToArray+0x72>
		cmtx->Chunks[cmtx->MatrixRes*row+column]+=value;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	7852      	ldrb	r2, [r2, #1]
 8004148:	4611      	mov	r1, r2
 800414a:	79fa      	ldrb	r2, [r7, #7]
 800414c:	fb02 f101 	mul.w	r1, r2, r1
 8004150:	79ba      	ldrb	r2, [r7, #6]
 8004152:	440a      	add	r2, r1
 8004154:	4413      	add	r3, r2
 8004156:	7819      	ldrb	r1, [r3, #0]
 8004158:	8c3b      	ldrh	r3, [r7, #32]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68b8      	ldr	r0, [r7, #8]
 8004162:	7840      	ldrb	r0, [r0, #1]
 8004164:	4604      	mov	r4, r0
 8004166:	79f8      	ldrb	r0, [r7, #7]
 8004168:	fb00 f404 	mul.w	r4, r0, r4
 800416c:	79b8      	ldrb	r0, [r7, #6]
 800416e:	4420      	add	r0, r4
 8004170:	4403      	add	r3, r0
 8004172:	440a      	add	r2, r1
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e03c      	b.n	80041f4 <PutDataToArray+0xec>
	}
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]<=192 && value!=255){
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	7852      	ldrb	r2, [r2, #1]
 8004182:	4611      	mov	r1, r2
 8004184:	79fa      	ldrb	r2, [r7, #7]
 8004186:	fb02 f101 	mul.w	r1, r2, r1
 800418a:	79ba      	ldrb	r2, [r7, #6]
 800418c:	440a      	add	r2, r1
 800418e:	4413      	add	r3, r2
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2bc0      	cmp	r3, #192	; 0xc0
 8004194:	d821      	bhi.n	80041da <PutDataToArray+0xd2>
 8004196:	8c3b      	ldrh	r3, [r7, #32]
 8004198:	2bff      	cmp	r3, #255	; 0xff
 800419a:	d01e      	beq.n	80041da <PutDataToArray+0xd2>
		cmtx->Chunks[cmtx->MatrixRes*row+column]+=value-1;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	7852      	ldrb	r2, [r2, #1]
 80041a4:	4611      	mov	r1, r2
 80041a6:	79fa      	ldrb	r2, [r7, #7]
 80041a8:	fb02 f101 	mul.w	r1, r2, r1
 80041ac:	79ba      	ldrb	r2, [r7, #6]
 80041ae:	440a      	add	r2, r1
 80041b0:	4413      	add	r3, r2
 80041b2:	781a      	ldrb	r2, [r3, #0]
 80041b4:	8c3b      	ldrh	r3, [r7, #32]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	7849      	ldrb	r1, [r1, #1]
 80041c4:	4608      	mov	r0, r1
 80041c6:	79f9      	ldrb	r1, [r7, #7]
 80041c8:	fb01 f000 	mul.w	r0, r1, r0
 80041cc:	79b9      	ldrb	r1, [r7, #6]
 80041ce:	4401      	add	r1, r0
 80041d0:	440b      	add	r3, r1
 80041d2:	3a01      	subs	r2, #1
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e00c      	b.n	80041f4 <PutDataToArray+0xec>
	}
	else{
		cmtx->Chunks[cmtx->MatrixRes*row+column]=255;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	7852      	ldrb	r2, [r2, #1]
 80041e2:	4611      	mov	r1, r2
 80041e4:	79fa      	ldrb	r2, [r7, #7]
 80041e6:	fb02 f101 	mul.w	r1, r2, r1
 80041ea:	79ba      	ldrb	r2, [r7, #6]
 80041ec:	440a      	add	r2, r1
 80041ee:	4413      	add	r3, r2
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	701a      	strb	r2, [r3, #0]
	}
	ColorChunks(this,cmtx,row, column);
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	79bb      	ldrb	r3, [r7, #6]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f804 	bl	800420c <ColorChunks>
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <ColorChunks>:



void ColorChunks(ST7789V *this,ChunkMatrix * cmtx,uint16_t row , uint16_t column){
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	460b      	mov	r3, r1
 800421c:	80fb      	strh	r3, [r7, #6]
 800421e:	4613      	mov	r3, r2
 8004220:	80bb      	strh	r3, [r7, #4]
	uint16_t X0=this->LCD_Width-2*cmtx->ChunkSize-cmtx->ChunkSize*column;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8bda      	ldrh	r2, [r3, #30]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	b29b      	uxth	r3, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	b29a      	uxth	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	88b9      	ldrh	r1, [r7, #4]
 800423c:	fb11 f303 	smulbb	r3, r1, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	82fb      	strh	r3, [r7, #22]
	uint16_t X1=this->LCD_Width-cmtx->ChunkSize-cmtx->ChunkSize*column;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8bda      	ldrh	r2, [r3, #30]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	b29a      	uxth	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	88b9      	ldrh	r1, [r7, #4]
 800425c:	fb11 f303 	smulbb	r3, r1, r3
 8004260:	b29b      	uxth	r3, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	82bb      	strh	r3, [r7, #20]
	uint16_t Y0=this->LCD_Height-cmtx->ChunkSize-cmtx->ChunkSize*row;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8b9a      	ldrh	r2, [r3, #28]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	b29a      	uxth	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	88f9      	ldrh	r1, [r7, #6]
 800427c:	fb11 f303 	smulbb	r3, r1, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	827b      	strh	r3, [r7, #18]
	uint16_t Y1=this->LCD_Height-2*cmtx->ChunkSize-cmtx->ChunkSize*row;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8b9a      	ldrh	r2, [r3, #28]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	b29a      	uxth	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	88f9      	ldrh	r1, [r7, #6]
 80042a0:	fb11 f303 	smulbb	r3, r1, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	823b      	strh	r3, [r7, #16]
	if(cmtx->Chunks[cmtx->MatrixRes*row+column]==64){
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	7852      	ldrb	r2, [r2, #1]
 80042b2:	4611      	mov	r1, r2
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	fb02 f101 	mul.w	r1, r2, r1
 80042ba:	88ba      	ldrh	r2, [r7, #4]
 80042bc:	440a      	add	r2, r1
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d10c      	bne.n	80042e0 <ColorChunks+0xd4>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color4);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	895b      	ldrh	r3, [r3, #10]
 80042ca:	8ab8      	ldrh	r0, [r7, #20]
 80042cc:	8a7a      	ldrh	r2, [r7, #18]
 80042ce:	8af9      	ldrh	r1, [r7, #22]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	8a3b      	ldrh	r3, [r7, #16]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	4603      	mov	r3, r0
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fadc 	bl	8004896 <ST7789V_DrawRect>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color1);
	}
	else{
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, YELLOW);
	}
}
 80042de:	e05c      	b.n	800439a <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==128){
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	7852      	ldrb	r2, [r2, #1]
 80042e8:	4611      	mov	r1, r2
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	fb02 f101 	mul.w	r1, r2, r1
 80042f0:	88ba      	ldrh	r2, [r7, #4]
 80042f2:	440a      	add	r2, r1
 80042f4:	4413      	add	r3, r2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d10c      	bne.n	8004316 <ColorChunks+0x10a>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1,cmtx->Color3);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	891b      	ldrh	r3, [r3, #8]
 8004300:	8ab8      	ldrh	r0, [r7, #20]
 8004302:	8a7a      	ldrh	r2, [r7, #18]
 8004304:	8af9      	ldrh	r1, [r7, #22]
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	8a3b      	ldrh	r3, [r7, #16]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fac1 	bl	8004896 <ST7789V_DrawRect>
}
 8004314:	e041      	b.n	800439a <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==192){
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	7852      	ldrb	r2, [r2, #1]
 800431e:	4611      	mov	r1, r2
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	fb02 f101 	mul.w	r1, r2, r1
 8004326:	88ba      	ldrh	r2, [r7, #4]
 8004328:	440a      	add	r2, r1
 800432a:	4413      	add	r3, r2
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2bc0      	cmp	r3, #192	; 0xc0
 8004330:	d10c      	bne.n	800434c <ColorChunks+0x140>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color2);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	88db      	ldrh	r3, [r3, #6]
 8004336:	8ab8      	ldrh	r0, [r7, #20]
 8004338:	8a7a      	ldrh	r2, [r7, #18]
 800433a:	8af9      	ldrh	r1, [r7, #22]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	8a3b      	ldrh	r3, [r7, #16]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4603      	mov	r3, r0
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 faa6 	bl	8004896 <ST7789V_DrawRect>
}
 800434a:	e026      	b.n	800439a <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==255){
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	7852      	ldrb	r2, [r2, #1]
 8004354:	4611      	mov	r1, r2
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	fb02 f101 	mul.w	r1, r2, r1
 800435c:	88ba      	ldrh	r2, [r7, #4]
 800435e:	440a      	add	r2, r1
 8004360:	4413      	add	r3, r2
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2bff      	cmp	r3, #255	; 0xff
 8004366:	d10c      	bne.n	8004382 <ColorChunks+0x176>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color1);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	889b      	ldrh	r3, [r3, #4]
 800436c:	8ab8      	ldrh	r0, [r7, #20]
 800436e:	8a7a      	ldrh	r2, [r7, #18]
 8004370:	8af9      	ldrh	r1, [r7, #22]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	8a3b      	ldrh	r3, [r7, #16]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa8b 	bl	8004896 <ST7789V_DrawRect>
}
 8004380:	e00b      	b.n	800439a <ColorChunks+0x18e>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, YELLOW);
 8004382:	8ab8      	ldrh	r0, [r7, #20]
 8004384:	8a7a      	ldrh	r2, [r7, #18]
 8004386:	8af9      	ldrh	r1, [r7, #22]
 8004388:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	8a3b      	ldrh	r3, [r7, #16]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4603      	mov	r3, r0
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa7e 	bl	8004896 <ST7789V_DrawRect>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <RefreshMenu>:
#include "menu.h"



void RefreshMenu(ST7789V *this,ChunkMatrix * cmtx){
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af02      	add	r7, sp, #8
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]

	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BACKGROUNDCOL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8bda      	ldrh	r2, [r3, #30]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8b9b      	ldrh	r3, [r3, #28]
 80043b4:	f644 616c 	movw	r1, #20076	; 0x4e6c
 80043b8:	9101      	str	r1, [sp, #4]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	2100      	movs	r1, #0
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa67 	bl	8004896 <ST7789V_DrawRect>
	ST7789V_DrawRect(this,8, 88, this->LCD_Width-cmtx->ChunkSize, this->LCD_Height-cmtx->ChunkSize, MATRIXCOL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8bda      	ldrh	r2, [r3, #30]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	b299      	uxth	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8b9a      	ldrh	r2, [r3, #28]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e8:	9201      	str	r2, [sp, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	460b      	mov	r3, r1
 80043ee:	2258      	movs	r2, #88	; 0x58
 80043f0:	2108      	movs	r1, #8
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa4f 	bl	8004896 <ST7789V_DrawRect>
	ST7789V_DrawRect(this,8, cmtx->ChunkSize, this->LCD_Width-cmtx->ChunkSize, 55,BUTTONCOL);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b299      	uxth	r1, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8bda      	ldrh	r2, [r3, #30]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	f248 7265 	movw	r2, #34661	; 0x8765
 8004410:	9201      	str	r2, [sp, #4]
 8004412:	2237      	movs	r2, #55	; 0x37
 8004414:	9200      	str	r2, [sp, #0]
 8004416:	460a      	mov	r2, r1
 8004418:	2108      	movs	r1, #8
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa3b 	bl	8004896 <ST7789V_DrawRect>
	memset(cmtx->Chunks,0,cmtx->ChunkNum);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68d8      	ldr	r0, [r3, #12]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	885b      	ldrh	r3, [r3, #2]
 8004428:	461a      	mov	r2, r3
 800442a:	2100      	movs	r1, #0
 800442c:	f000 fe88 	bl	8005140 <memset>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <LoopScreen>:

void LoopScreen(ST7789V *this,ChunkMatrix * cmtx,uint16_t X ,uint16_t Y){
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	460b      	mov	r3, r1
 8004448:	80fb      	strh	r3, [r7, #6]
 800444a:	4613      	mov	r3, r2
 800444c:	80bb      	strh	r3, [r7, #4]
	static uint32_t time1=0;// 1=100us
	static uint8_t menuState=1;

	if(Y>=88 &&menuState==1){
 800444e:	88bb      	ldrh	r3, [r7, #4]
 8004450:	2b57      	cmp	r3, #87	; 0x57
 8004452:	d90a      	bls.n	800446a <LoopScreen+0x32>
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <LoopScreen+0xcc>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <LoopScreen+0x32>
		CalcChunk(this,cmtx,X, Y);
 800445c:	88bb      	ldrh	r3, [r7, #4]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fb96 	bl	8003b94 <CalcChunk>
 8004468:	e03d      	b.n	80044e6 <LoopScreen+0xae>


	}
	else if(Y<=20 && menuState==1&& (TIM2->CNT- time1)>10000){
 800446a:	88bb      	ldrh	r3, [r7, #4]
 800446c:	2b14      	cmp	r3, #20
 800446e:	d824      	bhi.n	80044ba <LoopScreen+0x82>
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <LoopScreen+0xcc>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d120      	bne.n	80044ba <LoopScreen+0x82>
 8004478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800447c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <LoopScreen+0xd0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f242 7210 	movw	r2, #10000	; 0x2710
 8004488:	4293      	cmp	r3, r2
 800448a:	d916      	bls.n	80044ba <LoopScreen+0x82>
		time1=TIM2->CNT;
 800448c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <LoopScreen+0xd0>)
 8004494:	6013      	str	r3, [r2, #0]
		menuState=0;
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <LoopScreen+0xcc>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
		//uint8_t  prediction = predict(void)
		//uint8_t  predictionProb = getProb(void)
		ST7789V_DrawRect(this,0, 0,this->LCD_Width,this->LCD_Height , RELOADCOL);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8bda      	ldrh	r2, [r3, #30]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8b9b      	ldrh	r3, [r3, #28]
 80044a4:	f244 210a 	movw	r1, #16906	; 0x420a
 80044a8:	9101      	str	r1, [sp, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	2100      	movs	r1, #0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f9ef 	bl	8004896 <ST7789V_DrawRect>
 80044b8:	e015      	b.n	80044e6 <LoopScreen+0xae>
		//DrawText(" ")

	}
	else if(TIM2->CNT-time1>10000){
 80044ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <LoopScreen+0xd0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d90b      	bls.n	80044e6 <LoopScreen+0xae>
		RefreshMenu(this,cmtx);
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff66 	bl	80043a2 <RefreshMenu>
		time1=TIM2->CNT;
 80044d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <LoopScreen+0xd0>)
 80044de:	6013      	str	r3, [r2, #0]

		menuState=1;
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <LoopScreen+0xcc>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
	}
	if(TIM2->CNT<time1)
 80044e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <LoopScreen+0xd0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d202      	bcs.n	80044fa <LoopScreen+0xc2>
		time1=0;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <LoopScreen+0xd0>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]


}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000009 	.word	0x20000009
 8004508:	20000538 	.word	0x20000538

0800450c <ST7789V_Init>:





void ST7789V_Init(ST7789V * this){
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]

	this->CS_port=LCD_CS_GPIO_Port;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a31      	ldr	r2, [pc, #196]	; (80045dc <ST7789V_Init+0xd0>)
 8004518:	611a      	str	r2, [r3, #16]
	this->CS_Pin=LCD_CS_Pin;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	829a      	strh	r2, [r3, #20]
	this->RST_Port=LCD_RST_GPIO_Port;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2e      	ldr	r2, [pc, #184]	; (80045dc <ST7789V_Init+0xd0>)
 8004524:	601a      	str	r2, [r3, #0]
	this->RST_Pin=LCD_RST_Pin;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	809a      	strh	r2, [r3, #4]
	this->DC_Port=LCD_DC_GPIO_Port;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <ST7789V_Init+0xd4>)
 8004530:	609a      	str	r2, [r3, #8]
	this->DC_Pin=LCD_DC_Pin;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2210      	movs	r2, #16
 8004536:	819a      	strh	r2, [r3, #12]
	this->pSpi=&hspi1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <ST7789V_Init+0xd8>)
 800453c:	619a      	str	r2, [r3, #24]
	this->LCD_Height=320;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004544:	839a      	strh	r2, [r3, #28]
	this->LCD_Width=240;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	22f0      	movs	r2, #240	; 0xf0
 800454a:	83da      	strh	r2, [r3, #30]

	ST7789V_Reset(this);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f84b 	bl	80045e8 <ST7789V_Reset>


	//////////////////////////////////
	ST7789V_WriteCommand(this, ST7789V_COLMOD_REG);
 8004552:	213a      	movs	r1, #58	; 0x3a
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f875 	bl	8004644 <ST7789V_WriteCommand>
	ST7789V_WriteDataByte(this, 0X55);//16 bit mode
 800455a:	2155      	movs	r1, #85	; 0x55
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8a4 	bl	80046aa <ST7789V_WriteDataByte>

	ST7789V_WriteCommand(this, ST7789V_INVON_REG);
 8004562:	2121      	movs	r1, #33	; 0x21
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f86d 	bl	8004644 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_SLPOUT_REG);
 800456a:	2111      	movs	r1, #17
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f869 	bl	8004644 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_NORON_REG);
 8004572:	2113      	movs	r1, #19
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f865 	bl	8004644 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_DISPON_REG);
 800457a:	2129      	movs	r1, #41	; 0x29
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f861 	bl	8004644 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, 0x01);
 8004582:	2101      	movs	r1, #1
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f85d 	bl	8004644 <ST7789V_WriteCommand>
	HAL_Delay(10);
 800458a:	200a      	movs	r0, #10
 800458c:	f7fc fe60 	bl	8001250 <HAL_Delay>
	ST7789V_WriteCommand(this, 0x11);
 8004590:	2111      	movs	r1, #17
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f856 	bl	8004644 <ST7789V_WriteCommand>
	HAL_Delay(100);
 8004598:	2064      	movs	r0, #100	; 0x64
 800459a:	f7fc fe59 	bl	8001250 <HAL_Delay>
	ST7789V_WriteCommand(this, 0x29);
 800459e:	2129      	movs	r1, #41	; 0x29
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f84f 	bl	8004644 <ST7789V_WriteCommand>

	ST7789V_SetRotation(this);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8fc 	bl	80047a4 <ST7789V_SetRotation>

	ST7789V_SetAdress(this,0, 0, 240, 320);
 80045ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	23f0      	movs	r3, #240	; 0xf0
 80045b4:	2200      	movs	r2, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f90d 	bl	80047d8 <ST7789V_SetAdress>
	ST7789V_DrawRect(this,0, 0, 240, 320, 0x0000);
 80045be:	2300      	movs	r3, #0
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	23f0      	movs	r3, #240	; 0xf0
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f961 	bl	8004896 <ST7789V_DrawRect>

}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40020400 	.word	0x40020400
 80045e0:	40020000 	.word	0x40020000
 80045e4:	20000380 	.word	0x20000380

080045e8 <ST7789V_Reset>:


void ST7789V_Reset(ST7789V * this){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(this->RST_Port, this->RST_Pin, GPIO_PIN_RESET);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	889b      	ldrh	r3, [r3, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	4619      	mov	r1, r3
 80045fc:	f7fd fc6a 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin, GPIO_PIN_RESET);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6918      	ldr	r0, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8a9b      	ldrh	r3, [r3, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	4619      	mov	r1, r3
 800460c:	f7fd fc62 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8004610:	201e      	movs	r0, #30
 8004612:	f7fc fe1d 	bl	8001250 <HAL_Delay>
	HAL_GPIO_WritePin(this->RST_Port, this->RST_Pin, GPIO_PIN_SET);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	889b      	ldrh	r3, [r3, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	4619      	mov	r1, r3
 8004622:	f7fd fc57 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin, GPIO_PIN_SET);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6918      	ldr	r0, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8a9b      	ldrh	r3, [r3, #20]
 800462e:	2201      	movs	r2, #1
 8004630:	4619      	mov	r1, r3
 8004632:	f7fd fc4f 	bl	8001ed4 <HAL_GPIO_WritePin>

	HAL_Delay(30);
 8004636:	201e      	movs	r0, #30
 8004638:	f7fc fe0a 	bl	8001250 <HAL_Delay>


}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <ST7789V_WriteCommand>:


void ST7789V_WriteCommand(ST7789V * this,uint8_t cmd){
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6918      	ldr	r0, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8a9b      	ldrh	r3, [r3, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	4619      	mov	r1, r3
 800465c:	f7fd fc3a 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_RESET);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6898      	ldr	r0, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	899b      	ldrh	r3, [r3, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	4619      	mov	r1, r3
 800466c:	f7fd fc32 	bl	8001ed4 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(this->pSpi, SPI_FLAG_TXE));
 8004670:	bf00      	nop
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d1f7      	bne.n	8004672 <ST7789V_WriteCommand+0x2e>
	HAL_SPI_Transmit(this->pSpi, &cmd, 1, HAL_MAX_DELAY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6998      	ldr	r0, [r3, #24]
 8004686:	1cf9      	adds	r1, r7, #3
 8004688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800468c:	2201      	movs	r2, #1
 800468e:	f7fe f8e8 	bl	8002862 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6918      	ldr	r0, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8a9b      	ldrh	r3, [r3, #20]
 800469a:	2201      	movs	r2, #1
 800469c:	4619      	mov	r1, r3
 800469e:	f7fd fc19 	bl	8001ed4 <HAL_GPIO_WritePin>

}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <ST7789V_WriteDataByte>:

void ST7789V_WriteDataByte(ST7789V * this,uint8_t data){
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6918      	ldr	r0, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8a9b      	ldrh	r3, [r3, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7fd fc07 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_SET);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6898      	ldr	r0, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	899b      	ldrh	r3, [r3, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fd fbff 	bl	8001ed4 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(this->pSpi, SPI_FLAG_TXE));
 80046d6:	bf00      	nop
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d1f7      	bne.n	80046d8 <ST7789V_WriteDataByte+0x2e>
	HAL_SPI_Transmit(this->pSpi, &data, 1, HAL_MAX_DELAY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6998      	ldr	r0, [r3, #24]
 80046ec:	1cf9      	adds	r1, r7, #3
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046f2:	2201      	movs	r2, #1
 80046f4:	f7fe f8b5 	bl	8002862 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6918      	ldr	r0, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8a9b      	ldrh	r3, [r3, #20]
 8004700:	2201      	movs	r2, #1
 8004702:	4619      	mov	r1, r3
 8004704:	f7fd fbe6 	bl	8001ed4 <HAL_GPIO_WritePin>


}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <ST7789V_WriteData>:


void ST7789V_WriteData(ST7789V * this,uint8_t *buff,uint32_t buffSize){
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6918      	ldr	r0, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8a9b      	ldrh	r3, [r3, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	4619      	mov	r1, r3
 8004728:	f7fd fbd4 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_SET);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6898      	ldr	r0, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	899b      	ldrh	r3, [r3, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	4619      	mov	r1, r3
 8004738:	f7fd fbcc 	bl	8001ed4 <HAL_GPIO_WritePin>

	uint16_t DataSize;
	uint32_t buffsize=buffSize;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	613b      	str	r3, [r7, #16]
	while(buffsize>0){
 8004740:	e021      	b.n	8004786 <ST7789V_WriteData+0x76>
		if (buffsize>65535)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d303      	bcc.n	8004752 <ST7789V_WriteData+0x42>
			DataSize=65535;
 800474a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474e:	82fb      	strh	r3, [r7, #22]
 8004750:	e001      	b.n	8004756 <ST7789V_WriteData+0x46>
		else
			DataSize=buffsize;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	82fb      	strh	r3, [r7, #22]
		HAL_SPI_Transmit_DMA(this->pSpi, buff,DataSize);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	8afa      	ldrh	r2, [r7, #22]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fc6e 	bl	8003040 <HAL_SPI_Transmit_DMA>
		while (this->pSpi->hdmatx->State != HAL_DMA_STATE_READY);
 8004764:	bf00      	nop
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d1f7      	bne.n	8004766 <ST7789V_WriteData+0x56>
		buff+=DataSize;
 8004776:	8afb      	ldrh	r3, [r7, #22]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4413      	add	r3, r2
 800477c:	60bb      	str	r3, [r7, #8]
		buffsize-=DataSize;
 800477e:	8afb      	ldrh	r3, [r7, #22]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	613b      	str	r3, [r7, #16]
	while(buffsize>0){
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1da      	bne.n	8004742 <ST7789V_WriteData+0x32>

	}
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6918      	ldr	r0, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8a9b      	ldrh	r3, [r3, #20]
 8004794:	2201      	movs	r2, #1
 8004796:	4619      	mov	r1, r3
 8004798:	f7fd fb9c 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <ST7789V_SetRotation>:


void ST7789V_SetRotation(ST7789V * this){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	ST7789V_WriteCommand(this,ST7789V_MADCTL_REG);
 80047ac:	2136      	movs	r1, #54	; 0x36
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff48 	bl	8004644 <ST7789V_WriteCommand>
	HAL_Delay(1);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fc fd4b 	bl	8001250 <HAL_Delay>
	ST7789V_WriteDataByte(this, 0x00|0x00);
 80047ba:	2100      	movs	r1, #0
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff74 	bl	80046aa <ST7789V_WriteDataByte>
	this->LCD_Height=320;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80047c8:	839a      	strh	r2, [r3, #28]
	this->LCD_Width=240;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	22f0      	movs	r2, #240	; 0xf0
 80047ce:	83da      	strh	r2, [r3, #30]

}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <ST7789V_SetAdress>:


void ST7789V_SetAdress(ST7789V* this,uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	460b      	mov	r3, r1
 80047ec:	813b      	strh	r3, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
	if(X0>X1){
 80047f2:	897a      	ldrh	r2, [r7, #10]
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d905      	bls.n	8004806 <ST7789V_SetAdress+0x2e>
		uint16_t temp1=X0;
 80047fa:	897b      	ldrh	r3, [r7, #10]
 80047fc:	83fb      	strh	r3, [r7, #30]
		X0=X1;
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	817b      	strh	r3, [r7, #10]
		X1=temp1;
 8004802:	8bfb      	ldrh	r3, [r7, #30]
 8004804:	80fb      	strh	r3, [r7, #6]
	}

	if(Y0>Y1){
 8004806:	893a      	ldrh	r2, [r7, #8]
 8004808:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800480a:	429a      	cmp	r2, r3
 800480c:	d905      	bls.n	800481a <ST7789V_SetAdress+0x42>
		uint16_t temp2=Y0;
 800480e:	893b      	ldrh	r3, [r7, #8]
 8004810:	83bb      	strh	r3, [r7, #28]
		Y0=Y1;
 8004812:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004814:	813b      	strh	r3, [r7, #8]
		Y1=temp2;
 8004816:	8bbb      	ldrh	r3, [r7, #28]
 8004818:	853b      	strh	r3, [r7, #40]	; 0x28
	}
	ST7789V_WriteCommand(this, ST7789V_CASET_REG);
 800481a:	212a      	movs	r1, #42	; 0x2a
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ff11 	bl	8004644 <ST7789V_WriteCommand>
	uint8_t adressX[4]={X0>>8,X0 & 0xFF,X1>>8,X1 & 0xFF};
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	0a1b      	lsrs	r3, r3, #8
 8004826:	b29b      	uxth	r3, r3
 8004828:	b2db      	uxtb	r3, r3
 800482a:	763b      	strb	r3, [r7, #24]
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	767b      	strb	r3, [r7, #25]
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	b29b      	uxth	r3, r3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	76bb      	strb	r3, [r7, #26]
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	76fb      	strb	r3, [r7, #27]
	ST7789V_WriteData(this, adressX, 4);
 8004842:	f107 0318 	add.w	r3, r7, #24
 8004846:	2204      	movs	r2, #4
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff ff60 	bl	8004710 <ST7789V_WriteData>
	ST7789V_WriteCommand(this, ST7789V_RASET_REG);
 8004850:	212b      	movs	r1, #43	; 0x2b
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fef6 	bl	8004644 <ST7789V_WriteCommand>
	uint8_t adressY[4]={Y0>>8,Y0 & 0xFF,Y1>>8,Y1 & 0xFF};
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	b29b      	uxth	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	753b      	strb	r3, [r7, #20]
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	757b      	strb	r3, [r7, #21]
 8004868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	b29b      	uxth	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	75bb      	strb	r3, [r7, #22]
 8004872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004874:	b2db      	uxtb	r3, r3
 8004876:	75fb      	strb	r3, [r7, #23]
	ST7789V_WriteData(this, adressY, 4);
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2204      	movs	r2, #4
 800487e:	4619      	mov	r1, r3
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff45 	bl	8004710 <ST7789V_WriteData>
	ST7789V_WriteCommand(this, ST7789V_RAMWR_REG);
 8004886:	212c      	movs	r1, #44	; 0x2c
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fedb 	bl	8004644 <ST7789V_WriteCommand>


}
 800488e:	bf00      	nop
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <ST7789V_DrawRect>:


}


void ST7789V_DrawRect(ST7789V *this,uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color){
 8004896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	b097      	sub	sp, #92	; 0x5c
 800489c:	af02      	add	r7, sp, #8
 800489e:	6178      	str	r0, [r7, #20]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	827b      	strh	r3, [r7, #18]
 80048aa:	460b      	mov	r3, r1
 80048ac:	823b      	strh	r3, [r7, #16]
 80048ae:	4613      	mov	r3, r2
 80048b0:	81fb      	strh	r3, [r7, #14]
 80048b2:	466b      	mov	r3, sp
 80048b4:	461e      	mov	r6, r3
	if(X0>X1){
 80048b6:	8a7a      	ldrh	r2, [r7, #18]
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d907      	bls.n	80048ce <ST7789V_DrawRect+0x38>
		uint16_t temp1=X0;
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		X0=X1;
 80048c4:	89fb      	ldrh	r3, [r7, #14]
 80048c6:	827b      	strh	r3, [r7, #18]
		X1=temp1;
 80048c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048cc:	81fb      	strh	r3, [r7, #14]
	}

	if(Y0>Y1){
 80048ce:	8a3a      	ldrh	r2, [r7, #16]
 80048d0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d909      	bls.n	80048ec <ST7789V_DrawRect+0x56>
		uint16_t temp2=Y0;
 80048d8:	8a3b      	ldrh	r3, [r7, #16]
 80048da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		Y0=Y1;
 80048de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80048e2:	823b      	strh	r3, [r7, #16]
		Y1=temp2;
 80048e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048e8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	}
	ST7789V_SetAdress(this, X0, Y0, X1, Y1);
 80048ec:	89f8      	ldrh	r0, [r7, #14]
 80048ee:	8a3a      	ldrh	r2, [r7, #16]
 80048f0:	8a79      	ldrh	r1, [r7, #18]
 80048f2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4603      	mov	r3, r0
 80048fa:	6978      	ldr	r0, [r7, #20]
 80048fc:	f7ff ff6c 	bl	80047d8 <ST7789V_SetAdress>
	uint16_t X_size=X1-X0+1;
 8004900:	89fa      	ldrh	r2, [r7, #14]
 8004902:	8a7b      	ldrh	r3, [r7, #18]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t Y_size=Y1-Y0+1;
 800490e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8004912:	8a3b      	ldrh	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t colorA=color>>8;
 800491c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	b29b      	uxth	r3, r3
 8004924:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t colorB=color & 0xFF;
 8004928:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800492c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint32_t dataSize=X_size*Y_size*2;
 8004930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004934:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t chunkDataSize=200*2; //even number
 800493e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t chunks=dataSize/chunkDataSize;
 8004944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t restDataSize=dataSize-chunks*chunkDataSize;
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t buff[chunkDataSize];
 800495c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800495e:	460b      	mov	r3, r1
 8004960:	3b01      	subs	r3, #1
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
 8004964:	2300      	movs	r3, #0
 8004966:	6039      	str	r1, [r7, #0]
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	00c3      	lsls	r3, r0, #3
 8004976:	6838      	ldr	r0, [r7, #0]
 8004978:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800497c:	6838      	ldr	r0, [r7, #0]
 800497e:	00c2      	lsls	r2, r0, #3
 8004980:	2300      	movs	r3, #0
 8004982:	468a      	mov	sl, r1
 8004984:	469b      	mov	fp, r3
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499a:	1dcb      	adds	r3, r1, #7
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	ebad 0d03 	sub.w	sp, sp, r3
 80049a4:	ab02      	add	r3, sp, #8
 80049a6:	3300      	adds	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buffRest[restDataSize];
 80049aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ac:	460b      	mov	r3, r1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	2300      	movs	r3, #0
 80049b4:	4688      	mov	r8, r1
 80049b6:	4699      	mov	r9, r3
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049cc:	2300      	movs	r3, #0
 80049ce:	460c      	mov	r4, r1
 80049d0:	461d      	mov	r5, r3
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	00eb      	lsls	r3, r5, #3
 80049dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e0:	00e2      	lsls	r2, r4, #3
 80049e2:	1dcb      	adds	r3, r1, #7
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	ebad 0d03 	sub.w	sp, sp, r3
 80049ec:	ab02      	add	r3, sp, #8
 80049ee:	3300      	adds	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 80049f2:	2300      	movs	r3, #0
 80049f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f6:	e00e      	b.n	8004a16 <ST7789V_DrawRect+0x180>
		buff[i]=colorA;
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	4413      	add	r3, r2
 80049fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a02:	701a      	strb	r2, [r3, #0]
		buff[i+1]=colorB;
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	3301      	adds	r3, #1
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8004a0e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	3302      	adds	r3, #2
 8004a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3ec      	bcc.n	80049f8 <ST7789V_DrawRect+0x162>
	}
	for(uint32_t i =0;i<restDataSize;i+=2){
 8004a1e:	2300      	movs	r3, #0
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a22:	e00e      	b.n	8004a42 <ST7789V_DrawRect+0x1ac>
		buffRest[i]=colorA;
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	4413      	add	r3, r2
 8004a2a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a2e:	701a      	strb	r2, [r3, #0]
		buffRest[i+1]=colorB;
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	3301      	adds	r3, #1
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8004a3a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<restDataSize;i+=2){
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3e:	3302      	adds	r3, #2
 8004a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3ec      	bcc.n	8004a24 <ST7789V_DrawRect+0x18e>
	}
	for(uint16_t i=0;i<chunks;i++){
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a50:	e009      	b.n	8004a66 <ST7789V_DrawRect+0x1d0>

		ST7789V_WriteData(this, buff, chunkDataSize);
 8004a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a56:	6978      	ldr	r0, [r7, #20]
 8004a58:	f7ff fe5a 	bl	8004710 <ST7789V_WriteData>
	for(uint16_t i=0;i<chunks;i++){
 8004a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a60:	3301      	adds	r3, #1
 8004a62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d8f0      	bhi.n	8004a52 <ST7789V_DrawRect+0x1bc>

	}
	ST7789V_WriteData(this, buffRest, restDataSize);
 8004a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a72:	69f9      	ldr	r1, [r7, #28]
 8004a74:	6978      	ldr	r0, [r7, #20]
 8004a76:	f7ff fe4b 	bl	8004710 <ST7789V_WriteData>
 8004a7a:	46b5      	mov	sp, r6
}
 8004a7c:	bf00      	nop
 8004a7e:	3754      	adds	r7, #84	; 0x54
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004a88 <XPT2046_TouchSelect>:
#endif



static void XPT2046_TouchSelect()
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a92:	4802      	ldr	r0, [pc, #8]	; (8004a9c <XPT2046_TouchSelect+0x14>)
 8004a94:	f7fd fa1e 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40020000 	.word	0x40020000

08004aa0 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port,  ADC_CS_Pin, GPIO_PIN_SET);
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aaa:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <XPT2046_TouchUnselect+0x14>)
 8004aac:	f7fd fa12 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40020000 	.word	0x40020000

08004ab8 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ADC_IRQ_GPIO_Port, ADC_IRQ_Pin) == GPIO_PIN_RESET;
 8004abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ac0:	4805      	ldr	r0, [pc, #20]	; (8004ad8 <XPT2046_TouchPressed+0x20>)
 8004ac2:	f7fd f9ef 	bl	8001ea4 <HAL_GPIO_ReadPin>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40020000 	.word	0x40020000

08004adc <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 8004ae6:	f7ff ffcf 	bl	8004a88 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	77bb      	strb	r3, [r7, #30]
 8004afa:	e03f      	b.n	8004b7c <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8004afc:	f7ff ffdc 	bl	8004ab8 <XPT2046_TouchPressed>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f083 0301 	eor.w	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13b      	bne.n	8004b84 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8004b0c:	7ffb      	ldrb	r3, [r7, #31]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	77fb      	strb	r3, [r7, #31]
        uint8_t y_raw[2];
        uint8_t x_raw[2];



        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b16:	2201      	movs	r2, #1
 8004b18:	4945      	ldr	r1, [pc, #276]	; (8004c30 <XPT2046_TouchGetCoordinates+0x154>)
 8004b1a:	4846      	ldr	r0, [pc, #280]	; (8004c34 <XPT2046_TouchGetCoordinates+0x158>)
 8004b1c:	f7fd fea1 	bl	8002862 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8004b20:	f107 0210 	add.w	r2, r7, #16
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	4942      	ldr	r1, [pc, #264]	; (8004c38 <XPT2046_TouchGetCoordinates+0x15c>)
 8004b2e:	4841      	ldr	r0, [pc, #260]	; (8004c34 <XPT2046_TouchGetCoordinates+0x158>)
 8004b30:	f7fe f8e4 	bl	8002cfc <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b38:	2201      	movs	r2, #1
 8004b3a:	4940      	ldr	r1, [pc, #256]	; (8004c3c <XPT2046_TouchGetCoordinates+0x160>)
 8004b3c:	483d      	ldr	r0, [pc, #244]	; (8004c34 <XPT2046_TouchGetCoordinates+0x158>)
 8004b3e:	f7fd fe90 	bl	8002862 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8004b42:	f107 020c 	add.w	r2, r7, #12
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	493a      	ldr	r1, [pc, #232]	; (8004c38 <XPT2046_TouchGetCoordinates+0x15c>)
 8004b50:	4838      	ldr	r0, [pc, #224]	; (8004c34 <XPT2046_TouchGetCoordinates+0x158>)
 8004b52:	f7fe f8d3 	bl	8002cfc <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8004b56:	7b3b      	ldrb	r3, [r7, #12]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	7b7a      	ldrb	r2, [r7, #13]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	4413      	add	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8004b66:	7c3b      	ldrb	r3, [r7, #16]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	7c7a      	ldrb	r2, [r7, #17]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	4413      	add	r3, r2
 8004b74:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8004b76:	7fbb      	ldrb	r3, [r7, #30]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	77bb      	strb	r3, [r7, #30]
 8004b7c:	7fbb      	ldrb	r3, [r7, #30]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d9bc      	bls.n	8004afc <XPT2046_TouchGetCoordinates+0x20>
 8004b82:	e000      	b.n	8004b86 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8004b84:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8004b86:	f7ff ff8b 	bl	8004aa0 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b0f      	cmp	r3, #15
 8004b8e:	d801      	bhi.n	8004b94 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e049      	b.n	8004c28 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f640 5247 	movw	r2, #3399	; 0xd47
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d802      	bhi.n	8004baa <XPT2046_TouchGetCoordinates+0xce>
 8004ba4:	f640 5348 	movw	r3, #3400	; 0xd48
 8004ba8:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f247 1248 	movw	r2, #29000	; 0x7148
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d902      	bls.n	8004bba <XPT2046_TouchGetCoordinates+0xde>
 8004bb4:	f247 1348 	movw	r3, #29000	; 0x7148
 8004bb8:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f640 42e3 	movw	r2, #3299	; 0xce3
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <XPT2046_TouchGetCoordinates+0xf4>
 8004bca:	f640 43e4 	movw	r3, #3300	; 0xce4
 8004bce:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f247 5230 	movw	r2, #30000	; 0x7530
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d902      	bls.n	8004be0 <XPT2046_TouchGetCoordinates+0x104>
 8004bda:	f247 5330 	movw	r3, #30000	; 0x7530
 8004bde:	617b      	str	r3, [r7, #20]


#if (ORIENTATION == 0)
	*x = 240-(raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4613      	mov	r3, r2
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	f5a3 2347 	sub.w	r3, r3, #815104	; 0xc7000
 8004bee:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <XPT2046_TouchGetCoordinates+0x164>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0b5b      	lsrs	r3, r3, #13
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004c14:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8004c18:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <XPT2046_TouchGetCoordinates+0x168>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0b5b      	lsrs	r3, r3, #13
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	0800518c 	.word	0x0800518c
 8004c34:	20000430 	.word	0x20000430
 8004c38:	08005190 	.word	0x08005190
 8004c3c:	08005194 	.word	0x08005194
 8004c40:	51eb851f 	.word	0x51eb851f
 8004c44:	4e8b8659 	.word	0x4e8b8659

08004c48 <SplitDouble>:


union DataConv data;
union DataConvF dataf;

void SplitDouble(double vald,uint8_t* valbuff){
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c52:	6078      	str	r0, [r7, #4]
//
//	}



	uint8_t * pvald=(char*)&vald;
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<8;i++){
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
 8004c5e:	e00a      	b.n	8004c76 <SplitDouble+0x2e>
		valbuff[i]=pvald[i];
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	441a      	add	r2, r3
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++){
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	3301      	adds	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b07      	cmp	r3, #7
 8004c7a:	d9f1      	bls.n	8004c60 <SplitDouble+0x18>
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <ReconstructDouble>:

double ReconstructDouble(uint8_t *valbuff){
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
//		pvald[i]=valbuff[i];
//	}
//	return vald;
//
	double vald;
	uint8_t * pvald=(uint8_t*)&vald;
 8004c92:	f107 0308 	add.w	r3, r7, #8
 8004c96:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<8;i++){
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
 8004c9c:	e00a      	b.n	8004cb4 <ReconstructDouble+0x2a>
		pvald[i]=valbuff[i];
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	6939      	ldr	r1, [r7, #16]
 8004ca8:	440b      	add	r3, r1
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++){
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	2b07      	cmp	r3, #7
 8004cb8:	d9f1      	bls.n	8004c9e <ReconstructDouble+0x14>
	}
	return vald;
 8004cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cbe:	ec43 2b17 	vmov	d7, r2, r3


}
 8004cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004cc6:	eef0 0a67 	vmov.f32	s1, s15
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <Splitfloat>:




void Splitfloat(float valf , uint8_t *valbuff){
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	ed87 0a01 	vstr	s0, [r7, #4]
 8004cde:	6038      	str	r0, [r7, #0]
	float a=valf;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60bb      	str	r3, [r7, #8]
	dataf.f=valf;
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <Splitfloat+0x44>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<4;i++){
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	e009      	b.n	8004d04 <Splitfloat+0x30>
		valbuff[i]=dataf.u[i];
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	440b      	add	r3, r1
 8004cf8:	4907      	ldr	r1, [pc, #28]	; (8004d18 <Splitfloat+0x44>)
 8004cfa:	5c8a      	ldrb	r2, [r1, r2]
 8004cfc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<4;i++){
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	3301      	adds	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d9f2      	bls.n	8004cf0 <Splitfloat+0x1c>

	}


}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	2000053c 	.word	0x2000053c

08004d1c <ReconstructFloat>:


float ReconstructFloat(uint8_t* valbuff){
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

	for(uint8_t i=0;i<4;i++){
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e009      	b.n	8004d3e <ReconstructFloat+0x22>
			dataf.u[i]=valbuff[i];
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	441a      	add	r2, r3
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	7811      	ldrb	r1, [r2, #0]
 8004d34:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <ReconstructFloat+0x40>)
 8004d36:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<4;i++){
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d9f2      	bls.n	8004d2a <ReconstructFloat+0xe>

		}
		return dataf.f;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <ReconstructFloat+0x40>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	ee07 3a90 	vmov	s15, r3



}
 8004d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000053c 	.word	0x2000053c

08004d60 <W25Q64_SPI_Transmit_Data>:
#include "W25Q64Drv.h"



HAL_StatusTypeDef W25Q64_SPI_Transmit_Data(MEMORY * this,uint8_t *data, uint16_t size){
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Transmit(this->pSpi, data, size, 1000);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6918      	ldr	r0, [r3, #16]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	f7fd fd72 	bl	8002862 <HAL_SPI_Transmit>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]

	return status;
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <W25Q64_SPI_Receive_Data>:

HAL_StatusTypeDef W25Q64_SPI_Receive_Data(MEMORY * this,uint8_t *data, uint16_t size){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Receive(this->pSpi, data, size, 1000);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6918      	ldr	r0, [r3, #16]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	f7fd fe98 	bl	8002ada <HAL_SPI_Receive>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]

	return status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <W25Q64_Set_ChipSelect_Low>:

void W25Q64_Set_ChipSelect_Low(MEMORY * this){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_RESET);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6898      	ldr	r0, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	899b      	ldrh	r3, [r3, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7fd f882 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <W25Q64_Set_ChipSelect_High>:

void W25Q64_Set_ChipSelect_High(MEMORY * this){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_SET);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6898      	ldr	r0, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	899b      	ldrh	r3, [r3, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	4619      	mov	r1, r3
 8004dec:	f7fd f872 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <W25Q64_Init>:

uint8_t W25Q64_Init(MEMORY * this){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	this->CS_port=W25Q64_CS_GPIO_Port;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <W25Q64_Init+0x4c>)
 8004e04:	609a      	str	r2, [r3, #8]
	this->CS_Pin=W25Q64_CS_Pin;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2240      	movs	r2, #64	; 0x40
 8004e0a:	819a      	strh	r2, [r3, #12]
	this->pSpi=&hspi3;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <W25Q64_Init+0x50>)
 8004e10:	611a      	str	r2, [r3, #16]


	W25Q64_ResetFlash(this);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f81a 	bl	8004e4c <W25Q64_ResetFlash>
	W25Q64_get_JEDEC_ID(this);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f83d 	bl	8004e98 <W25Q64_get_JEDEC_ID>

	if(W25Q64_WIBOND_ID	 == this->manufacturer_ID && W25Q64_SPI_DEVICE_ID == this->memory_type && W25Q64_CAPACITY_64_MBIT	 == this->capacity)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2bef      	cmp	r3, #239	; 0xef
 8004e24:	d109      	bne.n	8004e3a <W25Q64_Init+0x42>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d105      	bne.n	8004e3a <W25Q64_Init+0x42>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	789b      	ldrb	r3, [r3, #2]
 8004e32:	2b17      	cmp	r3, #23
 8004e34:	d101      	bne.n	8004e3a <W25Q64_Init+0x42>
		return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <W25Q64_Init+0x44>
	else
		return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40020400 	.word	0x40020400
 8004e48:	200003d8 	.word	0x200003d8

08004e4c <W25Q64_ResetFlash>:


void W25Q64_ResetFlash(MEMORY * this){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send[] = { W25Q64_ENABLE_RESET	, W25Q64_RESET };
 8004e54:	f649 1366 	movw	r3, #39270	; 0x9966
 8004e58:	81bb      	strh	r3, [r7, #12]

	W25Q64_Set_ChipSelect_Low(this);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ffac 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 1);
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	2201      	movs	r2, #1
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff79 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ffb2 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>

    W25Q64_Set_ChipSelect_Low(this);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff9f 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send[1], 1);
 8004e7a:	f107 030c 	add.w	r3, r7, #12
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2201      	movs	r2, #1
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff6b 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ffa4 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <W25Q64_get_JEDEC_ID>:

void W25Q64_get_JEDEC_ID(MEMORY * this){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = 0x9F;
 8004ea0:	239f      	movs	r3, #159	; 0x9f
 8004ea2:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[3] = { 0, 0, 0 };
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <W25Q64_get_JEDEC_ID+0x60>)
 8004ea6:	f107 030c 	add.w	r3, r7, #12
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	4611      	mov	r1, r2
 8004eae:	8019      	strh	r1, [r3, #0]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	0c12      	lsrs	r2, r2, #16
 8004eb4:	701a      	strb	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low(this);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff7e 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>

	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 8004ebc:	f107 030f 	add.w	r3, r7, #15
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff4b 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(this,receive_data, 3);
 8004eca:	f107 030c 	add.w	r3, r7, #12
 8004ece:	2203      	movs	r2, #3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ff5a 	bl	8004d8c <W25Q64_SPI_Receive_Data>

	W25Q64_Set_ChipSelect_High(this);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff7d 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>

	this->manufacturer_ID = receive_data[0];
 8004ede:	7b3a      	ldrb	r2, [r7, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	701a      	strb	r2, [r3, #0]
	this->memory_type = receive_data[1];
 8004ee4:	7b7a      	ldrb	r2, [r7, #13]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	705a      	strb	r2, [r3, #1]
	this->capacity = receive_data[2];
 8004eea:	7bba      	ldrb	r2, [r7, #14]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	709a      	strb	r2, [r3, #2]
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	08005170 	.word	0x08005170

08004efc <W25Q64_WriteEnable>:



void W25Q64_WriteEnable(MEMORY * this){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send =  W25Q64_WRITE_ENABLE;
 8004f04:	2306      	movs	r3, #6
 8004f06:	73fb      	strb	r3, [r7, #15]

	W25Q64_Set_ChipSelect_Low(this);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff55 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 8004f0e:	f107 030f 	add.w	r3, r7, #15
 8004f12:	2201      	movs	r2, #1
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ff22 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ff5b 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>
}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>:

void W25Q64_WriteEnable_and_WaitForWriteEnableLatch(MEMORY * this){
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
	while(!(W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_ENABLE_LATCH))
 8004f32:	e002      	b.n	8004f3a <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0x10>
	{
		W25Q64_WriteEnable(this);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ffe1 	bl	8004efc <W25Q64_WriteEnable>
	while(!(W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_ENABLE_LATCH))
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8ba 	bl	80050b4 <W25Q64_ReadStatusRegister1>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f4      	beq.n	8004f34 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0xa>
	}
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <W25Q64_WaitForWriteInProgressClear>:

void W25Q64_WaitForWriteEnableLatch(MEMORY * this){
	while(!(W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_ENABLE_LATCH)){};
}

void W25Q64_WaitForWriteInProgressClear(MEMORY * this){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	while((W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_IN_PROGRESS)){};
 8004f5c:	bf00      	nop
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8a8 	bl	80050b4 <W25Q64_ReadStatusRegister1>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f7      	bne.n	8004f5e <W25Q64_WaitForWriteInProgressClear+0xa>
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <W25Q64_SectorErase>:


HAL_StatusTypeDef W25Q64_SectorErase(MEMORY * this,uint16_t sector_number){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
	uint32_t adress;
	adress = sector_number * SECTOR_SIZE;
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	031b      	lsls	r3, r3, #12
 8004f88:	617b      	str	r3, [r7, #20]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ffe0 	bl	8004f54 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch(this);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ffc8 	bl	8004f2a <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = W25Q64_SECTOR_ERASE;
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	733b      	strb	r3, [r7, #12]
	data_to_send[1] = (adress >> 16) & 0xff;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	737b      	strb	r3, [r7, #13]
	data_to_send[2] = (adress >> 8) & 0xff;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	0a1b      	lsrs	r3, r3, #8
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	73bb      	strb	r3, [r7, #14]
	data_to_send[3] = adress & 0xff;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	73fb      	strb	r3, [r7, #15]

	W25Q64_Set_ChipSelect_Low(this);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff feff 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	status = W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fecc 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]
	W25Q64_Set_ChipSelect_High(this);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff03 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>

	W25Q64_WaitForWriteInProgressClear(this);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ffbe 	bl	8004f54 <W25Q64_WaitForWriteInProgressClear>

	return status;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <W25Q64_PageProgram>:

	return status;
}


HAL_StatusTypeDef W25Q64_PageProgram(MEMORY * this,uint32_t page_adress, uint8_t *data, uint16_t size){
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	807b      	strh	r3, [r7, #2]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ffad 	bl	8004f54 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch(this);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff95 	bl	8004f2a <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>
	data_to_send[0] = W25Q64_PAGE_PROGRAM;
 8005000:	2302      	movs	r3, #2
 8005002:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (page_adress >> 16) & 0xff;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b2db      	uxtb	r3, r3
 800500a:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (page_adress >> 8) & 0xff;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b2db      	uxtb	r3, r3
 8005012:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = page_adress & 0xff;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low(this);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fecc 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	2204      	movs	r2, #4
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fe99 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Transmit_Data(this,data, size);
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	461a      	mov	r2, r3
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff fe93 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High(this);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff feca 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>
	return status;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <W25Q64_ReadDataBytes>:





HAL_StatusTypeDef W25Q64_ReadDataBytes(MEMORY * this,uint32_t adress, uint8_t *data, uint16_t size){
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	807b      	strh	r3, [r7, #2]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ff77 	bl	8004f54 <W25Q64_WaitForWriteInProgressClear>

	data_to_send[0] = W25Q64_READ_DATA;
 8005066:	2303      	movs	r3, #3
 8005068:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (adress >> 16) & 0xff;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	b2db      	uxtb	r3, r3
 8005070:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (adress >> 8) & 0xff;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	b2db      	uxtb	r3, r3
 8005078:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = adress & 0xff;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low(this);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff fe99 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 8005086:	f107 0310 	add.w	r3, r7, #16
 800508a:	2204      	movs	r2, #4
 800508c:	4619      	mov	r1, r3
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fe66 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Receive_Data(this,data, size);
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	461a      	mov	r2, r3
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fe76 	bl	8004d8c <W25Q64_SPI_Receive_Data>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High(this);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fe97 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>

	return status;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <W25Q64_ReadStatusRegister1>:





uint8_t W25Q64_ReadStatusRegister1(MEMORY * this){
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = W25Q64_READ_STATUS_REG1;
 80050bc:	2305      	movs	r3, #5
 80050be:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73bb      	strb	r3, [r7, #14]

	W25Q64_Set_ChipSelect_Low(this);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fe77 	bl	8004db8 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 80050ca:	f107 030f 	add.w	r3, r7, #15
 80050ce:	2201      	movs	r2, #1
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe44 	bl	8004d60 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(this,&receive_data, 1);
 80050d8:	f107 030e 	add.w	r3, r7, #14
 80050dc:	2201      	movs	r2, #1
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fe53 	bl	8004d8c <W25Q64_SPI_Receive_Data>
	W25Q64_Set_ChipSelect_High(this);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe76 	bl	8004dd8 <W25Q64_Set_ChipSelect_High>

	return receive_data;
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <__libc_init_array>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4d0d      	ldr	r5, [pc, #52]	; (8005130 <__libc_init_array+0x38>)
 80050fc:	4c0d      	ldr	r4, [pc, #52]	; (8005134 <__libc_init_array+0x3c>)
 80050fe:	1b64      	subs	r4, r4, r5
 8005100:	10a4      	asrs	r4, r4, #2
 8005102:	2600      	movs	r6, #0
 8005104:	42a6      	cmp	r6, r4
 8005106:	d109      	bne.n	800511c <__libc_init_array+0x24>
 8005108:	4d0b      	ldr	r5, [pc, #44]	; (8005138 <__libc_init_array+0x40>)
 800510a:	4c0c      	ldr	r4, [pc, #48]	; (800513c <__libc_init_array+0x44>)
 800510c:	f000 f820 	bl	8005150 <_init>
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	2600      	movs	r6, #0
 8005116:	42a6      	cmp	r6, r4
 8005118:	d105      	bne.n	8005126 <__libc_init_array+0x2e>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005120:	4798      	blx	r3
 8005122:	3601      	adds	r6, #1
 8005124:	e7ee      	b.n	8005104 <__libc_init_array+0xc>
 8005126:	f855 3b04 	ldr.w	r3, [r5], #4
 800512a:	4798      	blx	r3
 800512c:	3601      	adds	r6, #1
 800512e:	e7f2      	b.n	8005116 <__libc_init_array+0x1e>
 8005130:	080051a0 	.word	0x080051a0
 8005134:	080051a0 	.word	0x080051a0
 8005138:	080051a0 	.word	0x080051a0
 800513c:	080051a4 	.word	0x080051a4

08005140 <memset>:
 8005140:	4402      	add	r2, r0
 8005142:	4603      	mov	r3, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <_init>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr

0800515c <_fini>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr


DIGIT_REC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000408c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000010  08004268  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08004268  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc30  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  0002dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000302a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017acc  00000000  00000000  00031bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109b0  00000000  00000000  000496bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3b6  00000000  00000000  0005a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  000e8474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800420c 	.word	0x0800420c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800420c 	.word	0x0800420c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x3c>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x3c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	203a      	movs	r0, #58	; 0x3a
 8000504:	f000 fd67 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000508:	203a      	movs	r0, #58	; 0x3a
 800050a:	f000 fd80 	bl	800100e <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000570:	481e      	ldr	r0, [pc, #120]	; (80005ec <MX_GPIO_Init+0xd0>)
 8000572:	f001 fa73 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	481d      	ldr	r0, [pc, #116]	; (80005f0 <MX_GPIO_Init+0xd4>)
 800057c:	f001 fa6e 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2104      	movs	r1, #4
 8000584:	481a      	ldr	r0, [pc, #104]	; (80005f0 <MX_GPIO_Init+0xd4>)
 8000586:	f001 fa69 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|ADC_CS_Pin;
 800058a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005a4:	f001 f8be 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_LED_Pin;
 80005a8:	2307      	movs	r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xd4>)
 80005c0:	f001 f8b0 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005da:	f001 f8a3 	bl	8001724 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020400 	.word	0x40020400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb7c 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();//
 80005fc:	f000 f83e 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ff8c 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f7ff ff6a 	bl	80004dc <MX_DMA_Init>
  MX_SPI1_Init();
 8000608:	f000 f8a6 	bl	8000758 <MX_SPI1_Init>
  MX_SPI3_Init();
 800060c:	f000 f8dc 	bl	80007c8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000610:	f000 f910 	bl	8000834 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000614:	f000 fad6 	bl	8000bc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//1cnt =100 us
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0x6c>)
 800061a:	f002 fc35 	bl	8002e88 <HAL_TIM_Base_Start>
  Init();
 800061e:	f003 fa99 	bl	8003b54 <Init>
  memset(Screen.Atributs,0,NUM_PIXELS);
 8000622:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000626:	2100      	movs	r1, #0
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x70>)
 800062a:	f003 fde7 	bl	80041fc <memset>
  refreshMenu();
 800062e:	f003 fa05 	bl	8003a3c <refreshMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  costam=7.8;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0x74>)
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <main+0x78>)
 8000636:	601a      	str	r2, [r3, #0]

	  costam=-8.9;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x74>)
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x7c>)
 800063c:	601a      	str	r2, [r3, #0]
	//  putDataToArray(0, 0, 64);
	//  putDataToArray(0, 1,255);
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <main+0x80>)
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <main+0x84>)
 8000642:	f003 fd01 	bl	8004048 <XPT2046_TouchGetCoordinates>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f2      	beq.n	8000632 <main+0x3e>
		   //Draw_Circle(PosX, PosY, 4, MAGENTA);
		  updateScreen(PosX, PosY);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x84>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <main+0x80>)
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fa1c 	bl	8003a94 <updateScreen>
	  costam=7.8;
 800065c:	e7e9      	b.n	8000632 <main+0x3e>
 800065e:	bf00      	nop
 8000660:	2000019c 	.word	0x2000019c
 8000664:	200001e8 	.word	0x200001e8
 8000668:	20000030 	.word	0x20000030
 800066c:	40f9999a 	.word	0x40f9999a
 8000670:	c10e6666 	.word	0xc10e6666
 8000674:	2000002e 	.word	0x2000002e
 8000678:	2000002c 	.word	0x2000002c

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fdb6 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <SystemClock_Config+0xc8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xcc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f9c5 	bl	8001a90 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f81e 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2103      	movs	r1, #3
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fc27 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000738:	f000 f808 	bl	800074c <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <MX_SPI1_Init+0x6c>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_SPI1_Init+0x68>)
 800076c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x68>)
 800078e:	2208      	movs	r2, #8
 8000790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI1_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x68>)
 80007a6:	220a      	movs	r2, #10
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_SPI1_Init+0x68>)
 80007ac:	f001 fd94 	bl	80022d8 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80007b6:	f7ff ffc9 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000034 	.word	0x20000034
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_SPI3_Init+0x64>)
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <MX_SPI3_Init+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI3_Init+0x64>)
 80007d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI3_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI3_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI3_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI3_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI3_Init+0x64>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI3_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_SPI3_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_SPI3_Init+0x64>)
 8000814:	220a      	movs	r2, #10
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_SPI3_Init+0x64>)
 800081a:	f001 fd5d 	bl	80022d8 <HAL_SPI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000824:	f7ff ff92 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000008c 	.word	0x2000008c
 8000830:	40003c00 	.word	0x40003c00

08000834 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_SPI4_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_SPI4_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_SPI4_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_SPI4_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_SPI4_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_SPI4_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_SPI4_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_SPI4_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_SPI4_Init+0x64>)
 8000868:	2238      	movs	r2, #56	; 0x38
 800086a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_SPI4_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_SPI4_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_SPI4_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_SPI4_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_SPI4_Init+0x64>)
 8000886:	f001 fd27 	bl	80022d8 <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000890:	f7ff ff5c 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000e4 	.word	0x200000e4
 800089c:	40013400 	.word	0x40013400

080008a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a82      	ldr	r2, [pc, #520]	; (8000ac8 <HAL_SPI_MspInit+0x228>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d15a      	bne.n	8000978 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
 80008c6:	4b81      	ldr	r3, [pc, #516]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a80      	ldr	r2, [pc, #512]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b7e      	ldr	r3, [pc, #504]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008da:	623b      	str	r3, [r7, #32]
 80008dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	4b7a      	ldr	r3, [pc, #488]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a79      	ldr	r2, [pc, #484]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b77      	ldr	r3, [pc, #476]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090a:	2305      	movs	r3, #5
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	486e      	ldr	r0, [pc, #440]	; (8000ad0 <HAL_SPI_MspInit+0x230>)
 8000916:	f000 ff05 	bl	8001724 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800091a:	4b6e      	ldr	r3, [pc, #440]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800091c:	4a6e      	ldr	r2, [pc, #440]	; (8000ad8 <HAL_SPI_MspInit+0x238>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000920:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000922:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000926:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800092a:	2240      	movs	r2, #64	; 0x40
 800092c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b69      	ldr	r3, [pc, #420]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093c:	4b65      	ldr	r3, [pc, #404]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000948:	4b62      	ldr	r3, [pc, #392]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800094e:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000954:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800095a:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800095c:	f000 fb72 	bl	8001044 <HAL_DMA_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000966:	f7ff fef1 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a59      	ldr	r2, [pc, #356]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 800096e:	649a      	str	r2, [r3, #72]	; 0x48
 8000970:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <HAL_SPI_MspInit+0x234>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000976:	e0a3      	b.n	8000ac0 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a57      	ldr	r2, [pc, #348]	; (8000adc <HAL_SPI_MspInit+0x23c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d13d      	bne.n	80009fe <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	4b51      	ldr	r3, [pc, #324]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a50      	ldr	r2, [pc, #320]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 800098c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a49      	ldr	r2, [pc, #292]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80009cc:	2307      	movs	r3, #7
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4842      	ldr	r0, [pc, #264]	; (8000ae0 <HAL_SPI_MspInit+0x240>)
 80009d8:	f000 fea4 	bl	8001724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009dc:	2330      	movs	r3, #48	; 0x30
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <HAL_SPI_MspInit+0x240>)
 80009f8:	f000 fe94 	bl	8001724 <HAL_GPIO_Init>
}
 80009fc:	e060      	b.n	8000ac0 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI4)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a38      	ldr	r2, [pc, #224]	; (8000ae4 <HAL_SPI_MspInit+0x244>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d15b      	bne.n	8000ac0 <HAL_SPI_MspInit+0x220>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a16:	6453      	str	r3, [r2, #68]	; 0x44
 8000a18:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_SPI_MspInit+0x22c>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <HAL_SPI_MspInit+0x230>)
 8000a78:	f000 fe54 	bl	8001724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <HAL_SPI_MspInit+0x240>)
 8000a9a:	f000 fe43 	bl	8001724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x230>)
 8000abc:	f000 fe32 	bl	8001724 <HAL_GPIO_Init>
}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	; 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	2000013c 	.word	0x2000013c
 8000ad8:	40026440 	.word	0x40026440
 8000adc:	40003c00 	.word	0x40003c00
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40013400 	.word	0x40013400

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f908 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <DMA2_Stream2_IRQHandler+0x10>)
 8000b92:	f000 fb5d 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000013c 	.word	0x2000013c

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bea:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c0c:	f002 f8ec 	bl	8002de8 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c16:	f7ff fd99 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c28:	f002 f988 	bl	8002f3c <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c32:	f7ff fd8b 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c44:	f002 fb5c 	bl	8003300 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f7ff fd7d 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000019c 	.word	0x2000019c

08000c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c70:	d10d      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ff69 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f003 fa71 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fc8f 	bl	80005f4 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ce4:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000ce8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cec:	20000500 	.word	0x20000500

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fede 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	200001e4 	.word	0x200001e4

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200001e4 	.word	0x200001e4

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e099      	b.n	8001194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e00f      	b.n	80010a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe9d 	bl	8000dc0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d908      	bls.n	80010a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e078      	b.n	8001194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e8      	bne.n	8001082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_DMA_Init+0x158>)
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d107      	bne.n	800110c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b04      	cmp	r3, #4
 8001134:	d117      	bne.n	8001166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa6f 	bl	800162c <DMA_CheckFifoParam>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fa26 	bl	80015c0 <DMA_CalcBaseAndBitshift>
 8001174:	4603      	mov	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	223f      	movs	r2, #63	; 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f010803f 	.word	0xf010803f

080011a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Start_IT+0x26>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Start_IT+0xa8>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12f      	bne.n	800123a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f9b8 	bl	8001564 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	223f      	movs	r2, #63	; 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0216 	orr.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e005      	b.n	8001246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001242:	2302      	movs	r3, #2
 8001244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800125c:	4b8e      	ldr	r3, [pc, #568]	; (8001498 <HAL_DMA_IRQHandler+0x248>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a8e      	ldr	r2, [pc, #568]	; (800149c <HAL_DMA_IRQHandler+0x24c>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0a9b      	lsrs	r3, r3, #10
 8001268:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2208      	movs	r2, #8
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01a      	beq.n	80012bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0204 	bic.w	r2, r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2208      	movs	r2, #8
 80012aa:	409a      	lsls	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2201      	movs	r2, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2201      	movs	r2, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f043 0202 	orr.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2204      	movs	r2, #4
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2204      	movs	r2, #4
 8001316:	409a      	lsls	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	f043 0204 	orr.w	r2, r3, #4
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2210      	movs	r2, #16
 800132e:	409a      	lsls	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d043      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03c      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2210      	movs	r2, #16
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d018      	beq.n	8001392 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d024      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
 800137e:	e01f      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01b      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
 8001390:	e016      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0208 	bic.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2220      	movs	r2, #32
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 808f 	beq.w	80014f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8087 	beq.w	80014f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2220      	movs	r2, #32
 80013e8:	409a      	lsls	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d136      	bne.n	8001468 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0216 	bic.w	r2, r2, #22
 8001408:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <HAL_DMA_IRQHandler+0x1da>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0208 	bic.w	r2, r2, #8
 8001438:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143e:	223f      	movs	r2, #63	; 0x3f
 8001440:	409a      	lsls	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145a:	2b00      	cmp	r3, #0
 800145c:	d07e      	beq.n	800155c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
        }
        return;
 8001466:	e079      	b.n	800155c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01d      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10d      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	2b00      	cmp	r3, #0
 800148a:	d031      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	4798      	blx	r3
 8001494:	e02c      	b.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
 80014b0:	e01e      	b.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10f      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0210 	bic.w	r2, r2, #16
 80014ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d032      	beq.n	800155e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d022      	beq.n	800154a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	d307      	bcc.n	8001538 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_DMA_IRQHandler+0x2cc>
 8001536:	e000      	b.n	800153a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001538:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
 800155a:	e000      	b.n	800155e <HAL_DMA_IRQHandler+0x30e>
        return;
 800155c:	bf00      	nop
    }
  }
}
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001580:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b40      	cmp	r3, #64	; 0x40
 8001590:	d108      	bne.n	80015a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015a2:	e007      	b.n	80015b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3b10      	subs	r3, #16
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <DMA_CalcBaseAndBitshift+0x64>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <DMA_CalcBaseAndBitshift+0x68>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d909      	bls.n	8001602 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	1d1a      	adds	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001600:	e007      	b.n	8001612 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	aaaaaaab 	.word	0xaaaaaaab
 8001628:	08004234 	.word	0x08004234

0800162c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d11f      	bne.n	8001686 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d856      	bhi.n	80016fa <DMA_CheckFifoParam+0xce>
 800164c:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <DMA_CheckFifoParam+0x28>)
 800164e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001652:	bf00      	nop
 8001654:	08001665 	.word	0x08001665
 8001658:	08001677 	.word	0x08001677
 800165c:	08001665 	.word	0x08001665
 8001660:	080016fb 	.word	0x080016fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d046      	beq.n	80016fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001674:	e043      	b.n	80016fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800167e:	d140      	bne.n	8001702 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001684:	e03d      	b.n	8001702 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168e:	d121      	bne.n	80016d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d837      	bhi.n	8001706 <DMA_CheckFifoParam+0xda>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <DMA_CheckFifoParam+0x70>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b3 	.word	0x080016b3
 80016a4:	080016ad 	.word	0x080016ad
 80016a8:	080016c5 	.word	0x080016c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      break;
 80016b0:	e030      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d025      	beq.n	800170a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c2:	e022      	b.n	800170a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016cc:	d11f      	bne.n	800170e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016d2:	e01c      	b.n	800170e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d903      	bls.n	80016e2 <DMA_CheckFifoParam+0xb6>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d003      	beq.n	80016e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016e0:	e018      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
      break;
 80016e6:	e015      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00e      	beq.n	8001712 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      break;
 80016f8:	e00b      	b.n	8001712 <DMA_CheckFifoParam+0xe6>
      break;
 80016fa:	bf00      	nop
 80016fc:	e00a      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 80016fe:	bf00      	nop
 8001700:	e008      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001702:	bf00      	nop
 8001704:	e006      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001706:	bf00      	nop
 8001708:	e004      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 800170a:	bf00      	nop
 800170c:	e002      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;   
 800170e:	bf00      	nop
 8001710:	e000      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001712:	bf00      	nop
    }
  } 
  
  return status; 
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e159      	b.n	80019f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8148 	bne.w	80019ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a2 	beq.w	80019ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x202>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_GPIO_Init+0x2f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x1fe>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_GPIO_Init+0x2f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x1fa>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <HAL_GPIO_Init+0x2fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x1f6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <HAL_GPIO_Init+0x300>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x1f2>
 8001912:	2304      	movs	r3, #4
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001916:	2307      	movs	r3, #7
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f aea2 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	041a      	lsls	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	619a      	str	r2, [r3, #24]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e267      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d075      	beq.n	8001b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aae:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d112      	bne.n	8001aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac6:	4b82      	ldr	r3, [pc, #520]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad2:	d10b      	bne.n	8001aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	4b7e      	ldr	r3, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x108>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d157      	bne.n	8001b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e242      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d106      	bne.n	8001b04 <HAL_RCC_OscConfig+0x74>
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xb0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xb0>
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f93a 	bl	8000dc0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f936 	bl	8000dc0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e207      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xc0>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f926 	bl	8000dc0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f922 	bl	8000dc0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1f3      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0xe8>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x152>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c7      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_OscConfig+0x244>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f8db 	bl	8000dc0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f8d7 	bl	8000dc0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1a8      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x244>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f8ba 	bl	8000dc0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff f8b6 	bl	8000dc0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e187      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d036      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d016      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x248>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff f89a 	bl	8000dc0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff f896 	bl	8000dc0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e167      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x200>
 8001cae:	e01b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x248>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f883 	bl	8000dc0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	e00e      	b.n	8001cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f87f 	bl	8000dc0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d907      	bls.n	8001cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e150      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470000 	.word	0x42470000
 8001cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ea      	bne.n	8001cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8097 	beq.w	8001e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a73      	ldr	r2, [pc, #460]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f83f 	bl	8000dc0 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f83b 	bl	8000dc0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e10c      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2ea>
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x324>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x30c>
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a5e      	ldr	r2, [pc, #376]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a5b      	ldr	r2, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0x324>
 8001d9c:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a54      	ldr	r2, [pc, #336]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f800 	bl	8000dc0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fffc 	bl	8000dc0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0cb      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ee      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe ffea 	bl	8000dc0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7fe ffe6 	bl	8000dc0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0b5      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ee      	bne.n	8001df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a1 	beq.w	8001f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d05c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d141      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe ffba 	bl	8000dc0 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ffb6 	bl	8000dc0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e087      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	491b      	ldr	r1, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe ff8f 	bl	8000dc0 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe ff8b 	bl	8000dc0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e05c      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x416>
 8001ec4:	e054      	b.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ff78 	bl	8000dc0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe ff74 	bl	8000dc0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e045      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
 8001ef2:	e03d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e038      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4ec>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d028      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d121      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d11a      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cc      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d90c      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494d      	ldr	r1, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d044      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d119      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e067      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4934      	ldr	r1, [pc, #208]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe fea6 	bl	8000dc0 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe fea2 	bl	8000dc0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e032      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f821 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490a      	ldr	r1, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fe06 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00
 800213c:	40023800 	.word	0x40023800
 8002140:	08004224 	.word	0x08004224
 8002144:	20000000 	.word	0x20000000
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002150:	b090      	sub	sp, #64	; 0x40
 8002152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d00d      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x40>
 8002170:	2b08      	cmp	r3, #8
 8002172:	f200 80a1 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
 800217a:	2b04      	cmp	r3, #4
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x3a>
 800217e:	e09b      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002184:	e09b      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800218a:	e098      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002196:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d028      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	2200      	movs	r2, #0
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	627a      	str	r2, [r7, #36]	; 0x24
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021b4:	2100      	movs	r1, #0
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b8:	fb03 f201 	mul.w	r2, r3, r1
 80021bc:	2300      	movs	r3, #0
 80021be:	fb00 f303 	mul.w	r3, r0, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	4a43      	ldr	r2, [pc, #268]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c6:	fba0 1202 	umull	r1, r2, r0, r2
 80021ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021cc:	460a      	mov	r2, r1
 80021ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80021d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d2:	4413      	add	r3, r2
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d8:	2200      	movs	r2, #0
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	61fa      	str	r2, [r7, #28]
 80021de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021e6:	f7fd fff7 	bl	80001d8 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4613      	mov	r3, r2
 80021f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f2:	e053      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	2200      	movs	r2, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	617a      	str	r2, [r7, #20]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002206:	f04f 0b00 	mov.w	fp, #0
 800220a:	4652      	mov	r2, sl
 800220c:	465b      	mov	r3, fp
 800220e:	f04f 0000 	mov.w	r0, #0
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	0159      	lsls	r1, r3, #5
 8002218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800221c:	0150      	lsls	r0, r2, #5
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	ebb2 080a 	subs.w	r8, r2, sl
 8002226:	eb63 090b 	sbc.w	r9, r3, fp
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002236:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800223a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800223e:	ebb2 0408 	subs.w	r4, r2, r8
 8002242:	eb63 0509 	sbc.w	r5, r3, r9
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	00eb      	lsls	r3, r5, #3
 8002250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002254:	00e2      	lsls	r2, r4, #3
 8002256:	4614      	mov	r4, r2
 8002258:	461d      	mov	r5, r3
 800225a:	eb14 030a 	adds.w	r3, r4, sl
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	eb45 030b 	adc.w	r3, r5, fp
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002272:	4629      	mov	r1, r5
 8002274:	028b      	lsls	r3, r1, #10
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800227c:	4621      	mov	r1, r4
 800227e:	028a      	lsls	r2, r1, #10
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	2200      	movs	r2, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002290:	f7fd ffa2 	bl	80001d8 <__aeabi_uldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0x180>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3740      	adds	r7, #64	; 0x40
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	017d7840 	.word	0x017d7840

080022d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07b      	b.n	80023e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fa:	d009      	beq.n	8002310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
 8002302:	e005      	b.n	8002310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fab8 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	ea42 0103 	orr.w	r1, r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0104 	and.w	r1, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f003 0210 	and.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b088      	sub	sp, #32
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_SPI_Transmit+0x22>
 8002408:	2302      	movs	r3, #2
 800240a:	e126      	b.n	800265a <HAL_SPI_Transmit+0x270>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002414:	f7fe fcd4 	bl	8000dc0 <HAL_GetTick>
 8002418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d002      	beq.n	8002430 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242e:	e10b      	b.n	8002648 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_SPI_Transmit+0x52>
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002440:	e102      	b.n	8002648 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002488:	d10f      	bne.n	80024aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d007      	beq.n	80024c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d0:	d14b      	bne.n	800256a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Transmit+0xf6>
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d13e      	bne.n	800255e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002504:	e02b      	b.n	800255e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d112      	bne.n	800253a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
 8002538:	e011      	b.n	800255e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800253a:	f7fe fc41 	bl	8000dc0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d803      	bhi.n	8002552 <HAL_SPI_Transmit+0x168>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Transmit+0x16e>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800255c:	e074      	b.n	8002648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ce      	bne.n	8002506 <HAL_SPI_Transmit+0x11c>
 8002568:	e04c      	b.n	8002604 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Transmit+0x18e>
 8002572:	8afb      	ldrh	r3, [r7, #22]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d140      	bne.n	80025fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800259e:	e02c      	b.n	80025fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d113      	bne.n	80025d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80025d4:	e011      	b.n	80025fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d6:	f7fe fbf3 	bl	8000dc0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d803      	bhi.n	80025ee <HAL_SPI_Transmit+0x204>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d102      	bne.n	80025f4 <HAL_SPI_Transmit+0x20a>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025f8:	e026      	b.n	8002648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1cd      	bne.n	80025a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fbab 	bl	8002d64 <SPI_EndRxTxTransaction>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	77fb      	strb	r3, [r7, #31]
 8002644:	e000      	b.n	8002648 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002658:	7ffb      	ldrb	r3, [r7, #31]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b08c      	sub	sp, #48	; 0x30
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x26>
 8002684:	2302      	movs	r3, #2
 8002686:	e18a      	b.n	800299e <HAL_SPI_TransmitReceive+0x33c>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002690:	f7fe fb96 	bl	8000dc0 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800269c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00f      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x70>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026b8:	d107      	bne.n	80026ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_SPI_TransmitReceive+0x68>
 80026c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d003      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026d0:	e15b      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x82>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x82>
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026ea:	e14e      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d003      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2205      	movs	r2, #5
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	887a      	ldrh	r2, [r7, #2]
 8002716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d007      	beq.n	8002754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800275c:	d178      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_SPI_TransmitReceive+0x10a>
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d166      	bne.n	800283a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	881a      	ldrh	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	1c9a      	adds	r2, r3, #2
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002790:	e053      	b.n	800283a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11b      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x176>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x176>
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d113      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	1c9a      	adds	r2, r3, #2
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d119      	bne.n	800281a <HAL_SPI_TransmitReceive+0x1b8>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d014      	beq.n	800281a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002816:	2301      	movs	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800281a:	f7fe fad1 	bl	8000dc0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002826:	429a      	cmp	r2, r3
 8002828:	d807      	bhi.n	800283a <HAL_SPI_TransmitReceive+0x1d8>
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002830:	d003      	beq.n	800283a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002838:	e0a7      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1a6      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x130>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1a1      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x130>
 800284e:	e07c      	b.n	800294a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_TransmitReceive+0x1fc>
 8002858:	8b7b      	ldrh	r3, [r7, #26]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d16b      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002884:	e057      	b.n	8002936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d11c      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x26c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x26c>
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d114      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d119      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x2ae>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290c:	2301      	movs	r3, #1
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002910:	f7fe fa56 	bl	8000dc0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291c:	429a      	cmp	r2, r3
 800291e:	d803      	bhi.n	8002928 <HAL_SPI_TransmitReceive+0x2c6>
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002926:	d102      	bne.n	800292e <HAL_SPI_TransmitReceive+0x2cc>
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002934:	e029      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1a2      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x224>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d19d      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa08 	bl	8002d64 <SPI_EndRxTxTransaction>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002966:	e010      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	e000      	b.n	800298a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800299a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3730      	adds	r7, #48	; 0x30
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_SPI_Transmit_DMA+0x20>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e09b      	b.n	8002b00 <HAL_SPI_Transmit_DMA+0x158>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
 80029de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029e0:	e089      	b.n	8002af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_Transmit_DMA+0x46>
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029f2:	e080      	b.n	8002af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2203      	movs	r2, #3
 80029f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	d10f      	bne.n	8002a5c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_SPI_Transmit_DMA+0x160>)
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_SPI_Transmit_DMA+0x164>)
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <HAL_SPI_Transmit_DMA+0x168>)
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	2200      	movs	r2, #0
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4619      	mov	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a94:	f7fe fb84 	bl	80011a0 <HAL_DMA_Start_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002ab6:	e01e      	b.n	8002af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d007      	beq.n	8002ad6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0202 	orr.w	r2, r2, #2
 8002af4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	08002bf9 	.word	0x08002bf9
 8002b0c:	08002b51 	.word	0x08002b51
 8002b10:	08002c15 	.word	0x08002c15

08002b14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5e:	f7fe f92f 	bl	8000dc0 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d03b      	beq.n	8002bec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0220 	bic.w	r2, r2, #32
 8002b82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0202 	bic.w	r2, r2, #2
 8002b92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	2164      	movs	r1, #100	; 0x64
 8002b98:	6978      	ldr	r0, [r7, #20]
 8002b9a:	f000 f8e3 	bl	8002d64 <SPI_EndRxTxTransaction>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7ff ffa9 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002bea:	e002      	b.n	8002bf2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f7ff ff91 	bl	8002b14 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff ff8e 	bl	8002b28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0203 	bic.w	r2, r2, #3
 8002c30:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ff78 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c64:	f7fe f8ac 	bl	8000dc0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c74:	f7fe f8a4 	bl	8000dc0 <HAL_GetTick>
 8002c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	0d1b      	lsrs	r3, r3, #20
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	e054      	b.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c92:	d050      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c94:	f7fe f894 	bl	8000dc0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d902      	bls.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13d      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc2:	d111      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ccc:	d004      	beq.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d107      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d10f      	bne.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e017      	b.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d19b      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <SPI_EndRxTxTransaction+0x7c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <SPI_EndRxTxTransaction+0x80>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0d5b      	lsrs	r3, r3, #21
 8002d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d112      	bne.n	8002db6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff5a 	bl	8002c54 <SPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d0f2      	beq.n	8002db6 <SPI_EndRxTxTransaction+0x52>
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dd2:	bf00      	nop
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000
 8002de4:	165e9f81 	.word	0x165e9f81

08002de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e041      	b.n	8002e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd ff26 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 f950 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e03c      	b.n	8002f1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_TIM_Base_Start+0xa0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x5c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d013      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x5c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_TIM_Base_Start+0xa4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x5c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_TIM_Base_Start+0xa8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x5c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_TIM_Base_Start+0xac>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x5c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIM_Base_Start+0xb0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d010      	beq.n	8002f18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	e007      	b.n	8002f18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0b4      	b.n	80030c2 <HAL_TIM_ConfigClockSource+0x186>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f90:	d03e      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0xd4>
 8002f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f96:	f200 8087 	bhi.w	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	f000 8086 	beq.w	80030ae <HAL_TIM_ConfigClockSource+0x172>
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	d87f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b70      	cmp	r3, #112	; 0x70
 8002faa:	d01a      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d87b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d050      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x11a>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d877      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b50      	cmp	r3, #80	; 0x50
 8002fba:	d03c      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0xfa>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d873      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d058      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x13a>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d86f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d064      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d86b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d060      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d867      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d05a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x15a>
 8002fe0:	e062      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f000 f965 	bl	80032c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]
      break;
 800300e:	e04f      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f000 f94e 	bl	80032c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003032:	609a      	str	r2, [r3, #8]
      break;
 8003034:	e03c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f000 f8c2 	bl	80031cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2150      	movs	r1, #80	; 0x50
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f91b 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003054:	e02c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	461a      	mov	r2, r3
 8003064:	f000 f8e1 	bl	800322a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2160      	movs	r1, #96	; 0x60
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f90b 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003074:	e01c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f8a2 	bl	80031cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f8fb 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 8003094:	e00c      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f000 f8f2 	bl	800328a <TIM_ITRx_SetConfig>
      break;
 80030a6:	e003      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e000      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00f      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d00b      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <TIM_Base_SetConfig+0xe8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <TIM_Base_SetConfig+0xec>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <TIM_Base_SetConfig+0xf0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d108      	bne.n	8003116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01b      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d017      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <TIM_Base_SetConfig+0xe8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <TIM_Base_SetConfig+0xec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00f      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a20      	ldr	r2, [pc, #128]	; (80031bc <TIM_Base_SetConfig+0xf0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <TIM_Base_SetConfig+0xf4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <TIM_Base_SetConfig+0xf8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <TIM_Base_SetConfig+0xfc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <TIM_Base_SetConfig+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40000c00 	.word	0x40000c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800

080031cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0201 	bic.w	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 030a 	bic.w	r3, r3, #10
 8003208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800322a:	b480      	push	{r7}
 800322c:	b087      	sub	sp, #28
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0210 	bic.w	r2, r3, #16
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f043 0307 	orr.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	021a      	lsls	r2, r3, #8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003314:	2302      	movs	r3, #2
 8003316:	e050      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d013      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40014000 	.word	0x40014000

080033dc <calcChunk>:




//column 0-27  row 0-27
void calcChunk(uint16_t X ,uint16_t Y){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	460a      	mov	r2, r1
 80033e6:	80fb      	strh	r3, [r7, #6]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80bb      	strh	r3, [r7, #4]

	uint8_t column =30-(X-X%PIXEL_SIZE)/PIXEL_SIZE;
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	10db      	asrs	r3, r3, #3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f1c3 031e 	rsb	r3, r3, #30
 80033f6:	73fb      	strb	r3, [r7, #15]
	uint8_t row=40-(Y-Y%PIXEL_SIZE)/PIXEL_SIZE;
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	10db      	asrs	r3, r3, #3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8003402:	73bb      	strb	r3, [r7, #14]
	static uint8_t prevRow=0,prevCol=0;
	if(column==0) column=1;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <calcChunk+0x32>
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
	if(column>=29) column=MATRIX_RESOLUTION;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b1c      	cmp	r3, #28
 8003412:	d901      	bls.n	8003418 <calcChunk+0x3c>
 8003414:	231c      	movs	r3, #28
 8003416:	73fb      	strb	r3, [r7, #15]
	column--;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	3b01      	subs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
	if(row==0) row=1;
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <calcChunk+0x4c>
 8003424:	2301      	movs	r3, #1
 8003426:	73bb      	strb	r3, [r7, #14]
	if(row>=29) row=MATRIX_RESOLUTION;
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	2b1c      	cmp	r3, #28
 800342c:	d901      	bls.n	8003432 <calcChunk+0x56>
 800342e:	231c      	movs	r3, #28
 8003430:	73bb      	strb	r3, [r7, #14]
	row--;
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	3b01      	subs	r3, #1
 8003436:	73bb      	strb	r3, [r7, #14]
	if(prevRow!=row || prevCol!=column){
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <calcChunk+0x90>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	7bba      	ldrb	r2, [r7, #14]
 800343e:	429a      	cmp	r2, r3
 8003440:	d104      	bne.n	800344c <calcChunk+0x70>
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <calcChunk+0x94>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	429a      	cmp	r2, r3
 800344a:	d00b      	beq.n	8003464 <calcChunk+0x88>
		boundaryConditions(row, column);
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	7bbb      	ldrb	r3, [r7, #14]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f80e 	bl	8003474 <boundaryConditions>
		prevRow=row;
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <calcChunk+0x90>)
 800345a:	7bbb      	ldrb	r3, [r7, #14]
 800345c:	7013      	strb	r3, [r2, #0]
		prevCol=column;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <calcChunk+0x94>)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	7013      	strb	r3, [r2, #0]
	}
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	200004f8 	.word	0x200004f8
 8003470:	200004f9 	.word	0x200004f9

08003474 <boundaryConditions>:
 * 7 - L LU U RU R
 * 8 - U RU R
 * 9 - L LU U
 */

void boundaryConditions(uint8_t row , uint8_t column){
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	460a      	mov	r2, r1
 800347e:	71fb      	strb	r3, [r7, #7]
 8003480:	4613      	mov	r3, r2
 8003482:	71bb      	strb	r3, [r7, #6]
	uint8_t bound1=0,bound2=0;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	2300      	movs	r3, #0
 800348a:	73bb      	strb	r3, [r7, #14]
	if(row==0)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <boundaryConditions+0x24>
		bound1=4;
 8003492:	2304      	movs	r3, #4
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e004      	b.n	80034a2 <boundaryConditions+0x2e>
	else if(row==27)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b1b      	cmp	r3, #27
 800349c:	d101      	bne.n	80034a2 <boundaryConditions+0x2e>
		bound1=7;
 800349e:	2307      	movs	r3, #7
 80034a0:	73fb      	strb	r3, [r7, #15]
	if(column==0)
 80034a2:	79bb      	ldrb	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <boundaryConditions+0x3a>
		bound2=1;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73bb      	strb	r3, [r7, #14]
 80034ac:	e004      	b.n	80034b8 <boundaryConditions+0x44>
	else if(column==27)
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	2b1b      	cmp	r3, #27
 80034b2:	d101      	bne.n	80034b8 <boundaryConditions+0x44>
		bound2=2;
 80034b4:	2302      	movs	r3, #2
 80034b6:	73bb      	strb	r3, [r7, #14]
	switch(bound1+bound2){
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	4413      	add	r3, r2
 80034be:	2b09      	cmp	r3, #9
 80034c0:	f200 81b7 	bhi.w	8003832 <boundaryConditions+0x3be>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <boundaryConditions+0x58>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	08003593 	.word	0x08003593
 80034d4:	080035f9 	.word	0x080035f9
 80034d8:	08003833 	.word	0x08003833
 80034dc:	0800365f 	.word	0x0800365f
 80034e0:	080036c5 	.word	0x080036c5
 80034e4:	08003707 	.word	0x08003707
 80034e8:	08003749 	.word	0x08003749
 80034ec:	080037af 	.word	0x080037af
 80034f0:	080037f1 	.word	0x080037f1
		case 0:{
			putDataToArray(row, column-1, 64); //L
 80034f4:	79bb      	ldrb	r3, [r7, #6]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2d9      	uxtb	r1, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f9a2 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column-1, 64); //LU
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	3b01      	subs	r3, #1
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	3b01      	subs	r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	4619      	mov	r1, r3
 8003514:	f000 f998 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	3b01      	subs	r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	79b9      	ldrb	r1, [r7, #6]
 8003520:	2240      	movs	r2, #64	; 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f990 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 8003528:	79b9      	ldrb	r1, [r7, #6]
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f98a 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column+1,64);//RU
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	3b01      	subs	r3, #1
 8003538:	b2d8      	uxtb	r0, r3
 800353a:	79bb      	ldrb	r3, [r7, #6]
 800353c:	3301      	adds	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	4619      	mov	r1, r3
 8003544:	f000 f980 	bl	8003848 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 8003548:	79bb      	ldrb	r3, [r7, #6]
 800354a:	3301      	adds	r3, #1
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2240      	movs	r2, #64	; 0x40
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f978 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	3301      	adds	r3, #1
 800355c:	b2d8      	uxtb	r0, r3
 800355e:	79bb      	ldrb	r3, [r7, #6]
 8003560:	3301      	adds	r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4619      	mov	r1, r3
 8003568:	f000 f96e 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	3301      	adds	r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	79b9      	ldrb	r1, [r7, #6]
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f966 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	3301      	adds	r3, #1
 8003580:	b2d8      	uxtb	r0, r3
 8003582:	79bb      	ldrb	r3, [r7, #6]
 8003584:	3b01      	subs	r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	4619      	mov	r1, r3
 800358c:	f000 f95c 	bl	8003848 <putDataToArray>

			break;
 8003590:	e156      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 1:{// 1 - U D R RU RD
			putDataToArray(row+1, column, 64); //D
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	3301      	adds	r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	79b9      	ldrb	r1, [r7, #6]
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f953 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column+1, 64); //RD
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b2d8      	uxtb	r0, r3
 80035a8:	79bb      	ldrb	r3, [r7, #6]
 80035aa:	3301      	adds	r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	4619      	mov	r1, r3
 80035b2:	f000 f949 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 80035b6:	79b9      	ldrb	r1, [r7, #6]
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f943 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	79bb      	ldrb	r3, [r7, #6]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	4619      	mov	r1, r3
 80035d2:	f000 f939 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	3b01      	subs	r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	79b9      	ldrb	r1, [r7, #6]
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f931 	bl	8003848 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 80035e6:	79bb      	ldrb	r3, [r7, #6]
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2d9      	uxtb	r1, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f929 	bl	8003848 <putDataToArray>
			break;
 80035f6:	e123      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 2:{//2 - U D L LU LD
			putDataToArray(row+1, column, 64);//D
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	3301      	adds	r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	79b9      	ldrb	r1, [r7, #6]
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f920 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	3301      	adds	r3, #1
 800360c:	b2d8      	uxtb	r0, r3
 800360e:	79bb      	ldrb	r3, [r7, #6]
 8003610:	3b01      	subs	r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	4619      	mov	r1, r3
 8003618:	f000 f916 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 800361c:	79b9      	ldrb	r1, [r7, #6]
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f910 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	3b01      	subs	r3, #1
 800362c:	b2d8      	uxtb	r0, r3
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	3b01      	subs	r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	4619      	mov	r1, r3
 8003638:	f000 f906 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	3b01      	subs	r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	79b9      	ldrb	r1, [r7, #6]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f8fe 	bl	8003848 <putDataToArray>
			putDataToArray(row, column-1, 64);//L
 800364c:	79bb      	ldrb	r3, [r7, #6]
 800364e:	3b01      	subs	r3, #1
 8003650:	b2d9      	uxtb	r1, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f8f6 	bl	8003848 <putDataToArray>
			break;
 800365c:	e0f0      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 4:{// 4 - L LD D RD R
			putDataToArray(row, column-1, 64);//L
 800365e:	79bb      	ldrb	r3, [r7, #6]
 8003660:	3b01      	subs	r3, #1
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f8ed 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	3301      	adds	r3, #1
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	3b01      	subs	r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2240      	movs	r2, #64	; 0x40
 800367c:	4619      	mov	r1, r3
 800367e:	f000 f8e3 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 8003682:	79b9      	ldrb	r1, [r7, #6]
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f8dd 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	3301      	adds	r3, #1
 8003692:	b2d8      	uxtb	r0, r3
 8003694:	79bb      	ldrb	r3, [r7, #6]
 8003696:	3301      	adds	r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	4619      	mov	r1, r3
 800369e:	f000 f8d3 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	3301      	adds	r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	79b9      	ldrb	r1, [r7, #6]
 80036aa:	2240      	movs	r2, #64	; 0x40
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f8cb 	bl	8003848 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 80036b2:	79bb      	ldrb	r3, [r7, #6]
 80036b4:	3301      	adds	r3, #1
 80036b6:	b2d9      	uxtb	r1, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f8c3 	bl	8003848 <putDataToArray>

			break;
 80036c2:	e0bd      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 5:{//5 - D RD R
			putDataToArray(row, column+1, 64);//R
 80036c4:	79bb      	ldrb	r3, [r7, #6]
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2d9      	uxtb	r1, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f8ba 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2d8      	uxtb	r0, r3
 80036da:	79bb      	ldrb	r3, [r7, #6]
 80036dc:	3301      	adds	r3, #1
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2240      	movs	r2, #64	; 0x40
 80036e2:	4619      	mov	r1, r3
 80036e4:	f000 f8b0 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 80036e8:	79b9      	ldrb	r1, [r7, #6]
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	22ff      	movs	r2, #255	; 0xff
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8aa 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	3301      	adds	r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	79b9      	ldrb	r1, [r7, #6]
 80036fc:	2240      	movs	r2, #64	; 0x40
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f8a2 	bl	8003848 <putDataToArray>
			break;
 8003704:	e09c      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 6:{// 6 - L LD D
			putDataToArray(row, column-1, 64);//L
 8003706:	79bb      	ldrb	r3, [r7, #6]
 8003708:	3b01      	subs	r3, #1
 800370a:	b2d9      	uxtb	r1, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f899 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 8003716:	79b9      	ldrb	r1, [r7, #6]
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f893 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	3301      	adds	r3, #1
 8003726:	b2d8      	uxtb	r0, r3
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	3b01      	subs	r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	4619      	mov	r1, r3
 8003732:	f000 f889 	bl	8003848 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	3301      	adds	r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	79b9      	ldrb	r1, [r7, #6]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f881 	bl	8003848 <putDataToArray>
			break;
 8003746:	e07b      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 7:{//7 - L LU U RU R
			putDataToArray(row, column-1, 64);//L
 8003748:	79bb      	ldrb	r3, [r7, #6]
 800374a:	3b01      	subs	r3, #1
 800374c:	b2d9      	uxtb	r1, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	2240      	movs	r2, #64	; 0x40
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f878 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	3b01      	subs	r3, #1
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	79bb      	ldrb	r3, [r7, #6]
 8003760:	3b01      	subs	r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	4619      	mov	r1, r3
 8003768:	f000 f86e 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 800376c:	79b9      	ldrb	r1, [r7, #6]
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f868 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	3b01      	subs	r3, #1
 800377c:	b2d8      	uxtb	r0, r3
 800377e:	79bb      	ldrb	r3, [r7, #6]
 8003780:	3301      	adds	r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	4619      	mov	r1, r3
 8003788:	f000 f85e 	bl	8003848 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 800378c:	79bb      	ldrb	r3, [r7, #6]
 800378e:	3301      	adds	r3, #1
 8003790:	b2d9      	uxtb	r1, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2240      	movs	r2, #64	; 0x40
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f856 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	3b01      	subs	r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	79b9      	ldrb	r1, [r7, #6]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f84e 	bl	8003848 <putDataToArray>
			break;
 80037ac:	e048      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 8:{//8 - U RU R
			putDataToArray(row-1, column, 64);//U
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	79b9      	ldrb	r1, [r7, #6]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f845 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2d8      	uxtb	r0, r3
 80037c4:	79bb      	ldrb	r3, [r7, #6]
 80037c6:	3301      	adds	r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	4619      	mov	r1, r3
 80037ce:	f000 f83b 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 80037d2:	79b9      	ldrb	r1, [r7, #6]
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f835 	bl	8003848 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 80037de:	79bb      	ldrb	r3, [r7, #6]
 80037e0:	3301      	adds	r3, #1
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f82d 	bl	8003848 <putDataToArray>
			break;
 80037ee:	e027      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		case 9:{//9 - L LU U
			putDataToArray(row-1, column, 64);//U
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	79b9      	ldrb	r1, [r7, #6]
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f824 	bl	8003848 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	3b01      	subs	r3, #1
 8003804:	b2d8      	uxtb	r0, r3
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	3b01      	subs	r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2240      	movs	r2, #64	; 0x40
 800380e:	4619      	mov	r1, r3
 8003810:	f000 f81a 	bl	8003848 <putDataToArray>
			putDataToArray(row, column, 255);
 8003814:	79b9      	ldrb	r1, [r7, #6]
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f814 	bl	8003848 <putDataToArray>
			putDataToArray(row, column-1, 64);//L
 8003820:	79bb      	ldrb	r3, [r7, #6]
 8003822:	3b01      	subs	r3, #1
 8003824:	b2d9      	uxtb	r1, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f80c 	bl	8003848 <putDataToArray>
			break;
 8003830:	e006      	b.n	8003840 <boundaryConditions+0x3cc>
		}
		default:{
			putDataToArray(row, column, 255);
 8003832:	79b9      	ldrb	r1, [r7, #6]
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f805 	bl	8003848 <putDataToArray>
			break;
 800383e:	bf00      	nop





}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <putDataToArray>:

void putDataToArray(uint8_t row , uint8_t column,uint16_t value){
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
 8003852:	460b      	mov	r3, r1
 8003854:	71bb      	strb	r3, [r7, #6]
 8003856:	4613      	mov	r3, r2
 8003858:	80bb      	strh	r3, [r7, #4]
	if(Screen.Atributs[MATRIX_RESOLUTION*row+column]<=128 &&value!=255){
 800385a:	79fa      	ldrb	r2, [r7, #7]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	461a      	mov	r2, r3
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	4413      	add	r3, r2
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <putDataToArray+0xe4>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
 800386e:	2b80      	cmp	r3, #128	; 0x80
 8003870:	d81b      	bhi.n	80038aa <putDataToArray+0x62>
 8003872:	88bb      	ldrh	r3, [r7, #4]
 8003874:	2bff      	cmp	r3, #255	; 0xff
 8003876:	d018      	beq.n	80038aa <putDataToArray+0x62>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]+=value;
 8003878:	79fa      	ldrb	r2, [r7, #7]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	79bb      	ldrb	r3, [r7, #6]
 8003886:	4413      	add	r3, r2
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <putDataToArray+0xe4>)
 800388a:	5cd0      	ldrb	r0, [r2, r3]
 800388c:	88bb      	ldrh	r3, [r7, #4]
 800388e:	b2d9      	uxtb	r1, r3
 8003890:	79fa      	ldrb	r2, [r7, #7]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	461a      	mov	r2, r3
 800389c:	79bb      	ldrb	r3, [r7, #6]
 800389e:	4413      	add	r3, r2
 80038a0:	1842      	adds	r2, r0, r1
 80038a2:	b2d1      	uxtb	r1, r2
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <putDataToArray+0xe4>)
 80038a6:	54d1      	strb	r1, [r2, r3]
 80038a8:	e034      	b.n	8003914 <putDataToArray+0xcc>
	}
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]<=192 && value!=255){
 80038aa:	79fa      	ldrb	r2, [r7, #7]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	79bb      	ldrb	r3, [r7, #6]
 80038b8:	4413      	add	r3, r2
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <putDataToArray+0xe4>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	2bc0      	cmp	r3, #192	; 0xc0
 80038c0:	d81d      	bhi.n	80038fe <putDataToArray+0xb6>
 80038c2:	88bb      	ldrh	r3, [r7, #4]
 80038c4:	2bff      	cmp	r3, #255	; 0xff
 80038c6:	d01a      	beq.n	80038fe <putDataToArray+0xb6>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]+=value-1;
 80038c8:	79fa      	ldrb	r2, [r7, #7]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	461a      	mov	r2, r3
 80038d4:	79bb      	ldrb	r3, [r7, #6]
 80038d6:	4413      	add	r3, r2
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <putDataToArray+0xe4>)
 80038da:	5cd2      	ldrb	r2, [r2, r3]
 80038dc:	88bb      	ldrh	r3, [r7, #4]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	b2d9      	uxtb	r1, r3
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	461a      	mov	r2, r3
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	4413      	add	r3, r2
 80038f4:	1e4a      	subs	r2, r1, #1
 80038f6:	b2d1      	uxtb	r1, r2
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <putDataToArray+0xe4>)
 80038fa:	54d1      	strb	r1, [r2, r3]
 80038fc:	e00a      	b.n	8003914 <putDataToArray+0xcc>
	}
	else{
		Screen.Atributs[MATRIX_RESOLUTION*row+column]=255;
 80038fe:	79fa      	ldrb	r2, [r7, #7]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	461a      	mov	r2, r3
 800390a:	79bb      	ldrb	r3, [r7, #6]
 800390c:	4413      	add	r3, r2
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <putDataToArray+0xe4>)
 8003910:	21ff      	movs	r1, #255	; 0xff
 8003912:	54d1      	strb	r1, [r2, r3]
	}
	ColorPixel(row, column);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	b29b      	uxth	r3, r3
 8003918:	79ba      	ldrb	r2, [r7, #6]
 800391a:	b292      	uxth	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f806 	bl	8003930 <ColorPixel>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200001e8 	.word	0x200001e8

08003930 <ColorPixel>:

void ColorPixel(uint16_t row , uint16_t column){
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af02      	add	r7, sp, #8
 8003936:	4603      	mov	r3, r0
 8003938:	460a      	mov	r2, r1
 800393a:	80fb      	strh	r3, [r7, #6]
 800393c:	4613      	mov	r3, r2
 800393e:	80bb      	strh	r3, [r7, #4]
	uint16_t X0=LCD_WIDTH-2*PIXEL_SIZE-PIXEL_SIZE*column;
 8003940:	88bb      	ldrh	r3, [r7, #4]
 8003942:	f1c3 031c 	rsb	r3, r3, #28
 8003946:	b29b      	uxth	r3, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	81fb      	strh	r3, [r7, #14]
	uint16_t X1=LCD_WIDTH-PIXEL_SIZE-PIXEL_SIZE*column;
 800394c:	88bb      	ldrh	r3, [r7, #4]
 800394e:	f1c3 031d 	rsb	r3, r3, #29
 8003952:	b29b      	uxth	r3, r3
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	81bb      	strh	r3, [r7, #12]
	uint16_t Y0=LCD_HEIGHT-PIXEL_SIZE-PIXEL_SIZE*row;
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 800395e:	b29b      	uxth	r3, r3
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	817b      	strh	r3, [r7, #10]
	uint16_t Y1=LCD_HEIGHT-2*PIXEL_SIZE-PIXEL_SIZE*row;
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	f1c3 0326 	rsb	r3, r3, #38	; 0x26
 800396a:	b29b      	uxth	r3, r3
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	813b      	strh	r3, [r7, #8]
	if(Screen.Atributs[MATRIX_RESOLUTION*row+column]==64){
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	461a      	mov	r2, r3
 800397c:	88bb      	ldrh	r3, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <ColorPixel+0x108>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d109      	bne.n	800399c <ColorPixel+0x6c>
		Draw_Rect(X0, Y0, X1, Y1, SHAD4);
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	89ba      	ldrh	r2, [r7, #12]
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	89f8      	ldrh	r0, [r7, #14]
 8003990:	f648 4451 	movw	r4, #35921	; 0x8c51
 8003994:	9400      	str	r4, [sp, #0]
 8003996:	f000 fa47 	bl	8003e28 <Draw_Rect>
		Draw_Rect(X0, Y0, X1, Y1, YELLOW);
	}



}
 800399a:	e049      	b.n	8003a30 <ColorPixel+0x100>
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]==128){
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	88bb      	ldrh	r3, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <ColorPixel+0x108>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	2b80      	cmp	r3, #128	; 0x80
 80039b2:	d109      	bne.n	80039c8 <ColorPixel+0x98>
		Draw_Rect(X0, Y0, X1, Y1,SHAD3);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	89ba      	ldrh	r2, [r7, #12]
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	89f8      	ldrh	r0, [r7, #14]
 80039bc:	f245 248a 	movw	r4, #21130	; 0x528a
 80039c0:	9400      	str	r4, [sp, #0]
 80039c2:	f000 fa31 	bl	8003e28 <Draw_Rect>
}
 80039c6:	e033      	b.n	8003a30 <ColorPixel+0x100>
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]==192){
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	88bb      	ldrh	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <ColorPixel+0x108>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	2bc0      	cmp	r3, #192	; 0xc0
 80039de:	d109      	bne.n	80039f4 <ColorPixel+0xc4>
		Draw_Rect(X0, Y0, X1, Y1, SHAD2);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	89ba      	ldrh	r2, [r7, #12]
 80039e4:	8979      	ldrh	r1, [r7, #10]
 80039e6:	89f8      	ldrh	r0, [r7, #14]
 80039e8:	f244 2408 	movw	r4, #16904	; 0x4208
 80039ec:	9400      	str	r4, [sp, #0]
 80039ee:	f000 fa1b 	bl	8003e28 <Draw_Rect>
}
 80039f2:	e01d      	b.n	8003a30 <ColorPixel+0x100>
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]==255){
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	461a      	mov	r2, r3
 8003a00:	88bb      	ldrh	r3, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <ColorPixel+0x108>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	2bff      	cmp	r3, #255	; 0xff
 8003a0a:	d108      	bne.n	8003a1e <ColorPixel+0xee>
		Draw_Rect(X0, Y0, X1, Y1, SHAD1);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	89ba      	ldrh	r2, [r7, #12]
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	89f8      	ldrh	r0, [r7, #14]
 8003a14:	2400      	movs	r4, #0
 8003a16:	9400      	str	r4, [sp, #0]
 8003a18:	f000 fa06 	bl	8003e28 <Draw_Rect>
}
 8003a1c:	e008      	b.n	8003a30 <ColorPixel+0x100>
		Draw_Rect(X0, Y0, X1, Y1, YELLOW);
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	89ba      	ldrh	r2, [r7, #12]
 8003a22:	8979      	ldrh	r1, [r7, #10]
 8003a24:	89f8      	ldrh	r0, [r7, #14]
 8003a26:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8003a2a:	9400      	str	r4, [sp, #0]
 8003a2c:	f000 f9fc 	bl	8003e28 <Draw_Rect>
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	200001e8 	.word	0x200001e8

08003a3c <refreshMenu>:
#include "matrix.h"
#include <string.h>
#include "tim.h"
extern struct matrix Screen;

void refreshMenu(void){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af02      	add	r7, sp, #8
	Draw_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, BACKGROUNDCOL);
 8003a42:	f644 636c 	movw	r3, #20076	; 0x4e6c
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003a4c:	22f0      	movs	r2, #240	; 0xf0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2000      	movs	r0, #0
 8003a52:	f000 f9e9 	bl	8003e28 <Draw_Rect>
	Draw_Rect(8, 88, LCD_WIDTH-PIXEL_SIZE, LCD_HEIGHT-PIXEL_SIZE, MATRIXCOL);
 8003a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8003a60:	22e8      	movs	r2, #232	; 0xe8
 8003a62:	2158      	movs	r1, #88	; 0x58
 8003a64:	2008      	movs	r0, #8
 8003a66:	f000 f9df 	bl	8003e28 <Draw_Rect>
	Draw_Rect(8, PIXEL_SIZE, LCD_WIDTH-PIXEL_SIZE, 55,BUTTONCOL);
 8003a6a:	f248 7365 	movw	r3, #34661	; 0x8765
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2337      	movs	r3, #55	; 0x37
 8003a72:	22e8      	movs	r2, #232	; 0xe8
 8003a74:	2108      	movs	r1, #8
 8003a76:	2008      	movs	r0, #8
 8003a78:	f000 f9d6 	bl	8003e28 <Draw_Rect>
	memset(Screen.Atributs,0,NUM_PIXELS);
 8003a7c:	f44f 7244 	mov.w	r2, #784	; 0x310
 8003a80:	2100      	movs	r1, #0
 8003a82:	4803      	ldr	r0, [pc, #12]	; (8003a90 <refreshMenu+0x54>)
 8003a84:	f000 fbba 	bl	80041fc <memset>




}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200001e8 	.word	0x200001e8

08003a94 <updateScreen>:

void updateScreen(uint16_t X ,uint16_t Y){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	80fb      	strh	r3, [r7, #6]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80bb      	strh	r3, [r7, #4]
	static uint32_t time1=0;// 1=100us
	static uint8_t menuState=1;

	if(Y>=88 &&menuState==1){
 8003aa4:	88bb      	ldrh	r3, [r7, #4]
 8003aa6:	2b57      	cmp	r3, #87	; 0x57
 8003aa8:	d90a      	bls.n	8003ac0 <updateScreen+0x2c>
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <updateScreen+0xb8>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d106      	bne.n	8003ac0 <updateScreen+0x2c>
		calcChunk(X, Y);
 8003ab2:	88ba      	ldrh	r2, [r7, #4]
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fc8f 	bl	80033dc <calcChunk>
 8003abe:	e037      	b.n	8003b30 <updateScreen+0x9c>


	}
	else if(Y<=20 && menuState==1&& (TIM2->CNT- time1)>10000){
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	2b14      	cmp	r3, #20
 8003ac4:	d820      	bhi.n	8003b08 <updateScreen+0x74>
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <updateScreen+0xb8>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11c      	bne.n	8003b08 <updateScreen+0x74>
 8003ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <updateScreen+0xbc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d912      	bls.n	8003b08 <updateScreen+0x74>
		time1=TIM2->CNT;
 8003ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <updateScreen+0xbc>)
 8003aea:	6013      	str	r3, [r2, #0]
		menuState=0;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <updateScreen+0xb8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
		//uint8_t  prediction = predict(void)
		//uint8_t  predictionProb = getProb(void)
		Draw_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, RELOADCOL);
 8003af2:	f244 230a 	movw	r3, #16906	; 0x420a
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003afc:	22f0      	movs	r2, #240	; 0xf0
 8003afe:	2100      	movs	r1, #0
 8003b00:	2000      	movs	r0, #0
 8003b02:	f000 f991 	bl	8003e28 <Draw_Rect>
 8003b06:	e013      	b.n	8003b30 <updateScreen+0x9c>
		//DrawText(" ")

	}
	else if(TIM2->CNT-time1>10000){
 8003b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <updateScreen+0xbc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d909      	bls.n	8003b30 <updateScreen+0x9c>
		refreshMenu();
 8003b1c:	f7ff ff8e 	bl	8003a3c <refreshMenu>
		time1=TIM2->CNT;
 8003b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <updateScreen+0xbc>)
 8003b28:	6013      	str	r3, [r2, #0]

		menuState=1;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <updateScreen+0xb8>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
	}
	if(TIM2->CNT<time1)
 8003b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <updateScreen+0xbc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d202      	bcs.n	8003b44 <updateScreen+0xb0>
		time1=0;
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <updateScreen+0xbc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]


}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000009 	.word	0x20000009
 8003b50:	200004fc 	.word	0x200004fc

08003b54 <Init>:

volatile uint16_t LCD_HEIGHT = 320;
volatile uint16_t LCD_WIDTH	=240;


void Init(){
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af02      	add	r7, sp, #8


	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4827      	ldr	r0, [pc, #156]	; (8003bfc <Init+0xa8>)
 8003b60:	f7fd ff7c 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2102      	movs	r1, #2
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <Init+0xa8>)
 8003b6a:	f7fd ff77 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8003b6e:	201e      	movs	r0, #30
 8003b70:	f7fd f932 	bl	8000dd8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003b74:	2201      	movs	r2, #1
 8003b76:	2101      	movs	r1, #1
 8003b78:	4820      	ldr	r0, [pc, #128]	; (8003bfc <Init+0xa8>)
 8003b7a:	f7fd ff6f 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2102      	movs	r1, #2
 8003b82:	481e      	ldr	r0, [pc, #120]	; (8003bfc <Init+0xa8>)
 8003b84:	f7fd ff6a 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8003b88:	201e      	movs	r0, #30
 8003b8a:	f7fd f925 	bl	8000dd8 <HAL_Delay>
	//////////////////////////////////
	Write_Command(COLMOD_REG);
 8003b8e:	203a      	movs	r0, #58	; 0x3a
 8003b90:	f000 f836 	bl	8003c00 <Write_Command>
	Write_Data_byte(0x55); //16 bit mode
 8003b94:	2055      	movs	r0, #85	; 0x55
 8003b96:	f000 f861 	bl	8003c5c <Write_Data_byte>

	Write_Command(INVON_REG);
 8003b9a:	2021      	movs	r0, #33	; 0x21
 8003b9c:	f000 f830 	bl	8003c00 <Write_Command>
	Write_Command(SLPOUT_REG);
 8003ba0:	2011      	movs	r0, #17
 8003ba2:	f000 f82d 	bl	8003c00 <Write_Command>
	Write_Command(NORON_REG);
 8003ba6:	2013      	movs	r0, #19
 8003ba8:	f000 f82a 	bl	8003c00 <Write_Command>
	Write_Command(DISPON_REG);
 8003bac:	2029      	movs	r0, #41	; 0x29
 8003bae:	f000 f827 	bl	8003c00 <Write_Command>
	Write_Command(0x01);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f000 f824 	bl	8003c00 <Write_Command>
	HAL_Delay(10);
 8003bb8:	200a      	movs	r0, #10
 8003bba:	f7fd f90d 	bl	8000dd8 <HAL_Delay>
	Write_Command(0x11);
 8003bbe:	2011      	movs	r0, #17
 8003bc0:	f000 f81e 	bl	8003c00 <Write_Command>
	HAL_Delay(100);
 8003bc4:	2064      	movs	r0, #100	; 0x64
 8003bc6:	f7fd f907 	bl	8000dd8 <HAL_Delay>
	Write_Command(0x29);
 8003bca:	2029      	movs	r0, #41	; 0x29
 8003bcc:	f000 f818 	bl	8003c00 <Write_Command>

	Set_Rotation();
 8003bd0:	f000 f8b6 	bl	8003d40 <Set_Rotation>
	Set_Adress(0, 0, 240, 320);
 8003bd4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003bd8:	22f0      	movs	r2, #240	; 0xf0
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f000 f8c7 	bl	8003d70 <Set_Adress>
	Draw_Rect(0, 0, 240, 320, 0x0000);
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003bea:	22f0      	movs	r2, #240	; 0xf0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f000 f91a 	bl	8003e28 <Draw_Rect>

}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40020400 	.word	0x40020400

08003c00 <Write_Command>:




void Write_Command(uint8_t cmd){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4810      	ldr	r0, [pc, #64]	; (8003c50 <Write_Command+0x50>)
 8003c10:	f7fd ff24 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003c14:	2200      	movs	r2, #0
 8003c16:	2110      	movs	r1, #16
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <Write_Command+0x54>)
 8003c1a:	f7fd ff1f 	bl	8001a5c <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(&SPI_PORT, SPI_FLAG_TXE));
 8003c1e:	bf00      	nop
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <Write_Command+0x58>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d1f8      	bne.n	8003c20 <Write_Command+0x20>
	HAL_SPI_Transmit(&SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 8003c2e:	1df9      	adds	r1, r7, #7
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c34:	2201      	movs	r2, #1
 8003c36:	4808      	ldr	r0, [pc, #32]	; (8003c58 <Write_Command+0x58>)
 8003c38:	f7fe fbd7 	bl	80023ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2102      	movs	r1, #2
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <Write_Command+0x50>)
 8003c42:	f7fd ff0b 	bl	8001a5c <HAL_GPIO_WritePin>

}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020000 	.word	0x40020000
 8003c58:	20000034 	.word	0x20000034

08003c5c <Write_Data_byte>:

void Write_Data_byte(uint8_t data){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4810      	ldr	r0, [pc, #64]	; (8003cac <Write_Data_byte+0x50>)
 8003c6c:	f7fd fef6 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003c70:	2201      	movs	r2, #1
 8003c72:	2110      	movs	r1, #16
 8003c74:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <Write_Data_byte+0x54>)
 8003c76:	f7fd fef1 	bl	8001a5c <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(&SPI_PORT, SPI_FLAG_TXE));
 8003c7a:	bf00      	nop
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <Write_Data_byte+0x58>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d1f8      	bne.n	8003c7c <Write_Data_byte+0x20>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 8003c8a:	1df9      	adds	r1, r7, #7
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c90:	2201      	movs	r2, #1
 8003c92:	4808      	ldr	r0, [pc, #32]	; (8003cb4 <Write_Data_byte+0x58>)
 8003c94:	f7fe fba9 	bl	80023ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4803      	ldr	r0, [pc, #12]	; (8003cac <Write_Data_byte+0x50>)
 8003c9e:	f7fd fedd 	bl	8001a5c <HAL_GPIO_WritePin>

}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	20000034 	.word	0x20000034

08003cb8 <Write_Data>:


void Write_Data(uint8_t *buff,uint32_t buffSize){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	481b      	ldr	r0, [pc, #108]	; (8003d34 <Write_Data+0x7c>)
 8003cc8:	f7fd fec8 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2110      	movs	r1, #16
 8003cd0:	4819      	ldr	r0, [pc, #100]	; (8003d38 <Write_Data+0x80>)
 8003cd2:	f7fd fec3 	bl	8001a5c <HAL_GPIO_WritePin>
	uint16_t DataSize;
	uint32_t buffsize=buffSize;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	60bb      	str	r3, [r7, #8]
	while(buffsize>0){
 8003cda:	e01f      	b.n	8003d1c <Write_Data+0x64>
		if (buffsize>65535)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce2:	d303      	bcc.n	8003cec <Write_Data+0x34>
			DataSize=65535;
 8003ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ce8:	81fb      	strh	r3, [r7, #14]
 8003cea:	e001      	b.n	8003cf0 <Write_Data+0x38>
		else
			DataSize=buffsize;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit_DMA(&SPI_PORT, buff,DataSize);
 8003cf0:	89fb      	ldrh	r3, [r7, #14]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4811      	ldr	r0, [pc, #68]	; (8003d3c <Write_Data+0x84>)
 8003cf8:	f7fe fe56 	bl	80029a8 <HAL_SPI_Transmit_DMA>
		while (SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8003cfc:	bf00      	nop
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <Write_Data+0x84>)
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d1f8      	bne.n	8003cfe <Write_Data+0x46>
		{}
		buff+=DataSize;
 8003d0c:	89fb      	ldrh	r3, [r7, #14]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	607b      	str	r3, [r7, #4]
		buffsize-=DataSize;
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	60bb      	str	r3, [r7, #8]
	while(buffsize>0){
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1dc      	bne.n	8003cdc <Write_Data+0x24>

	}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003d22:	2201      	movs	r2, #1
 8003d24:	2102      	movs	r1, #2
 8003d26:	4803      	ldr	r0, [pc, #12]	; (8003d34 <Write_Data+0x7c>)
 8003d28:	f7fd fe98 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	20000034 	.word	0x20000034

08003d40 <Set_Rotation>:


void Set_Rotation(void){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	Write_Command(MADCTL_REG);
 8003d44:	2036      	movs	r0, #54	; 0x36
 8003d46:	f7ff ff5b 	bl	8003c00 <Write_Command>
	HAL_Delay(1);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7fd f844 	bl	8000dd8 <HAL_Delay>
	Write_Data_byte(0x00|0x00);
 8003d50:	2000      	movs	r0, #0
 8003d52:	f7ff ff83 	bl	8003c5c <Write_Data_byte>
	LCD_HEIGHT=320;
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <Set_Rotation+0x28>)
 8003d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d5c:	801a      	strh	r2, [r3, #0]
	LCD_WIDTH=240;
 8003d5e:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <Set_Rotation+0x2c>)
 8003d60:	22f0      	movs	r2, #240	; 0xf0
 8003d62:	801a      	strh	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	2000000a 	.word	0x2000000a
 8003d6c:	2000000c 	.word	0x2000000c

08003d70 <Set_Adress>:


void Set_Adress(uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1){
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4623      	mov	r3, r4
 8003d80:	80fb      	strh	r3, [r7, #6]
 8003d82:	4603      	mov	r3, r0
 8003d84:	80bb      	strh	r3, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	807b      	strh	r3, [r7, #2]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	803b      	strh	r3, [r7, #0]
	if(X0>X1){
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d905      	bls.n	8003da2 <Set_Adress+0x32>
		uint16_t temp1=X0;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	82fb      	strh	r3, [r7, #22]
		X0=X1;
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	80fb      	strh	r3, [r7, #6]
		X1=temp1;
 8003d9e:	8afb      	ldrh	r3, [r7, #22]
 8003da0:	807b      	strh	r3, [r7, #2]
	}

	if(Y0>Y1){
 8003da2:	88ba      	ldrh	r2, [r7, #4]
 8003da4:	883b      	ldrh	r3, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d905      	bls.n	8003db6 <Set_Adress+0x46>
		uint16_t temp2=Y0;
 8003daa:	88bb      	ldrh	r3, [r7, #4]
 8003dac:	82bb      	strh	r3, [r7, #20]
		Y0=Y1;
 8003dae:	883b      	ldrh	r3, [r7, #0]
 8003db0:	80bb      	strh	r3, [r7, #4]
		Y1=temp2;
 8003db2:	8abb      	ldrh	r3, [r7, #20]
 8003db4:	803b      	strh	r3, [r7, #0]
	}
	Write_Command(CASET_REG);
 8003db6:	202a      	movs	r0, #42	; 0x2a
 8003db8:	f7ff ff22 	bl	8003c00 <Write_Command>
	uint8_t adressX[4]={X0>>8,X0 & 0xFF,X1>>8,X1 & 0xFF};
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	743b      	strb	r3, [r7, #16]
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	747b      	strb	r3, [r7, #17]
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	74bb      	strb	r3, [r7, #18]
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	74fb      	strb	r3, [r7, #19]
	Write_Data(adressX,4);
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	2104      	movs	r1, #4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ff68 	bl	8003cb8 <Write_Data>
	Write_Command(RASET_REG);
 8003de8:	202b      	movs	r0, #43	; 0x2b
 8003dea:	f7ff ff09 	bl	8003c00 <Write_Command>
	uint8_t adressY[4]={Y0>>8,Y0 & 0xFF,Y1>>8,Y1 & 0xFF};
 8003dee:	88bb      	ldrh	r3, [r7, #4]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	733b      	strb	r3, [r7, #12]
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	737b      	strb	r3, [r7, #13]
 8003dfe:	883b      	ldrh	r3, [r7, #0]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	73bb      	strb	r3, [r7, #14]
 8003e08:	883b      	ldrh	r3, [r7, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	73fb      	strb	r3, [r7, #15]
	Write_Data(adressY,4);
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	2104      	movs	r1, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff4f 	bl	8003cb8 <Write_Data>
	Write_Command(RAMWR_REG);
 8003e1a:	202c      	movs	r0, #44	; 0x2c
 8003e1c:	f7ff fef0 	bl	8003c00 <Write_Command>

}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <Draw_Rect>:


}


void Draw_Rect(uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color){
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	b093      	sub	sp, #76	; 0x4c
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4606      	mov	r6, r0
 8003e32:	4608      	mov	r0, r1
 8003e34:	4611      	mov	r1, r2
 8003e36:	461a      	mov	r2, r3
 8003e38:	4633      	mov	r3, r6
 8003e3a:	81fb      	strh	r3, [r7, #14]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	81bb      	strh	r3, [r7, #12]
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
 8003e44:	4613      	mov	r3, r2
 8003e46:	813b      	strh	r3, [r7, #8]
 8003e48:	466b      	mov	r3, sp
 8003e4a:	461e      	mov	r6, r3
	if(X0>X1){
 8003e4c:	89fa      	ldrh	r2, [r7, #14]
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d905      	bls.n	8003e60 <Draw_Rect+0x38>
		uint16_t temp1=X0;
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	87bb      	strh	r3, [r7, #60]	; 0x3c
		X0=X1;
 8003e58:	897b      	ldrh	r3, [r7, #10]
 8003e5a:	81fb      	strh	r3, [r7, #14]
		X1=temp1;
 8003e5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e5e:	817b      	strh	r3, [r7, #10]
	}

	if(Y0>Y1){
 8003e60:	89ba      	ldrh	r2, [r7, #12]
 8003e62:	893b      	ldrh	r3, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d905      	bls.n	8003e74 <Draw_Rect+0x4c>
		uint16_t temp2=Y0;
 8003e68:	89bb      	ldrh	r3, [r7, #12]
 8003e6a:	877b      	strh	r3, [r7, #58]	; 0x3a
		Y0=Y1;
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	81bb      	strh	r3, [r7, #12]
		Y1=temp2;
 8003e70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e72:	813b      	strh	r3, [r7, #8]
	}

	Set_Adress(X0, Y0, X1, Y1);
 8003e74:	893b      	ldrh	r3, [r7, #8]
 8003e76:	897a      	ldrh	r2, [r7, #10]
 8003e78:	89b9      	ldrh	r1, [r7, #12]
 8003e7a:	89f8      	ldrh	r0, [r7, #14]
 8003e7c:	f7ff ff78 	bl	8003d70 <Set_Adress>
	uint16_t X_size=X1-X0+1;
 8003e80:	897a      	ldrh	r2, [r7, #10]
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t Y_size=Y1-Y0+1;
 8003e8c:	893a      	ldrh	r2, [r7, #8]
 8003e8e:	89bb      	ldrh	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t colorA=color>>8;
 8003e98:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t colorB=color & 0xFF;
 8003ea4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003ea8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint32_t dataSize=X_size*Y_size*2;
 8003eac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003eae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t chunkDataSize=200*2; //even number
 8003eb8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t chunks=dataSize/chunkDataSize;
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t restDataSize=dataSize-chunks*chunkDataSize;
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	fb02 f303 	mul.w	r3, r2, r3
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t buff[chunkDataSize];
 8003ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed8:	460b      	mov	r3, r1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	00c3      	lsls	r3, r0, #3
 8003ef0:	6838      	ldr	r0, [r7, #0]
 8003ef2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	00c2      	lsls	r2, r0, #3
 8003efa:	2300      	movs	r3, #0
 8003efc:	468a      	mov	sl, r1
 8003efe:	469b      	mov	fp, r3
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f14:	1dcb      	adds	r3, r1, #7
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8003f1e:	466b      	mov	r3, sp
 8003f20:	3300      	adds	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
	uint8_t buffRest[restDataSize];
 8003f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f26:	460b      	mov	r3, r1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4699      	mov	r9, r3
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f46:	2300      	movs	r3, #0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	1dcb      	adds	r3, r1, #7
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	ebad 0d03 	sub.w	sp, sp, r3
 8003f66:	466b      	mov	r3, sp
 8003f68:	3300      	adds	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f70:	e00e      	b.n	8003f90 <Draw_Rect+0x168>
		buff[i]=colorA;
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	4413      	add	r3, r2
 8003f78:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8003f7c:	701a      	strb	r2, [r3, #0]
		buff[i+1]=colorB;
 8003f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f80:	3301      	adds	r3, #1
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003f88:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3ec      	bcc.n	8003f72 <Draw_Rect+0x14a>
	}
	for(uint32_t i =0;i<restDataSize;i+=2){
 8003f98:	2300      	movs	r3, #0
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	e00e      	b.n	8003fbc <Draw_Rect+0x194>
		buffRest[i]=colorA;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8003fa8:	701a      	strb	r2, [r3, #0]
		buffRest[i+1]=colorB;
 8003faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fac:	3301      	adds	r3, #1
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003fb4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<restDataSize;i+=2){
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	3302      	adds	r3, #2
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3ec      	bcc.n	8003f9e <Draw_Rect+0x176>
	}
	for(uint16_t i=0;i<chunks;i++){
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fc8:	e006      	b.n	8003fd8 <Draw_Rect+0x1b0>
		Write_Data(buff, chunkDataSize);
 8003fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fcc:	69f8      	ldr	r0, [r7, #28]
 8003fce:	f7ff fe73 	bl	8003cb8 <Write_Data>
	for(uint16_t i=0;i<chunks;i++){
 8003fd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d8f4      	bhi.n	8003fca <Draw_Rect+0x1a2>

	}
	Write_Data(buffRest, restDataSize);
 8003fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff fe68 	bl	8003cb8 <Write_Data>
 8003fe8:	46b5      	mov	sp, r6
}
 8003fea:	bf00      	nop
 8003fec:	374c      	adds	r7, #76	; 0x4c
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ff4 <XPT2046_TouchSelect>:
#endif



static void XPT2046_TouchSelect()
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ffe:	4802      	ldr	r0, [pc, #8]	; (8004008 <XPT2046_TouchSelect+0x14>)
 8004000:	f7fd fd2c 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020000 	.word	0x40020000

0800400c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port,  ADC_CS_Pin, GPIO_PIN_SET);
 8004010:	2201      	movs	r2, #1
 8004012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004016:	4802      	ldr	r0, [pc, #8]	; (8004020 <XPT2046_TouchUnselect+0x14>)
 8004018:	f7fd fd20 	bl	8001a5c <HAL_GPIO_WritePin>
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40020000 	.word	0x40020000

08004024 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ADC_IRQ_GPIO_Port, ADC_IRQ_Pin) == GPIO_PIN_RESET;
 8004028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800402c:	4805      	ldr	r0, [pc, #20]	; (8004044 <XPT2046_TouchPressed+0x20>)
 800402e:	f7fd fcfd 	bl	8001a2c <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
}
 800403e:	4618      	mov	r0, r3
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40020000 	.word	0x40020000

08004048 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 8004052:	f7ff ffcf 	bl	8003ff4 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8004062:	2300      	movs	r3, #0
 8004064:	77bb      	strb	r3, [r7, #30]
 8004066:	e03f      	b.n	80040e8 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8004068:	f7ff ffdc 	bl	8004024 <XPT2046_TouchPressed>
 800406c:	4603      	mov	r3, r0
 800406e:	f083 0301 	eor.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d13b      	bne.n	80040f0 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	3301      	adds	r3, #1
 800407c:	77fb      	strb	r3, [r7, #31]
        uint8_t y_raw[2];
        uint8_t x_raw[2];



        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800407e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004082:	2201      	movs	r2, #1
 8004084:	4945      	ldr	r1, [pc, #276]	; (800419c <XPT2046_TouchGetCoordinates+0x154>)
 8004086:	4846      	ldr	r0, [pc, #280]	; (80041a0 <XPT2046_TouchGetCoordinates+0x158>)
 8004088:	f7fe f9af 	bl	80023ea <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800408c:	f107 0210 	add.w	r2, r7, #16
 8004090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2302      	movs	r3, #2
 8004098:	4942      	ldr	r1, [pc, #264]	; (80041a4 <XPT2046_TouchGetCoordinates+0x15c>)
 800409a:	4841      	ldr	r0, [pc, #260]	; (80041a0 <XPT2046_TouchGetCoordinates+0x158>)
 800409c:	f7fe fae1 	bl	8002662 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040a4:	2201      	movs	r2, #1
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <XPT2046_TouchGetCoordinates+0x160>)
 80040a8:	483d      	ldr	r0, [pc, #244]	; (80041a0 <XPT2046_TouchGetCoordinates+0x158>)
 80040aa:	f7fe f99e 	bl	80023ea <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80040ae:	f107 020c 	add.w	r2, r7, #12
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2302      	movs	r3, #2
 80040ba:	493a      	ldr	r1, [pc, #232]	; (80041a4 <XPT2046_TouchGetCoordinates+0x15c>)
 80040bc:	4838      	ldr	r0, [pc, #224]	; (80041a0 <XPT2046_TouchGetCoordinates+0x158>)
 80040be:	f7fe fad0 	bl	8002662 <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80040c2:	7b3b      	ldrb	r3, [r7, #12]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	7b7a      	ldrb	r2, [r7, #13]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	461a      	mov	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	4413      	add	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80040d2:	7c3b      	ldrb	r3, [r7, #16]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	7c7a      	ldrb	r2, [r7, #17]
 80040d8:	4313      	orrs	r3, r2
 80040da:	461a      	mov	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	4413      	add	r3, r2
 80040e0:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 80040e2:	7fbb      	ldrb	r3, [r7, #30]
 80040e4:	3301      	adds	r3, #1
 80040e6:	77bb      	strb	r3, [r7, #30]
 80040e8:	7fbb      	ldrb	r3, [r7, #30]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d9bc      	bls.n	8004068 <XPT2046_TouchGetCoordinates+0x20>
 80040ee:	e000      	b.n	80040f2 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 80040f0:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 80040f2:	f7ff ff8b 	bl	800400c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d801      	bhi.n	8004100 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e049      	b.n	8004194 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f640 5247 	movw	r2, #3399	; 0xd47
 800410c:	4293      	cmp	r3, r2
 800410e:	d802      	bhi.n	8004116 <XPT2046_TouchGetCoordinates+0xce>
 8004110:	f640 5348 	movw	r3, #3400	; 0xd48
 8004114:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f247 1248 	movw	r2, #29000	; 0x7148
 800411c:	4293      	cmp	r3, r2
 800411e:	d902      	bls.n	8004126 <XPT2046_TouchGetCoordinates+0xde>
 8004120:	f247 1348 	movw	r3, #29000	; 0x7148
 8004124:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f640 42e3 	movw	r2, #3299	; 0xce3
 8004132:	4293      	cmp	r3, r2
 8004134:	d802      	bhi.n	800413c <XPT2046_TouchGetCoordinates+0xf4>
 8004136:	f640 43e4 	movw	r3, #3300	; 0xce4
 800413a:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f247 5230 	movw	r2, #30000	; 0x7530
 8004142:	4293      	cmp	r3, r2
 8004144:	d902      	bls.n	800414c <XPT2046_TouchGetCoordinates+0x104>
 8004146:	f247 5330 	movw	r3, #30000	; 0x7530
 800414a:	617b      	str	r3, [r7, #20]


#if (ORIENTATION == 0)
	*x = 240-(raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	f5a3 2347 	sub.w	r3, r3, #815104	; 0xc7000
 800415a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <XPT2046_TouchGetCoordinates+0x164>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	0b5b      	lsrs	r3, r3, #13
 8004166:	b29b      	uxth	r3, r3
 8004168:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004180:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <XPT2046_TouchGetCoordinates+0x168>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	b29a      	uxth	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3728      	adds	r7, #40	; 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	0800423c 	.word	0x0800423c
 80041a0:	200000e4 	.word	0x200000e4
 80041a4:	08004240 	.word	0x08004240
 80041a8:	08004244 	.word	0x08004244
 80041ac:	51eb851f 	.word	0x51eb851f
 80041b0:	4e8b8659 	.word	0x4e8b8659

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	; (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	; (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	; (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 f820 	bl	800420c <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	08004250 	.word	0x08004250
 80041f0:	08004250 	.word	0x08004250
 80041f4:	08004250 	.word	0x08004250
 80041f8:	08004254 	.word	0x08004254

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

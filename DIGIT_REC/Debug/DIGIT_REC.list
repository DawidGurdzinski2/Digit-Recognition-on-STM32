
DIGIT_REC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f78  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e4  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f4  0800a4f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4fc  0800a4fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4fc  0800a4fc  0001a4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000875c  20000018  0800a518  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008774  0800a518  00028774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001887c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004018  00000000  00000000  000388c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3e0  00000000  00000000  0003ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae30  00000000  00000000  0005a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009539b  00000000  00000000  00075110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a4ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c4  00000000  00000000  0010a4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090f8 	.word	0x080090f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080090f8 	.word	0x080090f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a98:	f000 b974 	b.w	8000d84 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	468e      	mov	lr, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14d      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	d969      	bls.n	8000b9c <__udivmoddi4+0xe8>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b152      	cbz	r2, 8000ae4 <__udivmoddi4+0x30>
 8000ace:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad2:	f1c2 0120 	rsb	r1, r2, #32
 8000ad6:	fa20 f101 	lsr.w	r1, r0, r1
 8000ada:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ade:	ea41 0e03 	orr.w	lr, r1, r3
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	fbbe f6f8 	udiv	r6, lr, r8
 8000aee:	fa1f f78c 	uxth.w	r7, ip
 8000af2:	fb08 e316 	mls	r3, r8, r6, lr
 8000af6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000afa:	fb06 f107 	mul.w	r1, r6, r7
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b0a:	f080 811f 	bcs.w	8000d4c <__udivmoddi4+0x298>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 811c 	bls.w	8000d4c <__udivmoddi4+0x298>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3310 	mls	r3, r8, r0, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb00 f707 	mul.w	r7, r0, r7
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x92>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b38:	f080 810a 	bcs.w	8000d50 <__udivmoddi4+0x29c>
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	f240 8107 	bls.w	8000d50 <__udivmoddi4+0x29c>
 8000b42:	4464      	add	r4, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	b11d      	cbz	r5, 8000b58 <__udivmoddi4+0xa4>
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	2300      	movs	r3, #0
 8000b54:	e9c5 4300 	strd	r4, r3, [r5]
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xc2>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	f000 80ef 	beq.w	8000d46 <__udivmoddi4+0x292>
 8000b68:	2600      	movs	r6, #0
 8000b6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f683 	clz	r6, r3
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d14a      	bne.n	8000c14 <__udivmoddi4+0x160>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd4>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80f9 	bhi.w	8000d7a <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469e      	mov	lr, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa4>
 8000b96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xec>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8092 	bne.w	8000cce <__udivmoddi4+0x21a>
 8000baa:	eba1 010c 	sub.w	r1, r1, ip
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	0c20      	lsrs	r0, r4, #16
 8000bba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bbe:	fb07 1113 	mls	r1, r7, r3, r1
 8000bc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc6:	fb0e f003 	mul.w	r0, lr, r3
 8000bca:	4288      	cmp	r0, r1
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x12c>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x12a>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2c0>
 8000bde:	4643      	mov	r3, r8
 8000be0:	1a09      	subs	r1, r1, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x156>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x154>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x9a>
 8000c14:	f1c6 0720 	rsb	r7, r6, #32
 8000c18:	40b3      	lsls	r3, r6
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa20 f407 	lsr.w	r4, r0, r7
 8000c26:	fa01 f306 	lsl.w	r3, r1, r6
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	40f9      	lsrs	r1, r7
 8000c2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c32:	fa00 f306 	lsl.w	r3, r0, r6
 8000c36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c3a:	0c20      	lsrs	r0, r4, #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fb09 1118 	mls	r1, r9, r8, r1
 8000c44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c48:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b8>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2bc>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2bc>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4461      	add	r1, ip
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c74:	fb09 1110 	mls	r1, r9, r0, r1
 8000c78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	458e      	cmp	lr, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1e2>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2b4>
 8000c8e:	458e      	cmp	lr, r1
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2b4>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46a6      	mov	lr, r4
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x2a4>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x2a0>
 8000cac:	b15d      	cbz	r5, 8000cc6 <__udivmoddi4+0x212>
 8000cae:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cba:	fa22 f306 	lsr.w	r3, r2, r6
 8000cbe:	40f1      	lsrs	r1, r6
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	40d8      	lsrs	r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cec:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf0:	0c0b      	lsrs	r3, r1, #16
 8000cf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x260>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b8>
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b8>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1b9b      	subs	r3, r3, r6
 8000d16:	b289      	uxth	r1, r1
 8000d18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb06 f30e 	mul.w	r3, r6, lr
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x28a>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2b0>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2b0>
 8000d3a:	3e02      	subs	r6, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	1ac9      	subs	r1, r1, r3
 8000d40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0x104>
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e705      	b.n	8000b58 <__udivmoddi4+0xa4>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e3      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6f8      	b.n	8000b46 <__udivmoddi4+0x92>
 8000d54:	454b      	cmp	r3, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f8>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f8>
 8000d64:	4646      	mov	r6, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x28a>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1e2>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x260>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b8>
 8000d74:	3b02      	subs	r3, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x12c>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e709      	b.n	8000b92 <__udivmoddi4+0xde>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x156>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_DMA_Init+0x5c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <MX_DMA_Init+0x5c>)
 8000d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_DMA_Init+0x5c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	203a      	movs	r0, #58	; 0x3a
 8000db0:	f001 f807 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000db4:	203a      	movs	r0, #58	; 0x3a
 8000db6:	f001 f820 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	203b      	movs	r0, #59	; 0x3b
 8000dc0:	f000 ffff 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000dc4:	203b      	movs	r0, #59	; 0x3b
 8000dc6:	f001 f818 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2045      	movs	r0, #69	; 0x45
 8000dd0:	f000 fff7 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000dd4:	2045      	movs	r0, #69	; 0x45
 8000dd6:	f001 f810 	bl	8001dfa <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000e58:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <MX_GPIO_Init+0xec>)
 8000e5a:	f001 fd23 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin|W25Q64_CS_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2143      	movs	r1, #67	; 0x43
 8000e62:	481d      	ldr	r0, [pc, #116]	; (8000ed8 <MX_GPIO_Init+0xf0>)
 8000e64:	f001 fd1e 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <MX_GPIO_Init+0xf0>)
 8000e6e:	f001 fd19 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|ADC_CS_Pin;
 8000e72:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0xec>)
 8000e8c:	f001 fb6e 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_LED_Pin|W25Q64_CS_Pin;
 8000e90:	2347      	movs	r3, #71	; 0x47
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0xf0>)
 8000ea8:	f001 fb60 	bl	800256c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_GPIO_Init+0xec>)
 8000ec2:	f001 fb53 	bl	800256c <HAL_GPIO_Init>

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	00000000 	.word	0x00000000

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b0cd      	sub	sp, #308	; 0x134
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fdfb 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f98f 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f7ff ff7b 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef2:	f7ff ff49 	bl	8000d88 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ef6:	f000 fb07 	bl	8001508 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000efa:	f000 fb3d 	bl	8001578 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000efe:	f000 fb71 	bl	80015e4 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000f02:	f000 fd55 	bl	80019b0 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8000f06:	f000 f9ef 	bl	80012e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f0a:	f005 f963 	bl	80061d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //inicjalizacja timera do odliczania czasu
  HAL_TIM_Base_Start(&htim2);//1cnt =100 us
 8000f0e:	48b0      	ldr	r0, [pc, #704]	; (80011d0 <main+0x2f0>)
 8000f10:	f004 f984 	bl	800521c <HAL_TIM_Base_Start>
  //inicjalizacja ekranu
  ST7789V_Init(&ST7789VDrv);
 8000f14:	48af      	ldr	r0, [pc, #700]	; (80011d4 <main+0x2f4>)
 8000f16:	f006 faf3 	bl	8007500 <ST7789V_Init>
  //inicjalizacja struktury z pamiecia zawierajaca wartosci obaszrów 28x28
  DataStruct=CreateChunkMatrix(buff);
 8000f1a:	4caf      	ldr	r4, [pc, #700]	; (80011d8 <main+0x2f8>)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	49af      	ldr	r1, [pc, #700]	; (80011dc <main+0x2fc>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fb87 	bl	8006634 <CreateChunkMatrix>
 8000f26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  //inicjalizacja pamieci
  W25Q64_Init(&w25q64);
 8000f34:	48aa      	ldr	r0, [pc, #680]	; (80011e0 <main+0x300>)
 8000f36:	f007 ff33 	bl	8008da0 <W25Q64_Init>
  //odswiezenie/wyswietlenie menu na ekranie
  RefreshMenu(&ST7789VDrv, &DataStruct);
 8000f3a:	49a7      	ldr	r1, [pc, #668]	; (80011d8 <main+0x2f8>)
 8000f3c:	48a5      	ldr	r0, [pc, #660]	; (80011d4 <main+0x2f4>)
 8000f3e:	f005 ffe7 	bl	8006f10 <RefreshMenu>
   ///////////////////////////////////////////////////////////////////
#ifdef SD_PROBLEM
//wgrywanie danych z karty sd nie ma
	uint8_t pagebuff[256];
	uint8_t testarr2[8];
	SplitDouble(0.012, testarr2);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 80011c8 <main+0x2e8>
 8000f4c:	f007 fe5e 	bl	8008c0c <SplitDouble>

	for(uint8_t i=0;i<32;i++){
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8000f56:	e073      	b.n	8001040 <main+0x160>
		pagebuff[i*8]=testarr2[0];
 8000f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f62:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000f66:	7811      	ldrb	r1, [r2, #0]
 8000f68:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f6c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f70:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+1]=testarr2[1];
 8000f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f7e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000f82:	7851      	ldrb	r1, [r2, #1]
 8000f84:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f88:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f8c:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+2]=testarr2[2];
 8000f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	3302      	adds	r3, #2
 8000f96:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f9a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000f9e:	7891      	ldrb	r1, [r2, #2]
 8000fa0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fa4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fa8:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+3]=testarr2[3];
 8000faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fb6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000fba:	78d1      	ldrb	r1, [r2, #3]
 8000fbc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fc0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fc4:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+4]=testarr2[4];
 8000fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	3304      	adds	r3, #4
 8000fce:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fd2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000fd6:	7911      	ldrb	r1, [r2, #4]
 8000fd8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fdc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fe0:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+5]=testarr2[5];
 8000fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	3305      	adds	r3, #5
 8000fea:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fee:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000ff2:	7951      	ldrb	r1, [r2, #5]
 8000ff4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000ff8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000ffc:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+6]=testarr2[6];
 8000ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	3306      	adds	r3, #6
 8001006:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800100a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800100e:	7991      	ldrb	r1, [r2, #6]
 8001010:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001014:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001018:	54d1      	strb	r1, [r2, r3]
		pagebuff[i*8+7]=testarr2[7];
 800101a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	3307      	adds	r3, #7
 8001022:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001026:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800102a:	79d1      	ldrb	r1, [r2, #7]
 800102c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001030:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001034:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<32;i++){
 8001036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800103a:	3301      	adds	r3, #1
 800103c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001044:	2b1f      	cmp	r3, #31
 8001046:	d987      	bls.n	8000f58 <main+0x78>

#endif
///////////////////////////////////////////////////////////////////

	//wczytywanie oraz czyszczenie pamieci
	uint8_t program_memeory =0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	if(program_memeory){
 800104e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001052:	2b00      	cmp	r3, #0
 8001054:	d04a      	beq.n	80010ec <main+0x20c>
		//czyszczenie pamieci wraz z paskem postepu (warto bo czyszczenie trawa okolo 5 minut)
		Print_Info_MEM_CL(&ST7789VDrv);
 8001056:	485f      	ldr	r0, [pc, #380]	; (80011d4 <main+0x2f4>)
 8001058:	f006 f8f8 	bl	800724c <Print_Info_MEM_CL>
		for(uint32_t i=0;i<2638;i++){
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001062:	e016      	b.n	8001092 <main+0x1b2>
			W25Q64_SectorErase(&w25q64,i);
 8001064:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001068:	b29b      	uxth	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	485c      	ldr	r0, [pc, #368]	; (80011e0 <main+0x300>)
 800106e:	f007 ff57 	bl	8008f20 <W25Q64_SectorErase>
			Print_Proc_10(&ST7789VDrv, i/200);
 8001072:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001076:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <main+0x304>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	4854      	ldr	r0, [pc, #336]	; (80011d4 <main+0x2f4>)
 8001084:	f006 f9f2 	bl	800746c <Print_Proc_10>
		for(uint32_t i=0;i<2638;i++){
 8001088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800108c:	3301      	adds	r3, #1
 800108e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001092:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001096:	f640 224d 	movw	r2, #2637	; 0xa4d
 800109a:	4293      	cmp	r3, r2
 800109c:	d9e2      	bls.n	8001064 <main+0x184>
		}
		Print_Info_MEM_WR(&ST7789VDrv);
 800109e:	484d      	ldr	r0, [pc, #308]	; (80011d4 <main+0x2f4>)
 80010a0:	f006 f95a 	bl	8007358 <Print_Info_MEM_WR>
		for(uint32_t i=0;i<42203;i++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010aa:	e019      	b.n	80010e0 <main+0x200>
		//wczytywnaie danych do pamieci wraz z paskem postepu
			W25Q64_PageProgram(&w25q64,W25Q64_PAGE_SIZE*i, pagebuff, 256);
 80010ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010b0:	0219      	lsls	r1, r3, #8
 80010b2:	f107 0218 	add.w	r2, r7, #24
 80010b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ba:	4849      	ldr	r0, [pc, #292]	; (80011e0 <main+0x300>)
 80010bc:	f007 ff65 	bl	8008f8a <W25Q64_PageProgram>
			Print_Proc_10(&ST7789VDrv, i/3200);
 80010c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <main+0x304>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0a9b      	lsrs	r3, r3, #10
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	4840      	ldr	r0, [pc, #256]	; (80011d4 <main+0x2f4>)
 80010d2:	f006 f9cb 	bl	800746c <Print_Proc_10>
		for(uint32_t i=0;i<42203;i++){
 80010d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010da:	3301      	adds	r3, #1
 80010dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010e4:	f24a 42da 	movw	r2, #42202	; 0xa4da
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d9df      	bls.n	80010ac <main+0x1cc>
		}
	}
	//odswiezamy menu
	RefreshMenu(&ST7789VDrv, &DataStruct);
 80010ec:	493a      	ldr	r1, [pc, #232]	; (80011d8 <main+0x2f8>)
 80010ee:	4839      	ldr	r0, [pc, #228]	; (80011d4 <main+0x2f4>)
 80010f0:	f005 ff0e 	bl	8006f10 <RefreshMenu>
	//inicjalizujemy siec neuronowa
	INIT_NETINFO(&net_info);
 80010f4:	483c      	ldr	r0, [pc, #240]	; (80011e8 <main+0x308>)
 80010f6:	f006 fe72 	bl	8007dde <INIT_NETINFO>
	Init_Net(&DNN, &layer1, &layer2, &layer3);
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <main+0x30c>)
 80010fc:	4a3c      	ldr	r2, [pc, #240]	; (80011f0 <main+0x310>)
 80010fe:	493d      	ldr	r1, [pc, #244]	; (80011f4 <main+0x314>)
 8001100:	483d      	ldr	r0, [pc, #244]	; (80011f8 <main+0x318>)
 8001102:	f007 fd5b 	bl	8008bbc <Init_Net>
	Init_ForwardPass(&SI_algorithm, &DNN, &net_info,&w25q64);
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <main+0x300>)
 8001108:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <main+0x308>)
 800110a:	493b      	ldr	r1, [pc, #236]	; (80011f8 <main+0x318>)
 800110c:	483b      	ldr	r0, [pc, #236]	; (80011fc <main+0x31c>)
 800110e:	f006 feaf 	bl	8007e70 <Init_ForwardPass>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {		//XPT2046 Pooluje dane  adc wykonuje funckje loop jka kordynaty sie mieniły
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 8001112:	493b      	ldr	r1, [pc, #236]	; (8001200 <main+0x320>)
 8001114:	483b      	ldr	r0, [pc, #236]	; (8001204 <main+0x324>)
 8001116:	f006 fd51 	bl	8007bbc <XPT2046_TouchGetCoordinates>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f8      	beq.n	8001112 <main+0x232>
		  forwardpropagation=LoopScreen(&ST7789VDrv, &DataStruct, PosX, PosY);
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <main+0x324>)
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <main+0x320>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	492b      	ldr	r1, [pc, #172]	; (80011d8 <main+0x2f8>)
 800112a:	482a      	ldr	r0, [pc, #168]	; (80011d4 <main+0x2f4>)
 800112c:	f005 ff3e 	bl	8006fac <LoopScreen>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <main+0x328>)
 8001136:	701a      	strb	r2, [r3, #0]
		  if(forwardpropagation){
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <main+0x328>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0e7      	beq.n	8001112 <main+0x232>
			  //odwrocenie tablicy
			  Invert_Array(buff, 784);
 8001142:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001146:	4825      	ldr	r0, [pc, #148]	; (80011dc <main+0x2fc>)
 8001148:	f007 fda6 	bl	8008c98 <Invert_Array>
			  Print_Info_Calc(&ST7789VDrv);
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <main+0x2f4>)
 800114e:	f005 fff7 	bl	8007140 <Print_Info_Calc>
			  //obliczanie sieci
			  //rysyowane prostokaty imituja pasek ladowania
			  FP_Load_Input(&SI_algorithm, buff);
 8001152:	4922      	ldr	r1, [pc, #136]	; (80011dc <main+0x2fc>)
 8001154:	4829      	ldr	r0, [pc, #164]	; (80011fc <main+0x31c>)
 8001156:	f006 fea3 	bl	8007ea0 <FP_Load_Input>
			  ST7789V_DrawRect(&ST7789VDrv, 40, 210, 80 ,250, RED);
 800115a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	23fa      	movs	r3, #250	; 0xfa
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2350      	movs	r3, #80	; 0x50
 8001166:	22d2      	movs	r2, #210	; 0xd2
 8001168:	2128      	movs	r1, #40	; 0x28
 800116a:	481a      	ldr	r0, [pc, #104]	; (80011d4 <main+0x2f4>)
 800116c:	f006 fb8d 	bl	800788a <ST7789V_DrawRect>
			  FP_Forward_PassFirstLayer(&SI_algorithm);
 8001170:	4822      	ldr	r0, [pc, #136]	; (80011fc <main+0x31c>)
 8001172:	f007 f849 	bl	8008208 <FP_Forward_PassFirstLayer>
			  ST7789V_DrawRect(&ST7789VDrv, 100, 210, 140 ,250, RED);
 8001176:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	23fa      	movs	r3, #250	; 0xfa
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	238c      	movs	r3, #140	; 0x8c
 8001182:	22d2      	movs	r2, #210	; 0xd2
 8001184:	2164      	movs	r1, #100	; 0x64
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <main+0x2f4>)
 8001188:	f006 fb7f 	bl	800788a <ST7789V_DrawRect>
			  FP_Forward_PassSecondLayer(&SI_algorithm);
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <main+0x31c>)
 800118e:	f007 fa4c 	bl	800862a <FP_Forward_PassSecondLayer>
			  ST7789V_DrawRect(&ST7789VDrv, 160, 210, 200 ,250, RED);
 8001192:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	23fa      	movs	r3, #250	; 0xfa
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	23c8      	movs	r3, #200	; 0xc8
 800119e:	22d2      	movs	r2, #210	; 0xd2
 80011a0:	21a0      	movs	r1, #160	; 0xa0
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <main+0x2f4>)
 80011a4:	f006 fb71 	bl	800788a <ST7789V_DrawRect>
			  FP_Forward_PassThirdLayer(&SI_algorithm);
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <main+0x31c>)
 80011aa:	f007 fc51 	bl	8008a50 <FP_Forward_PassThirdLayer>
			  uint8_t result =FP_Retrun_Result(&SI_algorithm);
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <main+0x31c>)
 80011b0:	f007 fcc2 	bl	8008b38 <FP_Retrun_Result>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
			  //wyswietlenie wyniku
			  Print_Result(&ST7789VDrv, result);
 80011ba:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80011be:	4619      	mov	r1, r3
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <main+0x2f4>)
 80011c2:	f005 ff5f 	bl	8007084 <Print_Result>
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 80011c6:	e7a4      	b.n	8001112 <main+0x232>
 80011c8:	bc6a7efa 	.word	0xbc6a7efa
 80011cc:	3f889374 	.word	0x3f889374
 80011d0:	20008704 	.word	0x20008704
 80011d4:	20000044 	.word	0x20000044
 80011d8:	20000034 	.word	0x20000034
 80011dc:	20008140 	.word	0x20008140
 80011e0:	20000064 	.word	0x20000064
 80011e4:	51eb851f 	.word	0x51eb851f
 80011e8:	200000e8 	.word	0x200000e8
 80011ec:	20000080 	.word	0x20000080
 80011f0:	2000007c 	.word	0x2000007c
 80011f4:	20000078 	.word	0x20000078
 80011f8:	20000088 	.word	0x20000088
 80011fc:	20000130 	.word	0x20000130
 8001200:	20008452 	.word	0x20008452
 8001204:	20008450 	.word	0x20008450
 8001208:	20008454 	.word	0x20008454

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 ff64 	bl	80090e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <SystemClock_Config+0xc8>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <SystemClock_Config+0xc8>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <SystemClock_Config+0xcc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <SystemClock_Config+0xcc>)
 8001256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800127c:	230c      	movs	r3, #12
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001288:	2305      	movs	r3, #5
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fb21 	bl	80028d8 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800129c:	f000 f81e 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2103      	movs	r1, #3
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fd83 	bl	8002dc8 <HAL_RCC_ClockConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012c8:	f000 f808 	bl	80012dc <Error_Handler>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3750      	adds	r7, #80	; 0x50
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012ee:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <MX_SDIO_SD_Init+0x3c>)
 80012f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <MX_SDIO_SD_Init+0x38>)
 8001312:	2205      	movs	r2, #5
 8001314:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20008458 	.word	0x20008458
 8001324:	40012c00 	.word	0x40012c00

08001328 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	; (80014e8 <HAL_SD_MspInit+0x1c0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	f040 80c9 	bne.w	80014de <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	4b66      	ldr	r3, [pc, #408]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	4a65      	ldr	r2, [pc, #404]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 8001356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800135a:	6453      	str	r3, [r2, #68]	; 0x44
 800135c:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a5e      	ldr	r2, [pc, #376]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
 8001378:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <HAL_SD_MspInit+0x1c4>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013b0:	230c      	movs	r3, #12
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	484d      	ldr	r0, [pc, #308]	; (80014f0 <HAL_SD_MspInit+0x1c8>)
 80013bc:	f001 f8d6 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7;
 80013c0:	f248 0380 	movw	r3, #32896	; 0x8080
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013d2:	230c      	movs	r3, #12
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4845      	ldr	r0, [pc, #276]	; (80014f4 <HAL_SD_MspInit+0x1cc>)
 80013de:	f001 f8c5 	bl	800256c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80013e2:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 80013e4:	4a45      	ldr	r2, [pc, #276]	; (80014fc <HAL_SD_MspInit+0x1d4>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 80013ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001402:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001404:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001416:	2220      	movs	r2, #32
 8001418:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001422:	2204      	movs	r2, #4
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001428:	2203      	movs	r2, #3
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 800142e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001436:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800143c:	482e      	ldr	r0, [pc, #184]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 800143e:	f000 fcf7 	bl	8001e30 <HAL_DMA_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001448:	f7ff ff48 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
 8001452:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_SD_MspInit+0x1d0>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 800145a:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <HAL_SD_MspInit+0x1dc>)
 800145c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001464:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001468:	2240      	movs	r2, #64	; 0x40
 800146a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001478:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 800147c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001480:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001484:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001488:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 800148c:	2220      	movs	r2, #32
 800148e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 8001498:	2204      	movs	r2, #4
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 800149e:	2203      	movs	r2, #3
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 80014a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 80014ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 80014b4:	f000 fcbc 	bl	8001e30 <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80014be:	f7ff ff0d 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_SD_MspInit+0x1d8>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2031      	movs	r0, #49	; 0x31
 80014d4:	f000 fc75 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80014d8:	2031      	movs	r0, #49	; 0x31
 80014da:	f000 fc8e 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	200084dc 	.word	0x200084dc
 80014fc:	40026458 	.word	0x40026458
 8001500:	2000853c 	.word	0x2000853c
 8001504:	400264a0 	.word	0x400264a0

08001508 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SPI1_Init+0x68>)
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <MX_SPI1_Init+0x6c>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI1_Init+0x68>)
 8001514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_SPI1_Init+0x68>)
 800151c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001520:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_SPI1_Init+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_SPI1_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_SPI1_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_SPI1_Init+0x68>)
 8001536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI1_Init+0x68>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_SPI1_Init+0x68>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI1_Init+0x68>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_SPI1_Init+0x68>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI1_Init+0x68>)
 8001556:	220a      	movs	r2, #10
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_SPI1_Init+0x68>)
 800155c:	f002 ff10 	bl	8004380 <HAL_SPI_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001566:	f7ff feb9 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000859c 	.word	0x2000859c
 8001574:	40013000 	.word	0x40013000

08001578 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_SPI3_Init+0x64>)
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <MX_SPI3_Init+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI3_Init+0x64>)
 8001584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001588:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI3_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_SPI3_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI3_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI3_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI3_Init+0x64>)
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI3_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_SPI3_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI3_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_SPI3_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI3_Init+0x64>)
 80015c4:	220a      	movs	r2, #10
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_SPI3_Init+0x64>)
 80015ca:	f002 fed9 	bl	8004380 <HAL_SPI_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80015d4:	f7ff fe82 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200085f4 	.word	0x200085f4
 80015e0:	40003c00 	.word	0x40003c00

080015e4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI4_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI4_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI4_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI4_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI4_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI4_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI4_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI4_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI4_Init+0x64>)
 8001618:	2228      	movs	r2, #40	; 0x28
 800161a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI4_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI4_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI4_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI4_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI4_Init+0x64>)
 8001636:	f002 fea3 	bl	8004380 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001640:	f7ff fe4c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000864c 	.word	0x2000864c
 800164c:	40013400 	.word	0x40013400

08001650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a82      	ldr	r2, [pc, #520]	; (8001878 <HAL_SPI_MspInit+0x228>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d15a      	bne.n	8001728 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	4b81      	ldr	r3, [pc, #516]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a80      	ldr	r2, [pc, #512]	; (800187c <HAL_SPI_MspInit+0x22c>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b7e      	ldr	r3, [pc, #504]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a79      	ldr	r2, [pc, #484]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b77      	ldr	r3, [pc, #476]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016aa:	23a0      	movs	r3, #160	; 0xa0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ba:	2305      	movs	r3, #5
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	486e      	ldr	r0, [pc, #440]	; (8001880 <HAL_SPI_MspInit+0x230>)
 80016c6:	f000 ff51 	bl	800256c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80016ca:	4b6e      	ldr	r3, [pc, #440]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016cc:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <HAL_SPI_MspInit+0x238>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80016d0:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b69      	ldr	r3, [pc, #420]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b64      	ldr	r3, [pc, #400]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_SPI_MspInit+0x234>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_SPI_MspInit+0x234>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001704:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_SPI_MspInit+0x234>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800170a:	485e      	ldr	r0, [pc, #376]	; (8001884 <HAL_SPI_MspInit+0x234>)
 800170c:	f000 fb90 	bl	8001e30 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001716:	f7ff fde1 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a59      	ldr	r2, [pc, #356]	; (8001884 <HAL_SPI_MspInit+0x234>)
 800171e:	649a      	str	r2, [r3, #72]	; 0x48
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_SPI_MspInit+0x234>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001726:	e0a3      	b.n	8001870 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_SPI_MspInit+0x23c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d13d      	bne.n	80017ae <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b51      	ldr	r3, [pc, #324]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a50      	ldr	r2, [pc, #320]	; (800187c <HAL_SPI_MspInit+0x22c>)
 800173c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800177c:	2307      	movs	r3, #7
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4842      	ldr	r0, [pc, #264]	; (8001890 <HAL_SPI_MspInit+0x240>)
 8001788:	f000 fef0 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800178c:	2330      	movs	r3, #48	; 0x30
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800179c:	2306      	movs	r3, #6
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	483a      	ldr	r0, [pc, #232]	; (8001890 <HAL_SPI_MspInit+0x240>)
 80017a8:	f000 fee0 	bl	800256c <HAL_GPIO_Init>
}
 80017ac:	e060      	b.n	8001870 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI4)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <HAL_SPI_MspInit+0x244>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d15b      	bne.n	8001870 <HAL_SPI_MspInit+0x220>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c6:	6453      	str	r3, [r2, #68]	; 0x44
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_SPI_MspInit+0x22c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_SPI_MspInit+0x22c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800180c:	2302      	movs	r3, #2
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800181c:	2305      	movs	r3, #5
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <HAL_SPI_MspInit+0x230>)
 8001828:	f000 fea0 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800182c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800183e:	2306      	movs	r3, #6
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4811      	ldr	r0, [pc, #68]	; (8001890 <HAL_SPI_MspInit+0x240>)
 800184a:	f000 fe8f 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800184e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001860:	2306      	movs	r3, #6
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <HAL_SPI_MspInit+0x230>)
 800186c:	f000 fe7e 	bl	800256c <HAL_GPIO_Init>
}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013000 	.word	0x40013000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	200086a4 	.word	0x200086a4
 8001888:	40026440 	.word	0x40026440
 800188c:	40003c00 	.word	0x40003c00
 8001890:	40020400 	.word	0x40020400
 8001894:	40013400 	.word	0x40013400

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_MspInit+0x4c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f926 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <SDIO_IRQHandler+0x10>)
 8001942:	f001 fe65 	bl	8003610 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20008458 	.word	0x20008458

08001950 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <DMA2_Stream2_IRQHandler+0x10>)
 8001956:	f000 fb93 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200086a4 	.word	0x200086a4

08001964 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <DMA2_Stream3_IRQHandler+0x10>)
 800196a:	f000 fb89 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200084dc 	.word	0x200084dc

08001978 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA2_Stream6_IRQHandler+0x10>)
 800197e:	f000 fb7f 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000853c 	.word	0x2000853c

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80019da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <MX_TIM2_Init+0x98>)
 80019f8:	f003 fbc0 	bl	800517c <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a02:	f7ff fc6b 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM2_Init+0x98>)
 8001a14:	f003 fc5c 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a1e:	f7ff fc5d 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_TIM2_Init+0x98>)
 8001a30:	f003 fe30 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a3a:	f7ff fc4f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20008704 	.word	0x20008704

08001a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d10d      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_TIM_Base_MspInit+0x3c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_TIM_Base_MspInit+0x3c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_TIM_Base_MspInit+0x3c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a92:	490e      	ldr	r1, [pc, #56]	; (8001acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa8:	4c0b      	ldr	r4, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff ff69 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f007 faf1 	bl	80090a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fa0f 	bl	8000ee0 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ad0:	0800a504 	.word	0x0800a504
  ldr r2, =_sbss
 8001ad4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ad8:	20008774 	.word	0x20008774

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f94f 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fec0 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f967 	bl	8001e16 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f000 f92f 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000874c 	.word	0x2000874c

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000874c 	.word	0x2000874c

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff feb6 	bl	8001bac <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e099      	b.n	8001f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6c:	e00f      	b.n	8001e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6e:	f7ff fe9d 	bl	8001bac <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d908      	bls.n	8001e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2203      	movs	r2, #3
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e078      	b.n	8001f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e8      	bne.n	8001e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_DMA_Init+0x158>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f023 0307 	bic.w	r3, r3, #7
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d117      	bne.n	8001f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fa9d 	bl	8002474 <DMA_CheckFifoParam>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e016      	b.n	8001f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fa54 	bl	8002408 <DMA_CalcBaseAndBitshift>
 8001f60:	4603      	mov	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	f010803f 	.word	0xf010803f

08001f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Start_IT+0x26>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e040      	b.n	8002034 <HAL_DMA_Start_IT+0xa8>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d12f      	bne.n	8002026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9e6 	bl	80023ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	223f      	movs	r2, #63	; 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0216 	orr.w	r2, r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0208 	orr.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e005      	b.n	8002032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800208c:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <HAL_DMA_IRQHandler+0x248>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a8e      	ldr	r2, [pc, #568]	; (80022cc <HAL_DMA_IRQHandler+0x24c>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2208      	movs	r2, #8
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2204      	movs	r2, #4
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2210      	movs	r2, #16
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d043      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2210      	movs	r2, #16
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d018      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d024      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e01f      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2220      	movs	r2, #32
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 808f 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8087 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2220      	movs	r2, #32
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d136      	bne.n	8002298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0216 	bic.w	r2, r2, #22
 8002238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_DMA_IRQHandler+0x1da>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	223f      	movs	r2, #63	; 0x3f
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07e      	beq.n	800238c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
        }
        return;
 8002296:	e079      	b.n	800238c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d031      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e02c      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000
 80022cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e01e      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	d032      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d022      	beq.n	800237a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2205      	movs	r2, #5
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d307      	bcc.n	8002368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f2      	bne.n	800234c <HAL_DMA_IRQHandler+0x2cc>
 8002366:	e000      	b.n	800236a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e000      	b.n	800238e <HAL_DMA_IRQHandler+0x30e>
        return;
 800238c:	bf00      	nop
    }
  }
}
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d108      	bne.n	80023ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ea:	e007      	b.n	80023fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3b10      	subs	r3, #16
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <DMA_CalcBaseAndBitshift+0x64>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <DMA_CalcBaseAndBitshift+0x68>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d909      	bls.n	800244a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
 8002448:	e007      	b.n	800245a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	aaaaaaab 	.word	0xaaaaaaab
 8002470:	08009180 	.word	0x08009180

08002474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d856      	bhi.n	8002542 <DMA_CheckFifoParam+0xce>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <DMA_CheckFifoParam+0x28>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024bf 	.word	0x080024bf
 80024a4:	080024ad 	.word	0x080024ad
 80024a8:	08002543 	.word	0x08002543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d046      	beq.n	8002546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024bc:	e043      	b.n	8002546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c6:	d140      	bne.n	800254a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e03d      	b.n	800254a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d121      	bne.n	800251c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d837      	bhi.n	800254e <DMA_CheckFifoParam+0xda>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x70>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080024fb 	.word	0x080024fb
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	0800250d 	.word	0x0800250d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e030      	b.n	800255c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d025      	beq.n	8002552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250a:	e022      	b.n	8002552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002514:	d11f      	bne.n	8002556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251a:	e01c      	b.n	8002556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d903      	bls.n	800252a <DMA_CheckFifoParam+0xb6>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d003      	beq.n	8002530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002528:	e018      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      break;
 800252e:	e015      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e00b      	b.n	800255a <DMA_CheckFifoParam+0xe6>
      break;
 8002542:	bf00      	nop
 8002544:	e00a      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e008      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e006      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e004      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;   
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
    }
  } 
  
  return status; 
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e159      	b.n	800283c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 8148 	bne.w	8002836 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a2 	beq.w	8002836 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b57      	ldr	r3, [pc, #348]	; (8002854 <HAL_GPIO_Init+0x2e8>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_GPIO_Init+0x2e8>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b54      	ldr	r3, [pc, #336]	; (8002854 <HAL_GPIO_Init+0x2e8>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270e:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_GPIO_Init+0x2ec>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a49      	ldr	r2, [pc, #292]	; (800285c <HAL_GPIO_Init+0x2f0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x202>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a48      	ldr	r2, [pc, #288]	; (8002860 <HAL_GPIO_Init+0x2f4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x1fe>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a47      	ldr	r2, [pc, #284]	; (8002864 <HAL_GPIO_Init+0x2f8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x1fa>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a46      	ldr	r2, [pc, #280]	; (8002868 <HAL_GPIO_Init+0x2fc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x1f6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a45      	ldr	r2, [pc, #276]	; (800286c <HAL_GPIO_Init+0x300>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x1f2>
 800275a:	2304      	movs	r3, #4
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x204>
 800275e:	2307      	movs	r3, #7
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x204>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x204>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x204>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x204>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_GPIO_Init+0x2ec>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_GPIO_Init+0x304>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a2f      	ldr	r2, [pc, #188]	; (8002870 <HAL_GPIO_Init+0x304>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_GPIO_Init+0x304>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <HAL_GPIO_Init+0x304>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_GPIO_Init+0x304>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002806:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x304>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_GPIO_Init+0x304>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_GPIO_Init+0x304>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f aea2 	bls.w	8002588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e267      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d075      	beq.n	80029e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f6:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d00c      	beq.n	800291c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290a:	2b08      	cmp	r3, #8
 800290c:	d112      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b82      	ldr	r3, [pc, #520]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b7e      	ldr	r3, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05b      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e242      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x74>
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a75      	ldr	r2, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6f      	ldr	r2, [pc, #444]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6c      	ldr	r2, [pc, #432]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f90c 	bl	8001bac <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff f908 	bl	8001bac <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e207      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xc0>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff f8f8 	bl	8001bac <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7ff f8f4 	bl	8001bac <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1f3      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0xe8>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d063      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ee:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1c7      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e03a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7ff f8ad 	bl	8001bac <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a56:	f7ff f8a9 	bl	8001bac <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1a8      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4925      	ldr	r1, [pc, #148]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7ff f88c 	bl	8001bac <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a98:	f7ff f888 	bl	8001bac <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e187      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d036      	beq.n	8002b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7ff f86c 	bl	8001bac <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7ff f868 	bl	8001bac <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e167      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x200>
 8002af6:	e01b      	b.n	8002b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7ff f855 	bl	8001bac <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	e00e      	b.n	8002b24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b06:	f7ff f851 	bl	8001bac <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d907      	bls.n	8002b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e150      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
 8002b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ea      	bne.n	8002b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8097 	beq.w	8002c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a7c      	ldr	r2, [pc, #496]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b77      	ldr	r3, [pc, #476]	; (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b74      	ldr	r3, [pc, #464]	; (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a73      	ldr	r2, [pc, #460]	; (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7ff f811 	bl	8001bac <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7ff f80d 	bl	8001bac <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e10c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2ea>
 8002bb4:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a63      	ldr	r2, [pc, #396]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x30c>
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002be4:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a54      	ldr	r2, [pc, #336]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0304 	bic.w	r3, r3, #4
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe ffd2 	bl	8001bac <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe ffce 	bl	8001bac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0cb      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ee      	beq.n	8002c0c <HAL_RCC_OscConfig+0x334>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe ffbc 	bl	8001bac <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe ffb8 	bl	8001bac <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0b5      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	4a38      	ldr	r2, [pc, #224]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a1 	beq.w	8002db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d05c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d141      	bne.n	8002d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe ff8c 	bl	8001bac <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe ff88 	bl	8001bac <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e087      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe ff61 	bl	8001bac <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe ff5d 	bl	8001bac <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e05c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x416>
 8002d0c:	e054      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe ff4a 	bl	8001bac <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe ff46 	bl	8001bac <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e045      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x444>
 8002d3a:	e03d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e038      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4ec>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d028      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d121      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d84:	4013      	ands	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0cc      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b68      	ldr	r3, [pc, #416]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d90c      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0b8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e1c:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e34:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	494d      	ldr	r1, [pc, #308]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d044      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d119      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e07f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e067      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4934      	ldr	r1, [pc, #208]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fe78 	bl	8001bac <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fe74 	bl	8001bac <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d20c      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e032      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4916      	ldr	r1, [pc, #88]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	490e      	ldr	r1, [pc, #56]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4e:	f000 f821 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490a      	ldr	r1, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fdd8 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023c00 	.word	0x40023c00
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08009170 	.word	0x08009170
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000004 	.word	0x20000004

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b090      	sub	sp, #64	; 0x40
 8002f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	f200 80a1 	bhi.w	8003100 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc6:	e09b      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fcc:	e09b      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fce:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fd2:	e098      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fde:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d028      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	fb03 f201 	mul.w	r2, r3, r1
 8003004:	2300      	movs	r3, #0
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	4413      	add	r3, r2
 800300c:	4a43      	ldr	r2, [pc, #268]	; (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 800300e:	fba0 1202 	umull	r1, r2, r0, r2
 8003012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003014:	460a      	mov	r2, r1
 8003016:	62ba      	str	r2, [r7, #40]	; 0x28
 8003018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301a:	4413      	add	r3, r2
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	2200      	movs	r2, #0
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	61fa      	str	r2, [r7, #28]
 8003026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800302a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800302e:	f7fd fd29 	bl	8000a84 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4613      	mov	r3, r2
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303a:	e053      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	2200      	movs	r2, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	617a      	str	r2, [r7, #20]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800304e:	f04f 0b00 	mov.w	fp, #0
 8003052:	4652      	mov	r2, sl
 8003054:	465b      	mov	r3, fp
 8003056:	f04f 0000 	mov.w	r0, #0
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	0159      	lsls	r1, r3, #5
 8003060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003064:	0150      	lsls	r0, r2, #5
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	ebb2 080a 	subs.w	r8, r2, sl
 800306e:	eb63 090b 	sbc.w	r9, r3, fp
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800307e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003082:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003086:	ebb2 0408 	subs.w	r4, r2, r8
 800308a:	eb63 0509 	sbc.w	r5, r3, r9
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	00eb      	lsls	r3, r5, #3
 8003098:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309c:	00e2      	lsls	r2, r4, #3
 800309e:	4614      	mov	r4, r2
 80030a0:	461d      	mov	r5, r3
 80030a2:	eb14 030a 	adds.w	r3, r4, sl
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	eb45 030b 	adc.w	r3, r5, fp
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ba:	4629      	mov	r1, r5
 80030bc:	028b      	lsls	r3, r1, #10
 80030be:	4621      	mov	r1, r4
 80030c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c4:	4621      	mov	r1, r4
 80030c6:	028a      	lsls	r2, r1, #10
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	2200      	movs	r2, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	60fa      	str	r2, [r7, #12]
 80030d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d8:	f7fd fcd4 	bl	8000a84 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetSysClockFreq+0x184>)
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003108:	4618      	mov	r0, r3
 800310a:	3740      	adds	r7, #64	; 0x40
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	017d7840 	.word	0x017d7840

08003120 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe f8ef 	bl	8001328 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f814 	bl	8003180 <HAL_SD_InitCard>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00a      	b.n	8003178 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b08e      	sub	sp, #56	; 0x38
 8003184:	af04      	add	r7, sp, #16
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800319c:	2376      	movs	r3, #118	; 0x76
 800319e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681d      	ldr	r5, [r3, #0]
 80031a4:	466c      	mov	r4, sp
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b8:	4628      	mov	r0, r5
 80031ba:	f002 fad9 	bl	8005770 <SDIO_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80031c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04f      	b.n	8003270 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_SD_InitCard+0xf8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 fb11 	bl	8005802 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_SD_InitCard+0xf8>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80031e6:	2002      	movs	r0, #2
 80031e8:	f7fe fcec 	bl	8001bc4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 ff6b 	bl	80040c8 <SD_PowerON>
 80031f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e02e      	b.n	8003270 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fe8a 	bl	8003f2c <SD_InitCard>
 8003218:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01b      	b.n	8003270 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fb70 	bl	8005926 <SDMMC_CmdBlockLength>
 8003246:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00f      	beq.n	800326e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_SD_InitCard+0xfc>)
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bdb0      	pop	{r4, r5, r7, pc}
 8003278:	422580a0 	.word	0x422580a0
 800327c:	004005ff 	.word	0x004005ff

08003280 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d107      	bne.n	80032a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0c0      	b.n	800342a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	f040 80b9 	bne.w	8003428 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	441a      	add	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d907      	bls.n	80032da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0a7      	b.n	800342a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2203      	movs	r2, #3
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a4b      	ldr	r2, [pc, #300]	; (8003438 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800330c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2200      	movs	r2, #0
 8003314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3380      	adds	r3, #128	; 0x80
 8003344:	4619      	mov	r1, r3
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	f7fe fe1d 	bl	8001f8c <HAL_DMA_Start_IT>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a33      	ldr	r2, [pc, #204]	; (800343c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e050      	b.n	800342a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	025b      	lsls	r3, r3, #9
 80033a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033a8:	2390      	movs	r3, #144	; 0x90
 80033aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033ac:	2302      	movs	r3, #2
 80033ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f107 0210 	add.w	r2, r7, #16
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fa83 	bl	80058ce <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d90a      	bls.n	80033e4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2282      	movs	r2, #130	; 0x82
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033da:	4618      	mov	r0, r3
 80033dc:	f002 fae7 	bl	80059ae <SDMMC_CmdReadMultiBlock>
 80033e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80033e2:	e009      	b.n	80033f8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2281      	movs	r2, #129	; 0x81
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 faba 	bl	800596a <SDMMC_CmdReadSingleBlock>
 80033f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e002      	b.n	800342a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3730      	adds	r7, #48	; 0x30
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	08003d3b 	.word	0x08003d3b
 8003438:	08003dad 	.word	0x08003dad
 800343c:	004005ff 	.word	0x004005ff
 8003440:	4225858c 	.word	0x4225858c

08003444 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0c5      	b.n	80035f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	f040 80be 	bne.w	80035f6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	441a      	add	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	429a      	cmp	r2, r3
 800348c:	d907      	bls.n	800349e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0ac      	b.n	80035f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80034d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2200      	movs	r2, #0
 80034d8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	025b      	lsls	r3, r3, #9
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d90a      	bls.n	8003504 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22a0      	movs	r2, #160	; 0xa0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fa9b 	bl	8005a36 <SDMMC_CmdWriteMultiBlock>
 8003500:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003502:	e009      	b.n	8003518 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2290      	movs	r2, #144	; 0x90
 8003508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fa6e 	bl	80059f2 <SDMMC_CmdWriteSingleBlock>
 8003516:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a39      	ldr	r2, [pc, #228]	; (8003608 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e059      	b.n	80035f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3380      	adds	r3, #128	; 0x80
 800357a:	461a      	mov	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	025b      	lsls	r3, r3, #9
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	f7fe fd03 	bl	8001f8c <HAL_DMA_Start_IT>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01c      	beq.n	80035c6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800359a:	f023 0302 	bic.w	r3, r3, #2
 800359e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e018      	b.n	80035f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80035d2:	2390      	movs	r3, #144	; 0x90
 80035d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80035de:	2301      	movs	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f107 0210 	add.w	r2, r7, #16
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 f96e 	bl	80058ce <SDIO_ConfigData>

      return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3730      	adds	r7, #48	; 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	08003d11 	.word	0x08003d11
 8003604:	08003dad 	.word	0x08003dad
 8003608:	004005ff 	.word	0x004005ff
 800360c:	4225858c 	.word	0x4225858c

08003610 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_SD_IRQHandler+0x2e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fdfc 	bl	8004234 <SD_Read_IT>
 800363c:	e165      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 808f 	beq.w	800376c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003666:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800366a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d039      	beq.n	80036fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <HAL_SD_IRQHandler+0x8a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 f9ec 	bl	8005a7c <SDMMC_CmdStopTransfer>
 80036a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f92f 	bl	800391c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_SD_IRQHandler+0xda>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f002 fe02 	bl	80062f4 <HAL_SD_RxCpltCallback>
 80036f0:	e10b      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f002 fdf4 	bl	80062e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036f8:	e107      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8102 	beq.w	800390a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f002 f9b1 	bl	8005a7c <SDMMC_CmdStopTransfer>
 800371a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8f4 	bl	800391c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80e5 	bne.w	800390a <HAL_SD_IRQHandler+0x2fa>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80df 	bne.w	800390a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f002 fdbb 	bl	80062e0 <HAL_SD_TxCpltCallback>
}
 800376a:	e0ce      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_SD_IRQHandler+0x17c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fda6 	bl	80042d6 <SD_Write_IT>
 800378a:	e0be      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003792:	f240 233a 	movw	r3, #570	; 0x23a
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b6 	beq.w	800390a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	f043 0202 	orr.w	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f043 0208 	orr.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	f043 0210 	orr.w	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f043 0208 	orr.w	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f240 723a 	movw	r2, #1850	; 0x73a
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f002 f91a 	bl	8005a7c <SDMMC_CmdStopTransfer>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f855 	bl	800391c <HAL_SD_ErrorCallback>
}
 8003872:	e04a      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d045      	beq.n	800390a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_SD_IRQHandler+0x282>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <HAL_SD_IRQHandler+0x304>)
 8003898:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fbcc 	bl	800203c <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d02f      	beq.n	800390a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 face 	bl	8003e50 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80038b4:	e029      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_SD_IRQHandler+0x2ba>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d011      	beq.n	80038ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_SD_IRQHandler+0x308>)
 80038d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fbb0 	bl	800203c <HAL_DMA_Abort_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d013      	beq.n	800390a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fae9 	bl	8003ebe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80038ec:	e00d      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f002 fce2 	bl	80062cc <HAL_SD_AbortCallback>
}
 8003908:	e7ff      	b.n	800390a <HAL_SD_IRQHandler+0x2fa>
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	08003e51 	.word	0x08003e51
 8003918:	08003ebf 	.word	0x08003ebf

0800391c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393e:	0f9b      	lsrs	r3, r3, #30
 8003940:	b2da      	uxtb	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394a:	0e9b      	lsrs	r3, r3, #26
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	b2da      	uxtb	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395c:	0e1b      	lsrs	r3, r3, #24
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	b2da      	uxtb	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	b2da      	uxtb	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b2da      	uxtb	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003986:	b2da      	uxtb	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003990:	0d1b      	lsrs	r3, r3, #20
 8003992:	b29a      	uxth	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ae:	0bdb      	lsrs	r3, r3, #15
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c0:	0b9b      	lsrs	r3, r3, #14
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e4:	0b1b      	lsrs	r3, r3, #12
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d163      	bne.n	8003ac8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003a10:	0f92      	lsrs	r2, r2, #30
 8003a12:	431a      	orrs	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1c:	0edb      	lsrs	r3, r3, #27
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	0e1b      	lsrs	r3, r3, #24
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a40:	0d5b      	lsrs	r3, r3, #21
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a52:	0c9b      	lsrs	r3, r3, #18
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a64:	0bdb      	lsrs	r3, r3, #15
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	7e1b      	ldrb	r3, [r3, #24]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	3302      	adds	r3, #2
 8003a88:	2201      	movs	r2, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a92:	fb03 f202 	mul.w	r2, r3, r2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	7a1b      	ldrb	r3, [r3, #8]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ab4:	0a52      	lsrs	r2, r2, #9
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ac6:	e031      	b.n	8003b2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d11d      	bne.n	8003b0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	3301      	adds	r3, #1
 8003aec:	029a      	lsls	r2, r3, #10
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60
 8003b0a:	e00f      	b.n	8003b2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <HAL_SD_GetCardCSD+0x344>)
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e09d      	b.n	8003c68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b30:	0b9b      	lsrs	r3, r3, #14
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b42:	09db      	lsrs	r3, r3, #7
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	0fdb      	lsrs	r3, r3, #31
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	0f5b      	lsrs	r3, r3, #29
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	0d9b      	lsrs	r3, r3, #22
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	0d5b      	lsrs	r3, r3, #21
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	0bdb      	lsrs	r3, r3, #15
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	0b9b      	lsrs	r3, r3, #14
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	0b5b      	lsrs	r3, r3, #13
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	0b1b      	lsrs	r3, r3, #12
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	004005ff 	.word	0x004005ff

08003c78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa7e 	bl	80041e4 <SD_SendStatus>
 8003ce8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d06:	693b      	ldr	r3, [r7, #16]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2b82      	cmp	r3, #130	; 0x82
 8003d4e:	d111      	bne.n	8003d74 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 fe91 	bl	8005a7c <SDMMC_CmdStopTransfer>
 8003d5a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff fdd4 	bl	800391c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0208 	bic.w	r2, r2, #8
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f002 faa9 	bl	80062f4 <HAL_SD_RxCpltCallback>
#endif
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe faea 	bl	8002394 <HAL_DMA_GetError>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d03e      	beq.n	8003e44 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <SD_DMAError+0x36>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d12d      	bne.n	8003e3e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <SD_DMAError+0xa0>)
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff62 	bl	8003cd0 <HAL_SD_GetCardState>
 8003e0c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d002      	beq.n	8003e1a <SD_DMAError+0x6e>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10a      	bne.n	8003e30 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fe2c 	bl	8005a7c <SDMMC_CmdStopTransfer>
 8003e24:	4602      	mov	r2, r0
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff fd6c 	bl	800391c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	004005ff 	.word	0x004005ff

08003e50 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ff31 	bl	8003cd0 <HAL_SD_GetCardState>
 8003e6e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d002      	beq.n	8003e8a <SD_DMATxAbort+0x3a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d10a      	bne.n	8003ea0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fdf4 	bl	8005a7c <SDMMC_CmdStopTransfer>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f002 fa0f 	bl	80062cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003eae:	e002      	b.n	8003eb6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff fd33 	bl	800391c <HAL_SD_ErrorCallback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fefa 	bl	8003cd0 <HAL_SD_GetCardState>
 8003edc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d002      	beq.n	8003ef8 <SD_DMARxAbort+0x3a>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d10a      	bne.n	8003f0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fdbd 	bl	8005a7c <SDMMC_CmdStopTransfer>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f002 f9d8 	bl	80062cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f1c:	e002      	b.n	8003f24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fcfc 	bl	800391c <HAL_SD_ErrorCallback>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f2c:	b5b0      	push	{r4, r5, r7, lr}
 8003f2e:	b094      	sub	sp, #80	; 0x50
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f34:	2301      	movs	r3, #1
 8003f36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fc6e 	bl	800581e <SDIO_GetPowerState>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f4c:	e0b8      	b.n	80040c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d02f      	beq.n	8003fb6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fe55 	bl	8005c0a <SDMMC_CmdSendCID>
 8003f60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <SD_InitCard+0x40>
    {
      return errorstate;
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	e0a9      	b.n	80040c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 fc98 	bl	80058a8 <SDIO_GetResponse>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2104      	movs	r1, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fc8f 	bl	80058a8 <SDIO_GetResponse>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2108      	movs	r1, #8
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fc86 	bl	80058a8 <SDIO_GetResponse>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	210c      	movs	r1, #12
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fc7d 	bl	80058a8 <SDIO_GetResponse>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d00d      	beq.n	8003fda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f107 020e 	add.w	r2, r7, #14
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fe5b 	bl	8005c84 <SDMMC_CmdSetRelAdd>
 8003fce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <SD_InitCard+0xae>
    {
      return errorstate;
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	e072      	b.n	80040c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d036      	beq.n	8004050 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f001 fe25 	bl	8005c46 <SDMMC_CmdSendCSD>
 8003ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004006:	e05b      	b.n	80040c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fc4a 	bl	80058a8 <SDIO_GetResponse>
 8004014:	4602      	mov	r2, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2104      	movs	r1, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fc41 	bl	80058a8 <SDIO_GetResponse>
 8004026:	4602      	mov	r2, r0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2108      	movs	r1, #8
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fc38 	bl	80058a8 <SDIO_GetResponse>
 8004038:	4602      	mov	r2, r0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	210c      	movs	r1, #12
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fc2f 	bl	80058a8 <SDIO_GetResponse>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2104      	movs	r1, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fc26 	bl	80058a8 <SDIO_GetResponse>
 800405c:	4603      	mov	r3, r0
 800405e:	0d1a      	lsrs	r2, r3, #20
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004064:	f107 0310 	add.w	r3, r7, #16
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fc60 	bl	8003930 <HAL_SD_GetCardCSD>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800407a:	e021      	b.n	80040c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	2200      	movs	r2, #0
 8004088:	461c      	mov	r4, r3
 800408a:	4615      	mov	r5, r2
 800408c:	4622      	mov	r2, r4
 800408e:	462b      	mov	r3, r5
 8004090:	4608      	mov	r0, r1
 8004092:	f001 fd15 	bl	8005ac0 <SDMMC_CmdSelDesel>
 8004096:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	e00e      	b.n	80040c0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681d      	ldr	r5, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	466c      	mov	r4, sp
 80040aa:	f103 0210 	add.w	r2, r3, #16
 80040ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80040b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040b4:	3304      	adds	r3, #4
 80040b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b8:	4628      	mov	r0, r5
 80040ba:	f001 fb59 	bl	8005770 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3740      	adds	r7, #64	; 0x40
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bdb0      	pop	{r4, r5, r7, pc}

080040c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fd10 	bl	8005b06 <SDMMC_CmdGoIdleState>
 80040e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	e072      	b.n	80041d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fd23 	bl	8005b42 <SDMMC_CmdOperCond>
 80040fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fcf9 	bl	8005b06 <SDMMC_CmdGoIdleState>
 8004114:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <SD_PowerON+0x5e>
    {
      return errorstate;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	e05b      	b.n	80041d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	2b01      	cmp	r3, #1
 800412c:	d137      	bne.n	800419e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fd23 	bl	8005b80 <SDMMC_CmdAppCommand>
 800413a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02d      	beq.n	800419e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004142:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004146:	e047      	b.n	80041d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fd16 	bl	8005b80 <SDMMC_CmdAppCommand>
 8004154:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <SD_PowerON+0x98>
    {
      return errorstate;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e03b      	b.n	80041d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	491e      	ldr	r1, [pc, #120]	; (80041e0 <SD_PowerON+0x118>)
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fd2c 	bl	8005bc4 <SDMMC_CmdAppOperCommand>
 800416c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004178:	e02e      	b.n	80041d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fb91 	bl	80058a8 <SDIO_GetResponse>
 8004186:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	0fdb      	lsrs	r3, r3, #31
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <SD_PowerON+0xcc>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <SD_PowerON+0xce>
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]

    count++;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	3301      	adds	r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d802      	bhi.n	80041ae <SD_PowerON+0xe6>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0cc      	beq.n	8004148 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d902      	bls.n	80041be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041bc:	e00c      	b.n	80041d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
 80041ce:	e002      	b.n	80041d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	c1100000 	.word	0xc1100000

080041e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f8:	e018      	b.n	800422c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f001 fd5d 	bl	8005cc6 <SDMMC_CmdSendStatus>
 800420c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	e009      	b.n	800422c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fb42 	bl	80058a8 <SDIO_GetResponse>
 8004224:	4602      	mov	r2, r0
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03f      	beq.n	80042ce <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e033      	b.n	80042bc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f001 fab4 	bl	80057c6 <SDIO_ReadFIFO>
 800425e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3b01      	subs	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3b01      	subs	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3b01      	subs	r3, #1
 800429e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b07      	cmp	r3, #7
 80042c0:	d9c8      	bls.n	8004254 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d043      	beq.n	8004378 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e037      	b.n	8004366 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3b01      	subs	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	021a      	lsls	r2, r3, #8
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3b01      	subs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	041a      	lsls	r2, r3, #16
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3b01      	subs	r3, #1
 8004336:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	061a      	lsls	r2, r3, #24
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3b01      	subs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f107 0208 	add.w	r2, r7, #8
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fa40 	bl	80057e0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b07      	cmp	r3, #7
 800436a:	d9c4      	bls.n	80042f6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e07b      	b.n	800448a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d009      	beq.n	80043b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f93c 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	ea42 0103 	orr.w	r1, r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0104 	and.w	r1, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0210 	and.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_SPI_Transmit+0x22>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e126      	b.n	8004702 <HAL_SPI_Transmit+0x270>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044bc:	f7fd fb76 	bl	8001bac <HAL_GetTick>
 80044c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d6:	e10b      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0x52>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e8:	e102      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2203      	movs	r2, #3
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	d10f      	bne.n	8004552 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d007      	beq.n	8004570 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d14b      	bne.n	8004612 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0xf6>
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d13e      	bne.n	8004606 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ac:	e02b      	b.n	8004606 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d112      	bne.n	80045e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e0:	e011      	b.n	8004606 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e2:	f7fd fae3 	bl	8001bac <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d803      	bhi.n	80045fa <HAL_SPI_Transmit+0x168>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f8:	d102      	bne.n	8004600 <HAL_SPI_Transmit+0x16e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004604:	e074      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ce      	bne.n	80045ae <HAL_SPI_Transmit+0x11c>
 8004610:	e04c      	b.n	80046ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Transmit+0x18e>
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d140      	bne.n	80046a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004646:	e02c      	b.n	80046a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d113      	bne.n	800467e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	; 0x36
 800467c:	e011      	b.n	80046a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd fa95 	bl	8001bac <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Transmit+0x204>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004694:	d102      	bne.n	800469c <HAL_SPI_Transmit+0x20a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a0:	e026      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1cd      	bne.n	8004648 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fd21 	bl	80050f8 <SPI_EndRxTxTransaction>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e000      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004700:	7ffb      	ldrb	r3, [r7, #31]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b088      	sub	sp, #32
 800470e:	af02      	add	r7, sp, #8
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d112      	bne.n	800474e <HAL_SPI_Receive+0x44>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10e      	bne.n	800474e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2204      	movs	r2, #4
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8f1 	bl	800492c <HAL_SPI_TransmitReceive>
 800474a:	4603      	mov	r3, r0
 800474c:	e0ea      	b.n	8004924 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_SPI_Receive+0x52>
 8004758:	2302      	movs	r3, #2
 800475a:	e0e3      	b.n	8004924 <HAL_SPI_Receive+0x21a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004764:	f7fd fa22 	bl	8001bac <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d002      	beq.n	800477c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	75fb      	strb	r3, [r7, #23]
    goto error;
 800477a:	e0ca      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Receive+0x7e>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800478c:	e0c1      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2204      	movs	r2, #4
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d10f      	bne.n	80047f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d162      	bne.n	80048e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800481c:	e02e      	b.n	800487c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d115      	bne.n	8004858 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f103 020c 	add.w	r2, r3, #12
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004856:	e011      	b.n	800487c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004858:	f7fd f9a8 	bl	8001bac <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d803      	bhi.n	8004870 <HAL_SPI_Receive+0x166>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486e:	d102      	bne.n	8004876 <HAL_SPI_Receive+0x16c>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	75fb      	strb	r3, [r7, #23]
          goto error;
 800487a:	e04a      	b.n	8004912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1cb      	bne.n	800481e <HAL_SPI_Receive+0x114>
 8004886:	e031      	b.n	80048ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d113      	bne.n	80048be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	b292      	uxth	r2, r2
 80048a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048bc:	e011      	b.n	80048e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048be:	f7fd f975 	bl	8001bac <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_Receive+0x1cc>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Receive+0x1d2>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e0:	e017      	b.n	8004912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1cd      	bne.n	8004888 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb9b 	bl	800502c <SPI_EndRxTransaction>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
 800490e:	e000      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

error :
 8004910:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800493a:	2301      	movs	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x26>
 800494e:	2302      	movs	r3, #2
 8004950:	e18a      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x33c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495a:	f7fd f927 	bl	8001bac <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00f      	beq.n	800499c <HAL_SPI_TransmitReceive+0x70>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d107      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x68>
 800498c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004990:	2b04      	cmp	r3, #4
 8004992:	d003      	beq.n	800499c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800499a:	e15b      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x82>
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049b4:	e14e      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d003      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d007      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a26:	d178      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_TransmitReceive+0x10a>
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d166      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	881a      	ldrh	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a5a:	e053      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d11b      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d113      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	1c9a      	adds	r2, r3, #2
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d119      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x1b8>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d014      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ae4:	f7fd f862 	bl	8001bac <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d807      	bhi.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	d003      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b02:	e0a7      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1a6      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x130>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1a1      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x130>
 8004b18:	e07c      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x1fc>
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d16b      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4e:	e057      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11c      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d017      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d114      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d119      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x2ae>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d014      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bda:	f7fc ffe7 	bl	8001bac <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d803      	bhi.n	8004bf2 <HAL_SPI_TransmitReceive+0x2c6>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x2cc>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bfe:	e029      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1a2      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x224>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d19d      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fa6d 	bl	80050f8 <SPI_EndRxTxTransaction>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c30:	e010      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e000      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3730      	adds	r7, #48	; 0x30
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_Transmit_DMA+0x20>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e09b      	b.n	8004dc8 <HAL_SPI_Transmit_DMA+0x158>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ca8:	e089      	b.n	8004dbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_Transmit_DMA+0x46>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cba:	e080      	b.n	8004dbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d02:	d10f      	bne.n	8004d24 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <HAL_SPI_Transmit_DMA+0x160>)
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <HAL_SPI_Transmit_DMA+0x164>)
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <HAL_SPI_Transmit_DMA+0x168>)
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d5c:	f7fd f916 	bl	8001f8c <HAL_DMA_Start_IT>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0210 	orr.w	r2, r3, #16
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004d7e:	e01e      	b.n	8004dbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d007      	beq.n	8004d9e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0220 	orr.w	r2, r2, #32
 8004dac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0202 	orr.w	r2, r2, #2
 8004dbc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08004ec1 	.word	0x08004ec1
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004edd 	.word	0x08004edd

08004ddc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e26:	f7fc fec1 	bl	8001bac <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d03b      	beq.n	8004eb4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0220 	bic.w	r2, r2, #32
 8004e4a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0202 	bic.w	r2, r2, #2
 8004e5a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	2164      	movs	r1, #100	; 0x64
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f000 f949 	bl	80050f8 <SPI_EndRxTxTransaction>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004eac:	6978      	ldr	r0, [r7, #20]
 8004eae:	f7ff ffa9 	bl	8004e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004eb2:	e002      	b.n	8004eba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7ff ff91 	bl	8004ddc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ff8e 	bl	8004df0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0203 	bic.w	r2, r2, #3
 8004ef8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f043 0210 	orr.w	r2, r3, #16
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff ff78 	bl	8004e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f2c:	f7fc fe3e 	bl	8001bac <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f3c:	f7fc fe36 	bl	8001bac <HAL_GetTick>
 8004f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	0d1b      	lsrs	r3, r3, #20
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f52:	e054      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5a:	d050      	beq.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f5c:	f7fc fe26 	bl	8001bac <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d902      	bls.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d13d      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8a:	d111      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d004      	beq.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d107      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d10f      	bne.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e017      	b.n	800501e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d19b      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005040:	d111      	bne.n	8005066 <SPI_EndRxTransaction+0x3a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504a:	d004      	beq.n	8005056 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	d107      	bne.n	8005066 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005064:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d12a      	bne.n	80050c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d012      	beq.n	80050a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff ff49 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02d      	beq.n	80050ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e026      	b.n	80050ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2101      	movs	r1, #1
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ff36 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01a      	beq.n	80050ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e013      	b.n	80050ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2101      	movs	r1, #1
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7ff ff23 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e000      	b.n	80050ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <SPI_EndRxTxTransaction+0x7c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <SPI_EndRxTxTransaction+0x80>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	0d5b      	lsrs	r3, r3, #21
 8005110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005122:	d112      	bne.n	800514a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fef4 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00f      	b.n	800516a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d0f2      	beq.n	800514a <SPI_EndRxTxTransaction+0x52>
 8005164:	e000      	b.n	8005168 <SPI_EndRxTxTransaction+0x70>
        break;
 8005166:	bf00      	nop
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000000 	.word	0x20000000
 8005178:	165e9f81 	.word	0x165e9f81

0800517c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e041      	b.n	8005212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fc52 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f000 f950 	bl	8005460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d001      	beq.n	8005234 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e03c      	b.n	80052ae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <HAL_TIM_Base_Start+0xa0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_TIM_Base_Start+0x5c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d013      	beq.n	8005278 <HAL_TIM_Base_Start+0x5c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_TIM_Base_Start+0xa4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_TIM_Base_Start+0x5c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_TIM_Base_Start+0xa8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_TIM_Base_Start+0x5c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <HAL_TIM_Base_Start+0xac>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_Base_Start+0x5c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a16      	ldr	r2, [pc, #88]	; (80052cc <HAL_TIM_Base_Start+0xb0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d111      	bne.n	800529c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b06      	cmp	r3, #6
 8005288:	d010      	beq.n	80052ac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	e007      	b.n	80052ac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_ConfigClockSource+0x1c>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e0b4      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x186>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800530a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005324:	d03e      	beq.n	80053a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532a:	f200 8087 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x16c>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	f000 8086 	beq.w	8005442 <HAL_TIM_ConfigClockSource+0x172>
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d87f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b70      	cmp	r3, #112	; 0x70
 800533e:	d01a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0xa6>
 8005340:	2b70      	cmp	r3, #112	; 0x70
 8005342:	d87b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d050      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x11a>
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d877      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d03c      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0xfa>
 8005350:	2b50      	cmp	r3, #80	; 0x50
 8005352:	d873      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d058      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x13a>
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d86f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d064      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15a>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d86b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d060      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15a>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d867      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05c      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15a>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d05a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	e062      	b.n	800543c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6899      	ldr	r1, [r3, #8]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f000 f965 	bl	8005654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]
      break;
 80053a2:	e04f      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f000 f94e 	bl	8005654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c6:	609a      	str	r2, [r3, #8]
      break;
 80053c8:	e03c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 f8c2 	bl	8005560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2150      	movs	r1, #80	; 0x50
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f91b 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 80053e8:	e02c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 f8e1 	bl	80055be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2160      	movs	r1, #96	; 0x60
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f90b 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8005408:	e01c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 f8a2 	bl	8005560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2140      	movs	r1, #64	; 0x40
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f8fb 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8005428:	e00c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f000 f8f2 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 800543a:	e003      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e000      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <TIM_Base_SetConfig+0xe4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00f      	beq.n	8005498 <TIM_Base_SetConfig+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547e:	d00b      	beq.n	8005498 <TIM_Base_SetConfig+0x38>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <TIM_Base_SetConfig+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_Base_SetConfig+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a30      	ldr	r2, [pc, #192]	; (800554c <TIM_Base_SetConfig+0xec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_Base_SetConfig+0x38>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0xf0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a25      	ldr	r2, [pc, #148]	; (8005544 <TIM_Base_SetConfig+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <TIM_Base_SetConfig+0xe8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a21      	ldr	r2, [pc, #132]	; (800554c <TIM_Base_SetConfig+0xec>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a20      	ldr	r2, [pc, #128]	; (8005550 <TIM_Base_SetConfig+0xf0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <TIM_Base_SetConfig+0xf4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <TIM_Base_SetConfig+0xf8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <TIM_Base_SetConfig+0xfc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a08      	ldr	r2, [pc, #32]	; (8005544 <TIM_Base_SetConfig+0xe4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d103      	bne.n	8005530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	615a      	str	r2, [r3, #20]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 030a 	bic.w	r3, r3, #10
 800559c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055be:	b480      	push	{r7}
 80055c0:	b087      	sub	sp, #28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0210 	bic.w	r2, r3, #16
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	031b      	lsls	r3, r3, #12
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	f043 0307 	orr.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e050      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d013      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40014000 	.word	0x40014000

08005770 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 001c 	add.w	r0, r7, #28
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005786:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005788:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800578a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800578e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005792:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005796:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800579a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80057aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	b004      	add	sp, #16
 80057c4:	4770      	bx	lr

080057c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2203      	movs	r2, #3
 800580e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0303 	and.w	r3, r3, #3
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005858:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800585e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005864:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005874:	f023 030f 	bic.w	r3, r3, #15
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	b2db      	uxtb	r3, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3314      	adds	r3, #20
 80058b6:	461a      	mov	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4413      	add	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
}  
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058f4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80058fa:	431a      	orrs	r2, r3
                       Data->DPSM);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005900:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0

}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b088      	sub	sp, #32
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005934:	2310      	movs	r3, #16
 8005936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005944:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff74 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	2110      	movs	r1, #16
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f9d7 	bl	8005d0c <SDMMC_GetCmdResp1>
 800595e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005960:	69fb      	ldr	r3, [r7, #28]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005978:	2311      	movs	r3, #17
 800597a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005988:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff52 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	2111      	movs	r1, #17
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f9b5 	bl	8005d0c <SDMMC_GetCmdResp1>
 80059a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a4:	69fb      	ldr	r3, [r7, #28]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b088      	sub	sp, #32
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80059bc:	2312      	movs	r3, #18
 80059be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ff30 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	2112      	movs	r1, #18
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f993 	bl	8005d0c <SDMMC_GetCmdResp1>
 80059e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059e8:	69fb      	ldr	r3, [r7, #28]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005a00:	2318      	movs	r3, #24
 8005a02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a12:	f107 0308 	add.w	r3, r7, #8
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff0e 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	2118      	movs	r1, #24
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f971 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005a44:	2319      	movs	r3, #25
 8005a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff feec 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	2119      	movs	r1, #25
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f94f 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a70:	69fb      	ldr	r3, [r7, #28]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005a88:	230c      	movs	r3, #12
 8005a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff feca 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005aa6:	4a05      	ldr	r2, [pc, #20]	; (8005abc <SDMMC_CmdStopTransfer+0x40>)
 8005aa8:	210c      	movs	r1, #12
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f92e 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	05f5e100 	.word	0x05f5e100

08005ac0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	; 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005ad0:	2307      	movs	r3, #7
 8005ad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ae2:	f107 0310 	add.w	r3, r7, #16
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff fea6 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	2107      	movs	r1, #7
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f909 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3728      	adds	r7, #40	; 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b088      	sub	sp, #32
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b24:	f107 0308 	add.w	r3, r7, #8
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fe85 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb23 	bl	800617c <SDMMC_GetCmdError>
 8005b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b38:	69fb      	ldr	r3, [r7, #28]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b088      	sub	sp, #32
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005b4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005b50:	2308      	movs	r3, #8
 8005b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fe66 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fab6 	bl	80060e0 <SDMMC_GetCmdResp7>
 8005b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005b8e:	2337      	movs	r3, #55	; 0x37
 8005b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ba0:	f107 0308 	add.w	r3, r7, #8
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fe47 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	2137      	movs	r1, #55	; 0x37
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8aa 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005bb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bba:	69fb      	ldr	r3, [r7, #28]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005bda:	2329      	movs	r3, #41	; 0x29
 8005bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bde:	2340      	movs	r3, #64	; 0x40
 8005be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fe21 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9bd 	bl	8005f78 <SDMMC_GetCmdResp3>
 8005bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c00:	69fb      	ldr	r3, [r7, #28]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b088      	sub	sp, #32
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005c16:	2302      	movs	r3, #2
 8005c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fe03 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f957 	bl	8005ee8 <SDMMC_GetCmdResp2>
 8005c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c54:	2309      	movs	r3, #9
 8005c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c58:	23c0      	movs	r3, #192	; 0xc0
 8005c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fde4 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f938 	bl	8005ee8 <SDMMC_GetCmdResp2>
 8005c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005c92:	2303      	movs	r3, #3
 8005c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ca4:	f107 0308 	add.w	r3, r7, #8
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fdc5 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f99d 	bl	8005ff4 <SDMMC_GetCmdResp6>
 8005cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b088      	sub	sp, #32
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005cd4:	230d      	movs	r3, #13
 8005cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ce6:	f107 0308 	add.w	r3, r7, #8
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fda4 	bl	800583a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	210d      	movs	r1, #13
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f807 	bl	8005d0c <SDMMC_GetCmdResp1>
 8005cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d00:	69fb      	ldr	r3, [r7, #28]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	460b      	mov	r3, r1
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005d1a:	4b70      	ldr	r3, [pc, #448]	; (8005edc <SDMMC_GetCmdResp1+0x1d0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a70      	ldr	r2, [pc, #448]	; (8005ee0 <SDMMC_GetCmdResp1+0x1d4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0a5a      	lsrs	r2, r3, #9
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	61fa      	str	r2, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d3c:	e0c9      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ef      	beq.n	8005d2e <SDMMC_GetCmdResp1+0x22>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ea      	bne.n	8005d2e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2204      	movs	r2, #4
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	e0b1      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0a6      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	22c5      	movs	r2, #197	; 0xc5
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff fd7f 	bl	800588e <SDIO_GetCommandResponse>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d001      	beq.n	8005d9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e099      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005d9e:	2100      	movs	r1, #0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fd81 	bl	80058a8 <SDIO_GetResponse>
 8005da6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4b4e      	ldr	r3, [pc, #312]	; (8005ee4 <SDMMC_GetCmdResp1+0x1d8>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e08d      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da02      	bge.n	8005dc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc0:	e087      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	e080      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	e079      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dec:	e071      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dfc:	e069      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e0c:	e061      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e1c:	e059      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2c:	e051      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e3c:	e049      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e4c:	e041      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5c:	e039      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e6c:	e031      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e7c:	e029      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e8c:	e021      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005e9c:	e019      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005eac:	e011      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005eb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ebc:	e009      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ec8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ecc:	e001      	b.n	8005ed2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000000 	.word	0x20000000
 8005ee0:	10624dd3 	.word	0x10624dd3
 8005ee4:	fdffe008 	.word	0xfdffe008

08005ee8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <SDMMC_GetCmdResp2+0x88>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <SDMMC_GetCmdResp2+0x8c>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f14:	e026      	b.n	8005f64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0ef      	beq.n	8005f06 <SDMMC_GetCmdResp2+0x1e>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ea      	bne.n	8005f06 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f42:	2304      	movs	r3, #4
 8005f44:	e00e      	b.n	8005f64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e003      	b.n	8005f64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	22c5      	movs	r2, #197	; 0xc5
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000000 	.word	0x20000000
 8005f74:	10624dd3 	.word	0x10624dd3

08005f78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <SDMMC_GetCmdResp3+0x74>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <SDMMC_GetCmdResp3+0x78>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	0a5b      	lsrs	r3, r3, #9
 8005f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1e5a      	subs	r2, r3, #1
 8005f9a:	60fa      	str	r2, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fa4:	e01b      	b.n	8005fde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ef      	beq.n	8005f96 <SDMMC_GetCmdResp3+0x1e>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ea      	bne.n	8005f96 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	e003      	b.n	8005fde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	22c5      	movs	r2, #197	; 0xc5
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	10624dd3 	.word	0x10624dd3

08005ff4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006002:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <SDMMC_GetCmdResp6+0xe4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a35      	ldr	r2, [pc, #212]	; (80060dc <SDMMC_GetCmdResp6+0xe8>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	0a5b      	lsrs	r3, r3, #9
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	61fa      	str	r2, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006026:	e052      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0ef      	beq.n	8006018 <SDMMC_GetCmdResp6+0x24>
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ea      	bne.n	8006018 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2204      	movs	r2, #4
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006054:	2304      	movs	r3, #4
 8006056:	e03a      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800606a:	2301      	movs	r3, #1
 800606c:	e02f      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff fc0d 	bl	800588e <SDIO_GetCommandResponse>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	4293      	cmp	r3, r2
 800607c:	d001      	beq.n	8006082 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800607e:	2301      	movs	r3, #1
 8006080:	e025      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	22c5      	movs	r2, #197	; 0xc5
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006088:	2100      	movs	r1, #0
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7ff fc0c 	bl	80058a8 <SDIO_GetResponse>
 8006090:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e011      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060b8:	e009      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c8:	e001      	b.n	80060ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80060ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000
 80060dc:	10624dd3 	.word	0x10624dd3

080060e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <SDMMC_GetCmdResp7+0x94>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <SDMMC_GetCmdResp7+0x98>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	0a5b      	lsrs	r3, r3, #9
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1e5a      	subs	r2, r3, #1
 8006102:	60fa      	str	r2, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800610c:	e02c      	b.n	8006168 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ef      	beq.n	80060fe <SDMMC_GetCmdResp7+0x1e>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ea      	bne.n	80060fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2204      	movs	r2, #4
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800613a:	2304      	movs	r3, #4
 800613c:	e014      	b.n	8006168 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006150:	2301      	movs	r3, #1
 8006152:	e009      	b.n	8006168 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2240      	movs	r2, #64	; 0x40
 8006164:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006166:	2300      	movs	r3, #0
  
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000000 	.word	0x20000000
 8006178:	10624dd3 	.word	0x10624dd3

0800617c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <SDMMC_GetCmdError+0x50>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <SDMMC_GetCmdError+0x54>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0a5b      	lsrs	r3, r3, #9
 8006190:	f241 3288 	movw	r2, #5000	; 0x1388
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1e5a      	subs	r2, r3, #1
 800619e:	60fa      	str	r2, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061a8:	e009      	b.n	80061be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f1      	beq.n	800619a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	22c5      	movs	r2, #197	; 0xc5
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20000000 	.word	0x20000000
 80061d0:	10624dd3 	.word	0x10624dd3

080061d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80061d8:	4904      	ldr	r1, [pc, #16]	; (80061ec <MX_FATFS_Init+0x18>)
 80061da:	4805      	ldr	r0, [pc, #20]	; (80061f0 <MX_FATFS_Init+0x1c>)
 80061dc:	f001 fdf0 	bl	8007dc0 <FATFS_LinkDriver>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <MX_FATFS_Init+0x20>)
 80061e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061e8:	bf00      	nop
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20008754 	.word	0x20008754
 80061f0:	08009188 	.word	0x08009188
 80061f4:	20008750 	.word	0x20008750

080061f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006202:	f000 f888 	bl	8006316 <BSP_SD_IsDetected>
 8006206:	4603      	mov	r3, r0
 8006208:	2b01      	cmp	r3, #1
 800620a:	d001      	beq.n	8006210 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e005      	b.n	800621c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006210:	4804      	ldr	r0, [pc, #16]	; (8006224 <BSP_SD_Init+0x2c>)
 8006212:	f7fc ff85 	bl	8003120 <HAL_SD_Init>
 8006216:	4603      	mov	r3, r0
 8006218:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800621a:	79fb      	ldrb	r3, [r7, #7]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20008458 	.word	0x20008458

08006228 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	4806      	ldr	r0, [pc, #24]	; (8006258 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006240:	f7fd f81e 	bl	8003280 <HAL_SD_ReadBlocks_DMA>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20008458 	.word	0x20008458

0800625c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	4806      	ldr	r0, [pc, #24]	; (800628c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006274:	f7fd f8e6 	bl	8003444 <HAL_SD_WriteBlocks_DMA>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20008458 	.word	0x20008458

08006290 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <BSP_SD_GetCardState+0x1c>)
 8006296:	f7fd fd1b 	bl	8003cd0 <HAL_SD_GetCardState>
 800629a:	4603      	mov	r3, r0
 800629c:	2b04      	cmp	r3, #4
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20008458 	.word	0x20008458

080062b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4803      	ldr	r0, [pc, #12]	; (80062c8 <BSP_SD_GetCardInfo+0x18>)
 80062bc:	f7fd fcdc 	bl	8003c78 <HAL_SD_GetCardInfo>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20008458 	.word	0x20008458

080062cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80062d4:	f000 f818 	bl	8006308 <BSP_SD_AbortCallback>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80062e8:	f000 f98c 	bl	8006604 <BSP_SD_WriteCpltCallback>
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80062fc:	f000 f98e 	bl	800661c <BSP_SD_ReadCpltCallback>
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0

}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800631c:	2301      	movs	r3, #1
 800631e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	b2db      	uxtb	r3, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006338:	f7fb fc38 	bl	8001bac <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800633e:	e006      	b.n	800634e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006340:	f7ff ffa6 	bl	8006290 <BSP_SD_GetCardState>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800634a:	2300      	movs	r3, #0
 800634c:	e009      	b.n	8006362 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800634e:	f7fb fc2d 	bl	8001bac <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d8f0      	bhi.n	8006340 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <SD_CheckStatus+0x38>)
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800637c:	f7ff ff88 	bl	8006290 <BSP_SD_GetCardState>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d107      	bne.n	8006396 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <SD_CheckStatus+0x38>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <SD_CheckStatus+0x38>)
 8006394:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006396:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <SD_CheckStatus+0x38>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b2db      	uxtb	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000009 	.word	0x20000009

080063a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80063b2:	f7ff ff21 	bl	80061f8 <BSP_SD_Init>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d107      	bne.n	80063cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ffd4 	bl	800636c <SD_CheckStatus>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	4b04      	ldr	r3, [pc, #16]	; (80063dc <SD_initialize+0x34>)
 80063ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <SD_initialize+0x34>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000009 	.word	0x20000009

080063e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff ffbd 	bl	800636c <SD_CheckStatus>
 80063f2:	4603      	mov	r3, r0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006410:	f247 5030 	movw	r0, #30000	; 0x7530
 8006414:	f7ff ff8c 	bl	8006330 <SD_CheckStatusWithTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <SD_read+0x26>
  {
    return res;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	e03b      	b.n	800649a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	68b8      	ldr	r0, [r7, #8]
 8006428:	f7ff fefe 	bl	8006228 <BSP_SD_ReadBlocks_DMA>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d132      	bne.n	8006498 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <SD_read+0xa8>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006438:	f7fb fbb8 	bl	8001bac <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800643e:	bf00      	nop
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <SD_read+0xa8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d108      	bne.n	800645a <SD_read+0x5e>
 8006448:	f7fb fbb0 	bl	8001bac <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f247 522f 	movw	r2, #29999	; 0x752f
 8006456:	4293      	cmp	r3, r2
 8006458:	d9f2      	bls.n	8006440 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <SD_read+0xa8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e017      	b.n	8006498 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <SD_read+0xa8>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800646e:	f7fb fb9d 	bl	8001bac <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006474:	e007      	b.n	8006486 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006476:	f7ff ff0b 	bl	8006290 <BSP_SD_GetCardState>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <SD_read+0x8a>
          {
            res = RES_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006484:	e008      	b.n	8006498 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006486:	f7fb fb91 	bl	8001bac <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	f247 522f 	movw	r2, #29999	; 0x752f
 8006494:	4293      	cmp	r3, r2
 8006496:	d9ee      	bls.n	8006476 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000875c 	.word	0x2000875c

080064a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <SD_write+0xa8>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80064c2:	f247 5030 	movw	r0, #30000	; 0x7530
 80064c6:	f7ff ff33 	bl	8006330 <SD_CheckStatusWithTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da01      	bge.n	80064d4 <SD_write+0x2c>
  {
    return res;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	e038      	b.n	8006546 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	68b8      	ldr	r0, [r7, #8]
 80064da:	f7ff febf 	bl	800625c <BSP_SD_WriteBlocks_DMA>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d12f      	bne.n	8006544 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80064e4:	f7fb fb62 	bl	8001bac <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80064ea:	bf00      	nop
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <SD_write+0xa8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <SD_write+0x5e>
 80064f4:	f7fb fb5a 	bl	8001bac <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8006502:	4293      	cmp	r3, r2
 8006504:	d9f2      	bls.n	80064ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <SD_write+0xa8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
 8006512:	e017      	b.n	8006544 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <SD_write+0xa8>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800651a:	f7fb fb47 	bl	8001bac <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006520:	e007      	b.n	8006532 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006522:	f7ff feb5 	bl	8006290 <BSP_SD_GetCardState>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <SD_write+0x8a>
          {
            res = RES_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	75fb      	strb	r3, [r7, #23]
            break;
 8006530:	e008      	b.n	8006544 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006532:	f7fb fb3b 	bl	8001bac <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006540:	4293      	cmp	r3, r2
 8006542:	d9ee      	bls.n	8006522 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20008758 	.word	0x20008758

08006554 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	; 0x30
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	603a      	str	r2, [r7, #0]
 800655e:	71fb      	strb	r3, [r7, #7]
 8006560:	460b      	mov	r3, r1
 8006562:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800656a:	4b25      	ldr	r3, [pc, #148]	; (8006600 <SD_ioctl+0xac>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <SD_ioctl+0x28>
 8006578:	2303      	movs	r3, #3
 800657a:	e03c      	b.n	80065f6 <SD_ioctl+0xa2>

  switch (cmd)
 800657c:	79bb      	ldrb	r3, [r7, #6]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d834      	bhi.n	80065ec <SD_ioctl+0x98>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <SD_ioctl+0x34>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	08006599 	.word	0x08006599
 800658c:	080065a1 	.word	0x080065a1
 8006590:	080065b9 	.word	0x080065b9
 8006594:	080065d3 	.word	0x080065d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800659e:	e028      	b.n	80065f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fe83 	bl	80062b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80065aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065b6:	e01c      	b.n	80065f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065b8:	f107 030c 	add.w	r3, r7, #12
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff fe77 	bl	80062b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065d0:	e00f      	b.n	80065f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fe6a 	bl	80062b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	0a5a      	lsrs	r2, r3, #9
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065ea:	e002      	b.n	80065f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80065f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3730      	adds	r7, #48	; 0x30
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000009 	.word	0x20000009

08006604 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006608:	4b03      	ldr	r3, [pc, #12]	; (8006618 <BSP_SD_WriteCpltCallback+0x14>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20008758 	.word	0x20008758

0800661c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006620:	4b03      	ldr	r3, [pc, #12]	; (8006630 <BSP_SD_ReadCpltCallback+0x14>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	2000875c 	.word	0x2000875c

08006634 <CreateChunkMatrix>:
  * @param  buff wskaznik na tablice która wpisujemy do struktury
  * @retval zwraca strukture ChunkMatrix
*/


ChunkMatrix CreateChunkMatrix(uint8_t * buff){
 8006634:	b490      	push	{r4, r7}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	ChunkMatrix new_ChunkMatrix;
	new_ChunkMatrix.ChunkSize=8;
 800663e:	2308      	movs	r3, #8
 8006640:	723b      	strb	r3, [r7, #8]
	new_ChunkMatrix.MatrixRes=28;
 8006642:	231c      	movs	r3, #28
 8006644:	727b      	strb	r3, [r7, #9]
	new_ChunkMatrix.ChunkNum=new_ChunkMatrix.MatrixRes*new_ChunkMatrix.MatrixRes;
 8006646:	7a7b      	ldrb	r3, [r7, #9]
 8006648:	b29a      	uxth	r2, r3
 800664a:	7a7b      	ldrb	r3, [r7, #9]
 800664c:	b29b      	uxth	r3, r3
 800664e:	fb12 f303 	smulbb	r3, r2, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	817b      	strh	r3, [r7, #10]
	//uint8_t buff[new_ChunkMatrix.ChunkNum];
	new_ChunkMatrix.Chunks=buff;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	617b      	str	r3, [r7, #20]
	new_ChunkMatrix.Color1=SHAD1;
 800665a:	2300      	movs	r3, #0
 800665c:	81bb      	strh	r3, [r7, #12]
	new_ChunkMatrix.Color2=SHAD2;
 800665e:	f244 2308 	movw	r3, #16904	; 0x4208
 8006662:	81fb      	strh	r3, [r7, #14]
	new_ChunkMatrix.Color3=SHAD3;
 8006664:	f245 238a 	movw	r3, #21130	; 0x528a
 8006668:	823b      	strh	r3, [r7, #16]
	new_ChunkMatrix.Color4=SHAD4;
 800666a:	f648 4351 	movw	r3, #35921	; 0x8c51
 800666e:	827b      	strh	r3, [r7, #18]
	return new_ChunkMatrix;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	461c      	mov	r4, r3
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800667a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bc90      	pop	{r4, r7}
 8006686:	4770      	bx	lr

08006688 <CalcChunk>:
  * @param  Y - pionowy kordynat na ekranie
  * @retval None
*/


void CalcChunk(ST7789V *this,ChunkMatrix * cmtx,uint16_t X ,uint16_t Y){
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4611      	mov	r1, r2
 8006694:	461a      	mov	r2, r3
 8006696:	460b      	mov	r3, r1
 8006698:	80fb      	strh	r3, [r7, #6]
 800669a:	4613      	mov	r3, r2
 800669c:	80bb      	strh	r3, [r7, #4]
	uint8_t column =30-(X-X%cmtx->ChunkSize)/cmtx->ChunkSize;
 800669e:	88f9      	ldrh	r1, [r7, #6]
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	fb93 f0f2 	sdiv	r0, r3, r2
 80066aa:	fb00 f202 	mul.w	r2, r0, r2
 80066ae:	1a9b      	subs	r3, r3, r2
 80066b0:	1acb      	subs	r3, r1, r3
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f1c3 031e 	rsb	r3, r3, #30
 80066c0:	75fb      	strb	r3, [r7, #23]
	uint8_t row=40-(Y-Y%cmtx->ChunkSize)/cmtx->ChunkSize;
 80066c2:	88b9      	ldrh	r1, [r7, #4]
 80066c4:	88bb      	ldrh	r3, [r7, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	7812      	ldrb	r2, [r2, #0]
 80066ca:	fb93 f0f2 	sdiv	r0, r3, r2
 80066ce:	fb00 f202 	mul.w	r2, r0, r2
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	1acb      	subs	r3, r1, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	fb93 f3f2 	sdiv	r3, r3, r2
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80066e4:	75bb      	strb	r3, [r7, #22]
	static uint8_t prevRow=0,prevCol=0;
	if(column==0) column=1;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <CalcChunk+0x68>
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
	if(column>=29) column=cmtx->MatrixRes;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b1c      	cmp	r3, #28
 80066f4:	d902      	bls.n	80066fc <CalcChunk+0x74>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	75fb      	strb	r3, [r7, #23]
	column--;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	3b01      	subs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
	if(row==0) row=1;
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <CalcChunk+0x84>
 8006708:	2301      	movs	r3, #1
 800670a:	75bb      	strb	r3, [r7, #22]
	if(row>=29) row=cmtx->MatrixRes;
 800670c:	7dbb      	ldrb	r3, [r7, #22]
 800670e:	2b1c      	cmp	r3, #28
 8006710:	d902      	bls.n	8006718 <CalcChunk+0x90>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	75bb      	strb	r3, [r7, #22]
	row--;
 8006718:	7dbb      	ldrb	r3, [r7, #22]
 800671a:	3b01      	subs	r3, #1
 800671c:	75bb      	strb	r3, [r7, #22]
	if(prevRow!=row || prevCol!=column){
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <CalcChunk+0xcc>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	7dba      	ldrb	r2, [r7, #22]
 8006724:	429a      	cmp	r2, r3
 8006726:	d104      	bne.n	8006732 <CalcChunk+0xaa>
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <CalcChunk+0xd0>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	7dfa      	ldrb	r2, [r7, #23]
 800672e:	429a      	cmp	r2, r3
 8006730:	d00b      	beq.n	800674a <CalcChunk+0xc2>
		FillChunks(this,cmtx,row, column);
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	7dba      	ldrb	r2, [r7, #22]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f80f 	bl	800675c <FillChunks>
		prevRow=row;
 800673e:	4a05      	ldr	r2, [pc, #20]	; (8006754 <CalcChunk+0xcc>)
 8006740:	7dbb      	ldrb	r3, [r7, #22]
 8006742:	7013      	strb	r3, [r2, #0]
		prevCol=column;
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <CalcChunk+0xd0>)
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	7013      	strb	r3, [r2, #0]
	}
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20008760 	.word	0x20008760
 8006758:	20008761 	.word	0x20008761

0800675c <FillChunks>:
  * @param 	cmtx - wskaznik na strukture Chunkmatrix
  * @param  row - index wierszu obszaru  który został wcisniety
  * @param  column - index kolumny  obszaru  który został wcisniety
  * @retval None
*/
void  FillChunks(ST7789V *this,ChunkMatrix * cmtx,uint8_t row , uint8_t column){
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	460b      	mov	r3, r1
 800676c:	71fb      	strb	r3, [r7, #7]
 800676e:	4613      	mov	r3, r2
 8006770:	71bb      	strb	r3, [r7, #6]
	uint8_t bound1=0,bound2=0;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
 8006776:	2300      	movs	r3, #0
 8006778:	75bb      	strb	r3, [r7, #22]
	if(row==0)
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <FillChunks+0x2a>
		bound1=4;
 8006780:	2304      	movs	r3, #4
 8006782:	75fb      	strb	r3, [r7, #23]
 8006784:	e004      	b.n	8006790 <FillChunks+0x34>
	else if(row==27)
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	2b1b      	cmp	r3, #27
 800678a:	d101      	bne.n	8006790 <FillChunks+0x34>
		bound1=7;
 800678c:	2307      	movs	r3, #7
 800678e:	75fb      	strb	r3, [r7, #23]
	if(column==0)
 8006790:	79bb      	ldrb	r3, [r7, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <FillChunks+0x40>
		bound2=1;
 8006796:	2301      	movs	r3, #1
 8006798:	75bb      	strb	r3, [r7, #22]
 800679a:	e004      	b.n	80067a6 <FillChunks+0x4a>
	else if(column==27)
 800679c:	79bb      	ldrb	r3, [r7, #6]
 800679e:	2b1b      	cmp	r3, #27
 80067a0:	d101      	bne.n	80067a6 <FillChunks+0x4a>
		bound2=2;
 80067a2:	2302      	movs	r3, #2
 80067a4:	75bb      	strb	r3, [r7, #22]
	switch(bound1+bound2){
 80067a6:	7dfa      	ldrb	r2, [r7, #23]
 80067a8:	7dbb      	ldrb	r3, [r7, #22]
 80067aa:	4413      	add	r3, r2
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	f200 8218 	bhi.w	8006be2 <FillChunks+0x486>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <FillChunks+0x5c>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080068a3 	.word	0x080068a3
 80067c0:	08006921 	.word	0x08006921
 80067c4:	08006be3 	.word	0x08006be3
 80067c8:	0800699f 	.word	0x0800699f
 80067cc:	08006a1d 	.word	0x08006a1d
 80067d0:	08006a6f 	.word	0x08006a6f
 80067d4:	08006ac1 	.word	0x08006ac1
 80067d8:	08006b3f 	.word	0x08006b3f
 80067dc:	08006b91 	.word	0x08006b91
		case 0:{
			PutDataToArray(this,cmtx,row, column-1, 64); //L
 80067e0:	79bb      	ldrb	r3, [r7, #6]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	79fa      	ldrb	r2, [r7, #7]
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	9100      	str	r1, [sp, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fa04 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64); //LU
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	79bb      	ldrb	r3, [r7, #6]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2140      	movs	r1, #64	; 0x40
 8006802:	9100      	str	r1, [sp, #0]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f9f8 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	3b01      	subs	r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	79bb      	ldrb	r3, [r7, #6]
 8006814:	2140      	movs	r1, #64	; 0x40
 8006816:	9100      	str	r1, [sp, #0]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f9ee 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006820:	79bb      	ldrb	r3, [r7, #6]
 8006822:	79fa      	ldrb	r2, [r7, #7]
 8006824:	21ff      	movs	r1, #255	; 0xff
 8006826:	9100      	str	r1, [sp, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f9e6 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1,64);//RU
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	3b01      	subs	r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	79bb      	ldrb	r3, [r7, #6]
 8006838:	3301      	adds	r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2140      	movs	r1, #64	; 0x40
 800683e:	9100      	str	r1, [sp, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f9da 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8006848:	79bb      	ldrb	r3, [r7, #6]
 800684a:	3301      	adds	r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	79fa      	ldrb	r2, [r7, #7]
 8006850:	2140      	movs	r1, #64	; 0x40
 8006852:	9100      	str	r1, [sp, #0]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f9d0 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	79bb      	ldrb	r3, [r7, #6]
 8006864:	3301      	adds	r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2140      	movs	r1, #64	; 0x40
 800686a:	9100      	str	r1, [sp, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f9c4 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	3301      	adds	r3, #1
 8006878:	b2da      	uxtb	r2, r3
 800687a:	79bb      	ldrb	r3, [r7, #6]
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	9100      	str	r1, [sp, #0]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f9ba 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	3301      	adds	r3, #1
 800688c:	b2da      	uxtb	r2, r3
 800688e:	79bb      	ldrb	r3, [r7, #6]
 8006890:	3b01      	subs	r3, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2140      	movs	r1, #64	; 0x40
 8006896:	9100      	str	r1, [sp, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f9ae 	bl	8006bfc <PutDataToArray>
			break;
 80068a0:	e1a8      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 1:{// 1 - U D R RU RD
			PutDataToArray(this,cmtx,row+1, column, 64); //D
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	3301      	adds	r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	79bb      	ldrb	r3, [r7, #6]
 80068aa:	2140      	movs	r1, #64	; 0x40
 80068ac:	9100      	str	r1, [sp, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f9a3 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64); //RD
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	3301      	adds	r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	79bb      	ldrb	r3, [r7, #6]
 80068be:	3301      	adds	r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2140      	movs	r1, #64	; 0x40
 80068c4:	9100      	str	r1, [sp, #0]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f997 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 80068ce:	79bb      	ldrb	r3, [r7, #6]
 80068d0:	79fa      	ldrb	r2, [r7, #7]
 80068d2:	21ff      	movs	r1, #255	; 0xff
 80068d4:	9100      	str	r1, [sp, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f98f 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	79bb      	ldrb	r3, [r7, #6]
 80068e6:	3301      	adds	r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2140      	movs	r1, #64	; 0x40
 80068ec:	9100      	str	r1, [sp, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f983 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	79bb      	ldrb	r3, [r7, #6]
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	9100      	str	r1, [sp, #0]
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f979 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 800690a:	79bb      	ldrb	r3, [r7, #6]
 800690c:	3301      	adds	r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	79fa      	ldrb	r2, [r7, #7]
 8006912:	2140      	movs	r1, #64	; 0x40
 8006914:	9100      	str	r1, [sp, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f96f 	bl	8006bfc <PutDataToArray>
			break;
 800691e:	e169      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 2:{//2 - U D L LU LD
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	3301      	adds	r3, #1
 8006924:	b2da      	uxtb	r2, r3
 8006926:	79bb      	ldrb	r3, [r7, #6]
 8006928:	2140      	movs	r1, #64	; 0x40
 800692a:	9100      	str	r1, [sp, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f964 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	3301      	adds	r3, #1
 8006938:	b2da      	uxtb	r2, r3
 800693a:	79bb      	ldrb	r3, [r7, #6]
 800693c:	3b01      	subs	r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2140      	movs	r1, #64	; 0x40
 8006942:	9100      	str	r1, [sp, #0]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f958 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 800694c:	79bb      	ldrb	r3, [r7, #6]
 800694e:	79fa      	ldrb	r2, [r7, #7]
 8006950:	21ff      	movs	r1, #255	; 0xff
 8006952:	9100      	str	r1, [sp, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f950 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	3b01      	subs	r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	79bb      	ldrb	r3, [r7, #6]
 8006964:	3b01      	subs	r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2140      	movs	r1, #64	; 0x40
 800696a:	9100      	str	r1, [sp, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f944 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	3b01      	subs	r3, #1
 8006978:	b2da      	uxtb	r2, r3
 800697a:	79bb      	ldrb	r3, [r7, #6]
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	9100      	str	r1, [sp, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f93a 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8006988:	79bb      	ldrb	r3, [r7, #6]
 800698a:	3b01      	subs	r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	79fa      	ldrb	r2, [r7, #7]
 8006990:	2140      	movs	r1, #64	; 0x40
 8006992:	9100      	str	r1, [sp, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f930 	bl	8006bfc <PutDataToArray>
			break;
 800699c:	e12a      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 4:{// 4 - L LD D RD R
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 800699e:	79bb      	ldrb	r3, [r7, #6]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	79fa      	ldrb	r2, [r7, #7]
 80069a6:	2140      	movs	r1, #64	; 0x40
 80069a8:	9100      	str	r1, [sp, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f925 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	3301      	adds	r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	79bb      	ldrb	r3, [r7, #6]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2140      	movs	r1, #64	; 0x40
 80069c0:	9100      	str	r1, [sp, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f919 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 80069ca:	79bb      	ldrb	r3, [r7, #6]
 80069cc:	79fa      	ldrb	r2, [r7, #7]
 80069ce:	21ff      	movs	r1, #255	; 0xff
 80069d0:	9100      	str	r1, [sp, #0]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f911 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	3301      	adds	r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	79bb      	ldrb	r3, [r7, #6]
 80069e2:	3301      	adds	r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2140      	movs	r1, #64	; 0x40
 80069e8:	9100      	str	r1, [sp, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f905 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	3301      	adds	r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	79bb      	ldrb	r3, [r7, #6]
 80069fa:	2140      	movs	r1, #64	; 0x40
 80069fc:	9100      	str	r1, [sp, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f8fb 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8006a06:	79bb      	ldrb	r3, [r7, #6]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	79fa      	ldrb	r2, [r7, #7]
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	9100      	str	r1, [sp, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f8f1 	bl	8006bfc <PutDataToArray>

			break;
 8006a1a:	e0eb      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 5:{//5 - D RD R
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8006a1c:	79bb      	ldrb	r3, [r7, #6]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	79fa      	ldrb	r2, [r7, #7]
 8006a24:	2140      	movs	r1, #64	; 0x40
 8006a26:	9100      	str	r1, [sp, #0]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f8e6 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column+1, 64);//RD
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	3301      	adds	r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	79bb      	ldrb	r3, [r7, #6]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2140      	movs	r1, #64	; 0x40
 8006a3e:	9100      	str	r1, [sp, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f8da 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006a48:	79bb      	ldrb	r3, [r7, #6]
 8006a4a:	79fa      	ldrb	r2, [r7, #7]
 8006a4c:	21ff      	movs	r1, #255	; 0xff
 8006a4e:	9100      	str	r1, [sp, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f8d2 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	79bb      	ldrb	r3, [r7, #6]
 8006a60:	2140      	movs	r1, #64	; 0x40
 8006a62:	9100      	str	r1, [sp, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f8c8 	bl	8006bfc <PutDataToArray>
			break;
 8006a6c:	e0c2      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 6:{// 6 - L LD D
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8006a6e:	79bb      	ldrb	r3, [r7, #6]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	79fa      	ldrb	r2, [r7, #7]
 8006a76:	2140      	movs	r1, #64	; 0x40
 8006a78:	9100      	str	r1, [sp, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f8bd 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006a82:	79bb      	ldrb	r3, [r7, #6]
 8006a84:	79fa      	ldrb	r2, [r7, #7]
 8006a86:	21ff      	movs	r1, #255	; 0xff
 8006a88:	9100      	str	r1, [sp, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f8b5 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column-1, 64);//LD
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	3301      	adds	r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	79bb      	ldrb	r3, [r7, #6]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2140      	movs	r1, #64	; 0x40
 8006aa0:	9100      	str	r1, [sp, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f8a9 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row+1, column, 64);//D
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	79bb      	ldrb	r3, [r7, #6]
 8006ab2:	2140      	movs	r1, #64	; 0x40
 8006ab4:	9100      	str	r1, [sp, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f89f 	bl	8006bfc <PutDataToArray>
			break;
 8006abe:	e099      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 7:{//7 - L LU U RU R
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8006ac0:	79bb      	ldrb	r3, [r7, #6]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	79fa      	ldrb	r2, [r7, #7]
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	9100      	str	r1, [sp, #0]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f894 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	79bb      	ldrb	r3, [r7, #6]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2140      	movs	r1, #64	; 0x40
 8006ae2:	9100      	str	r1, [sp, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f888 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006aec:	79bb      	ldrb	r3, [r7, #6]
 8006aee:	79fa      	ldrb	r2, [r7, #7]
 8006af0:	21ff      	movs	r1, #255	; 0xff
 8006af2:	9100      	str	r1, [sp, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f880 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	79bb      	ldrb	r3, [r7, #6]
 8006b04:	3301      	adds	r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2140      	movs	r1, #64	; 0x40
 8006b0a:	9100      	str	r1, [sp, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f874 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8006b14:	79bb      	ldrb	r3, [r7, #6]
 8006b16:	3301      	adds	r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	79fa      	ldrb	r2, [r7, #7]
 8006b1c:	2140      	movs	r1, #64	; 0x40
 8006b1e:	9100      	str	r1, [sp, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f86a 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	79bb      	ldrb	r3, [r7, #6]
 8006b30:	2140      	movs	r1, #64	; 0x40
 8006b32:	9100      	str	r1, [sp, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f860 	bl	8006bfc <PutDataToArray>
			break;
 8006b3c:	e05a      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 8:{//8 - U RU R
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	79bb      	ldrb	r3, [r7, #6]
 8006b46:	2140      	movs	r1, #64	; 0x40
 8006b48:	9100      	str	r1, [sp, #0]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f855 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column+1, 64);//RU
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	79bb      	ldrb	r3, [r7, #6]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2140      	movs	r1, #64	; 0x40
 8006b60:	9100      	str	r1, [sp, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f849 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006b6a:	79bb      	ldrb	r3, [r7, #6]
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	21ff      	movs	r1, #255	; 0xff
 8006b70:	9100      	str	r1, [sp, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f841 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column+1, 64);//R
 8006b7a:	79bb      	ldrb	r3, [r7, #6]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	79fa      	ldrb	r2, [r7, #7]
 8006b82:	2140      	movs	r1, #64	; 0x40
 8006b84:	9100      	str	r1, [sp, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f837 	bl	8006bfc <PutDataToArray>
			break;
 8006b8e:	e031      	b.n	8006bf4 <FillChunks+0x498>
		}
		case 9:{//9 - L LU U
			PutDataToArray(this,cmtx,row-1, column, 64);//U
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	79bb      	ldrb	r3, [r7, #6]
 8006b98:	2140      	movs	r1, #64	; 0x40
 8006b9a:	9100      	str	r1, [sp, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f82c 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row-1, column-1, 64);//LU
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	79bb      	ldrb	r3, [r7, #6]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2140      	movs	r1, #64	; 0x40
 8006bb2:	9100      	str	r1, [sp, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f820 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column, 255);
 8006bbc:	79bb      	ldrb	r3, [r7, #6]
 8006bbe:	79fa      	ldrb	r2, [r7, #7]
 8006bc0:	21ff      	movs	r1, #255	; 0xff
 8006bc2:	9100      	str	r1, [sp, #0]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f818 	bl	8006bfc <PutDataToArray>
			PutDataToArray(this,cmtx,row, column-1, 64);//L
 8006bcc:	79bb      	ldrb	r3, [r7, #6]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	79fa      	ldrb	r2, [r7, #7]
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	9100      	str	r1, [sp, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f80e 	bl	8006bfc <PutDataToArray>
			break;
 8006be0:	e008      	b.n	8006bf4 <FillChunks+0x498>
		}
		default:{
			PutDataToArray(this,cmtx,row, column, 255);
 8006be2:	79bb      	ldrb	r3, [r7, #6]
 8006be4:	79fa      	ldrb	r2, [r7, #7]
 8006be6:	21ff      	movs	r1, #255	; 0xff
 8006be8:	9100      	str	r1, [sp, #0]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f805 	bl	8006bfc <PutDataToArray>
			break;
 8006bf2:	bf00      	nop
		}
	}
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <PutDataToArray>:
  * @param  row - index wierszu obszaru  który został wcisniety
  * @param  column - index kolumny  obszaru  który został wcisniety
  * @param  value - wartosc jaka zostaje dodana do tablicy zawierajacej informacje o danym obszarze
  * @retval None
*/
void PutDataToArray(ST7789V *this,ChunkMatrix * cmtx,uint8_t row , uint8_t column,uint16_t value){
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	71fb      	strb	r3, [r7, #7]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71bb      	strb	r3, [r7, #6]
	if(cmtx->Chunks[cmtx->MatrixRes*row+column]<=128 &&value!=255){
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	7852      	ldrb	r2, [r2, #1]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	79fa      	ldrb	r2, [r7, #7]
 8006c1e:	fb02 f101 	mul.w	r1, r2, r1
 8006c22:	79ba      	ldrb	r2, [r7, #6]
 8006c24:	440a      	add	r2, r1
 8006c26:	4413      	add	r3, r2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d81f      	bhi.n	8006c6e <PutDataToArray+0x72>
 8006c2e:	8c3b      	ldrh	r3, [r7, #32]
 8006c30:	2bff      	cmp	r3, #255	; 0xff
 8006c32:	d01c      	beq.n	8006c6e <PutDataToArray+0x72>
		cmtx->Chunks[cmtx->MatrixRes*row+column]+=value;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	7852      	ldrb	r2, [r2, #1]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	79fa      	ldrb	r2, [r7, #7]
 8006c40:	fb02 f101 	mul.w	r1, r2, r1
 8006c44:	79ba      	ldrb	r2, [r7, #6]
 8006c46:	440a      	add	r2, r1
 8006c48:	4413      	add	r3, r2
 8006c4a:	7819      	ldrb	r1, [r3, #0]
 8006c4c:	8c3b      	ldrh	r3, [r7, #32]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	7840      	ldrb	r0, [r0, #1]
 8006c58:	4604      	mov	r4, r0
 8006c5a:	79f8      	ldrb	r0, [r7, #7]
 8006c5c:	fb00 f404 	mul.w	r4, r0, r4
 8006c60:	79b8      	ldrb	r0, [r7, #6]
 8006c62:	4420      	add	r0, r4
 8006c64:	4403      	add	r3, r0
 8006c66:	440a      	add	r2, r1
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e03c      	b.n	8006ce8 <PutDataToArray+0xec>
	}
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]<=192 && value!=255){
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	7852      	ldrb	r2, [r2, #1]
 8006c76:	4611      	mov	r1, r2
 8006c78:	79fa      	ldrb	r2, [r7, #7]
 8006c7a:	fb02 f101 	mul.w	r1, r2, r1
 8006c7e:	79ba      	ldrb	r2, [r7, #6]
 8006c80:	440a      	add	r2, r1
 8006c82:	4413      	add	r3, r2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2bc0      	cmp	r3, #192	; 0xc0
 8006c88:	d821      	bhi.n	8006cce <PutDataToArray+0xd2>
 8006c8a:	8c3b      	ldrh	r3, [r7, #32]
 8006c8c:	2bff      	cmp	r3, #255	; 0xff
 8006c8e:	d01e      	beq.n	8006cce <PutDataToArray+0xd2>
		cmtx->Chunks[cmtx->MatrixRes*row+column]+=value-1;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	7852      	ldrb	r2, [r2, #1]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	79fa      	ldrb	r2, [r7, #7]
 8006c9c:	fb02 f101 	mul.w	r1, r2, r1
 8006ca0:	79ba      	ldrb	r2, [r7, #6]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	8c3b      	ldrh	r3, [r7, #32]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	7849      	ldrb	r1, [r1, #1]
 8006cb8:	4608      	mov	r0, r1
 8006cba:	79f9      	ldrb	r1, [r7, #7]
 8006cbc:	fb01 f000 	mul.w	r0, r1, r0
 8006cc0:	79b9      	ldrb	r1, [r7, #6]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3a01      	subs	r2, #1
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e00c      	b.n	8006ce8 <PutDataToArray+0xec>
	}
	else{
		cmtx->Chunks[cmtx->MatrixRes*row+column]=255;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	7852      	ldrb	r2, [r2, #1]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	79fa      	ldrb	r2, [r7, #7]
 8006cda:	fb02 f101 	mul.w	r1, r2, r1
 8006cde:	79ba      	ldrb	r2, [r7, #6]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	701a      	strb	r2, [r3, #0]
	}
	ColorChunks(this,cmtx,row, column);
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	79bb      	ldrb	r3, [r7, #6]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f804 	bl	8006d00 <ColorChunks>
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd90      	pop	{r4, r7, pc}

08006d00 <ColorChunks>:
  * @param  row - index wierszu obszaru  który został wcisniety
  * @param  column - index kolumny  obszaru  który został wcisniety
  * @retval None
*/

void ColorChunks(ST7789V *this,ChunkMatrix * cmtx,uint16_t row , uint16_t column){
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	460b      	mov	r3, r1
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80bb      	strh	r3, [r7, #4]
	uint16_t X0=this->LCD_Width-2*cmtx->ChunkSize-cmtx->ChunkSize*column;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8bda      	ldrh	r2, [r3, #30]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	88b9      	ldrh	r1, [r7, #4]
 8006d30:	fb11 f303 	smulbb	r3, r1, r3
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	82fb      	strh	r3, [r7, #22]
	uint16_t X1=this->LCD_Width-cmtx->ChunkSize-cmtx->ChunkSize*column;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8bda      	ldrh	r2, [r3, #30]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	88b9      	ldrh	r1, [r7, #4]
 8006d50:	fb11 f303 	smulbb	r3, r1, r3
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	82bb      	strh	r3, [r7, #20]
	uint16_t Y0=this->LCD_Height-cmtx->ChunkSize-cmtx->ChunkSize*row;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8b9a      	ldrh	r2, [r3, #28]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	88f9      	ldrh	r1, [r7, #6]
 8006d70:	fb11 f303 	smulbb	r3, r1, r3
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	827b      	strh	r3, [r7, #18]
	uint16_t Y1=this->LCD_Height-2*cmtx->ChunkSize-cmtx->ChunkSize*row;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8b9a      	ldrh	r2, [r3, #28]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	88f9      	ldrh	r1, [r7, #6]
 8006d94:	fb11 f303 	smulbb	r3, r1, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	823b      	strh	r3, [r7, #16]
	if(cmtx->Chunks[cmtx->MatrixRes*row+column]==64){
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	7852      	ldrb	r2, [r2, #1]
 8006da6:	4611      	mov	r1, r2
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	fb02 f101 	mul.w	r1, r2, r1
 8006dae:	88ba      	ldrh	r2, [r7, #4]
 8006db0:	440a      	add	r2, r1
 8006db2:	4413      	add	r3, r2
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d10c      	bne.n	8006dd4 <ColorChunks+0xd4>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color4);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	895b      	ldrh	r3, [r3, #10]
 8006dbe:	8ab8      	ldrh	r0, [r7, #20]
 8006dc0:	8a7a      	ldrh	r2, [r7, #18]
 8006dc2:	8af9      	ldrh	r1, [r7, #22]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	8a3b      	ldrh	r3, [r7, #16]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	4603      	mov	r3, r0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fd5c 	bl	800788a <ST7789V_DrawRect>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color1);
	}
	else{
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, YELLOW);
	}
}
 8006dd2:	e05c      	b.n	8006e8e <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==128){
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	7852      	ldrb	r2, [r2, #1]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	fb02 f101 	mul.w	r1, r2, r1
 8006de4:	88ba      	ldrh	r2, [r7, #4]
 8006de6:	440a      	add	r2, r1
 8006de8:	4413      	add	r3, r2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d10c      	bne.n	8006e0a <ColorChunks+0x10a>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1,cmtx->Color3);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	891b      	ldrh	r3, [r3, #8]
 8006df4:	8ab8      	ldrh	r0, [r7, #20]
 8006df6:	8a7a      	ldrh	r2, [r7, #18]
 8006df8:	8af9      	ldrh	r1, [r7, #22]
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	8a3b      	ldrh	r3, [r7, #16]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fd41 	bl	800788a <ST7789V_DrawRect>
}
 8006e08:	e041      	b.n	8006e8e <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==192){
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	7852      	ldrb	r2, [r2, #1]
 8006e12:	4611      	mov	r1, r2
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	fb02 f101 	mul.w	r1, r2, r1
 8006e1a:	88ba      	ldrh	r2, [r7, #4]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4413      	add	r3, r2
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2bc0      	cmp	r3, #192	; 0xc0
 8006e24:	d10c      	bne.n	8006e40 <ColorChunks+0x140>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color2);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	8ab8      	ldrh	r0, [r7, #20]
 8006e2c:	8a7a      	ldrh	r2, [r7, #18]
 8006e2e:	8af9      	ldrh	r1, [r7, #22]
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	8a3b      	ldrh	r3, [r7, #16]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4603      	mov	r3, r0
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fd26 	bl	800788a <ST7789V_DrawRect>
}
 8006e3e:	e026      	b.n	8006e8e <ColorChunks+0x18e>
	else if(cmtx->Chunks[cmtx->MatrixRes*row+column]==255){
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	7852      	ldrb	r2, [r2, #1]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	fb02 f101 	mul.w	r1, r2, r1
 8006e50:	88ba      	ldrh	r2, [r7, #4]
 8006e52:	440a      	add	r2, r1
 8006e54:	4413      	add	r3, r2
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2bff      	cmp	r3, #255	; 0xff
 8006e5a:	d10c      	bne.n	8006e76 <ColorChunks+0x176>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, cmtx->Color1);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	889b      	ldrh	r3, [r3, #4]
 8006e60:	8ab8      	ldrh	r0, [r7, #20]
 8006e62:	8a7a      	ldrh	r2, [r7, #18]
 8006e64:	8af9      	ldrh	r1, [r7, #22]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	8a3b      	ldrh	r3, [r7, #16]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fd0b 	bl	800788a <ST7789V_DrawRect>
}
 8006e74:	e00b      	b.n	8006e8e <ColorChunks+0x18e>
		 ST7789V_DrawRect(this,X0, Y0, X1, Y1, YELLOW);
 8006e76:	8ab8      	ldrh	r0, [r7, #20]
 8006e78:	8a7a      	ldrh	r2, [r7, #18]
 8006e7a:	8af9      	ldrh	r1, [r7, #22]
 8006e7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	8a3b      	ldrh	r3, [r7, #16]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4603      	mov	r3, r0
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fcfe 	bl	800788a <ST7789V_DrawRect>
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <Write_button_text>:
/*
  * @brief 	Wypisuje text na przycisku w menu "SPRAWDZ WYNIK"
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/
static void Write_button_text(ST7789V *this){
 8006e98:	b5b0      	push	{r4, r5, r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	6078      	str	r0, [r7, #4]

	uint16_t X0=15;
 8006ea0:	230f      	movs	r3, #15
 8006ea2:	83bb      	strh	r3, [r7, #28]
	uint16_t Y0=20;
 8006ea4:	2314      	movs	r3, #20
 8006ea6:	837b      	strh	r3, [r7, #26]

	char text[]="SPRAWDZ WYNIK";
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <Write_button_text+0x70>)
 8006eaa:	f107 040c 	add.w	r4, r7, #12
 8006eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006eb0:	c407      	stmia	r4!, {r0, r1, r2}
 8006eb2:	8023      	strh	r3, [r4, #0]
	for(uint8_t i=0;i<13;i++){
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e01e      	b.n	8006ef8 <Write_button_text+0x60>
		ST7789V_WriteChar(this, X0+i*16, Y0,text[i], Font_16x26, MATRIXCOL, BUTTONCOL);
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	8bbb      	ldrh	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	b29c      	uxth	r4, r3
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
 8006eca:	3320      	adds	r3, #32
 8006ecc:	443b      	add	r3, r7
 8006ece:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006ed2:	8b7a      	ldrh	r2, [r7, #26]
 8006ed4:	f248 7165 	movw	r1, #34661	; 0x8765
 8006ed8:	9103      	str	r1, [sp, #12]
 8006eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ede:	9102      	str	r1, [sp, #8]
 8006ee0:	490a      	ldr	r1, [pc, #40]	; (8006f0c <Write_button_text+0x74>)
 8006ee2:	466d      	mov	r5, sp
 8006ee4:	c903      	ldmia	r1, {r0, r1}
 8006ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006eea:	4621      	mov	r1, r4
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fdc4 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<13;i++){
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	7ffb      	ldrb	r3, [r7, #31]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	d9dd      	bls.n	8006eba <Write_button_text+0x22>
	}


}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bdb0      	pop	{r4, r5, r7, pc}
 8006f08:	08009110 	.word	0x08009110
 8006f0c:	2000000c 	.word	0x2000000c

08006f10 <RefreshMenu>:
  * @brief  Odświeza ekran rysujac spowrotem Menu
  * @param  this - wskaznik na strukture ST7789V
  * @param 	cmtx - wskaznik na strukture Chunkmatrix
  * @retval None
*/
void RefreshMenu(ST7789V *this,ChunkMatrix * cmtx){
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]

	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BACKGROUNDCOL);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8bda      	ldrh	r2, [r3, #30]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8b9b      	ldrh	r3, [r3, #28]
 8006f22:	f644 616c 	movw	r1, #20076	; 0x4e6c
 8006f26:	9101      	str	r1, [sp, #4]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fcaa 	bl	800788a <ST7789V_DrawRect>
	ST7789V_DrawRect(this,8, 88, this->LCD_Width-cmtx->ChunkSize, this->LCD_Height-cmtx->ChunkSize, MATRIXCOL);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8bda      	ldrh	r2, [r3, #30]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	b299      	uxth	r1, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8b9a      	ldrh	r2, [r3, #28]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	2258      	movs	r2, #88	; 0x58
 8006f5e:	2108      	movs	r1, #8
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc92 	bl	800788a <ST7789V_DrawRect>
	ST7789V_DrawRect(this,8, cmtx->ChunkSize, this->LCD_Width-cmtx->ChunkSize, 55,BUTTONCOL);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b299      	uxth	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8bda      	ldrh	r2, [r3, #30]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f248 7265 	movw	r2, #34661	; 0x8765
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	2237      	movs	r2, #55	; 0x37
 8006f82:	9200      	str	r2, [sp, #0]
 8006f84:	460a      	mov	r2, r1
 8006f86:	2108      	movs	r1, #8
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc7e 	bl	800788a <ST7789V_DrawRect>
	memset(cmtx->Chunks,0,cmtx->ChunkNum);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68d8      	ldr	r0, [r3, #12]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	461a      	mov	r2, r3
 8006f98:	2100      	movs	r1, #0
 8006f9a:	f002 f8a5 	bl	80090e8 <memset>
	Write_button_text(this);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ff7a 	bl	8006e98 <Write_button_text>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <LoopScreen>:
  * @param 	cmtx - wskaznik na strukture Chunkmatrix
  * @param  X - poziomy kordynat na ekranie
  * @param  Y - pionowy kordynat na ekranie
  * @retval zwraca czy rozpoczac obliczenia jaka liczba zotałą wpisana do ekranu 1 rozpoczyna 0 nie.
*/
uint8_t LoopScreen(ST7789V *this,ChunkMatrix * cmtx,uint16_t X ,uint16_t Y){
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	460b      	mov	r3, r1
 8006fbc:	80fb      	strh	r3, [r7, #6]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80bb      	strh	r3, [r7, #4]
	static uint32_t time1=0;// 1=100us
	static uint8_t menuState=1;

	if(Y>=88 &&menuState==1){
 8006fc2:	88bb      	ldrh	r3, [r7, #4]
 8006fc4:	2b57      	cmp	r3, #87	; 0x57
 8006fc6:	d90a      	bls.n	8006fde <LoopScreen+0x32>
 8006fc8:	4b2c      	ldr	r3, [pc, #176]	; (800707c <LoopScreen+0xd0>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d106      	bne.n	8006fde <LoopScreen+0x32>
		CalcChunk(this,cmtx,X, Y);
 8006fd0:	88bb      	ldrh	r3, [r7, #4]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff fb56 	bl	8006688 <CalcChunk>
 8006fdc:	e03e      	b.n	800705c <LoopScreen+0xb0>


	}
	else if(Y<=20 && menuState==1&& (TIM2->CNT- time1)>10000){
 8006fde:	88bb      	ldrh	r3, [r7, #4]
 8006fe0:	2b14      	cmp	r3, #20
 8006fe2:	d825      	bhi.n	8007030 <LoopScreen+0x84>
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <LoopScreen+0xd0>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d121      	bne.n	8007030 <LoopScreen+0x84>
 8006fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <LoopScreen+0xd4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d917      	bls.n	8007030 <LoopScreen+0x84>
		time1=TIM2->CNT;
 8007000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <LoopScreen+0xd4>)
 8007008:	6013      	str	r3, [r2, #0]
		menuState=0;
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <LoopScreen+0xd0>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
		ST7789V_DrawRect(this,0, 0,this->LCD_Width,this->LCD_Height , RELOADCOL);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8bda      	ldrh	r2, [r3, #30]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8b9b      	ldrh	r3, [r3, #28]
 8007018:	f244 210a 	movw	r1, #16906	; 0x420a
 800701c:	9101      	str	r1, [sp, #4]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	2200      	movs	r2, #0
 8007024:	2100      	movs	r1, #0
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fc2f 	bl	800788a <ST7789V_DrawRect>
		return 1;
 800702c:	2301      	movs	r3, #1
 800702e:	e020      	b.n	8007072 <LoopScreen+0xc6>

	}
	else if(TIM2->CNT-time1>10000){
 8007030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <LoopScreen+0xd4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007040:	4293      	cmp	r3, r2
 8007042:	d90b      	bls.n	800705c <LoopScreen+0xb0>
		RefreshMenu(this,cmtx);
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff62 	bl	8006f10 <RefreshMenu>
		time1=TIM2->CNT;
 800704c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	4a0b      	ldr	r2, [pc, #44]	; (8007080 <LoopScreen+0xd4>)
 8007054:	6013      	str	r3, [r2, #0]

		menuState=1;
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <LoopScreen+0xd0>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
	}
	if(TIM2->CNT<time1)
 800705c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <LoopScreen+0xd4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d202      	bcs.n	8007070 <LoopScreen+0xc4>
		time1=0;
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <LoopScreen+0xd4>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

	return 0;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	2000000a 	.word	0x2000000a
 8007080:	20008764 	.word	0x20008764

08007084 <Print_Result>:
  * @param  this - wskaznik na strukture ST7789V
  * @param  result - wynik jaki zworciła siec
  * @retval None
*/

void Print_Result(ST7789V *this,uint8_t result){
 8007084:	b5b0      	push	{r4, r5, r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af04      	add	r7, sp, #16
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BLACK);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8bda      	ldrh	r2, [r3, #30]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8b9b      	ldrh	r3, [r3, #28]
 8007098:	2100      	movs	r1, #0
 800709a:	9101      	str	r1, [sp, #4]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4613      	mov	r3, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fbf0 	bl	800788a <ST7789V_DrawRect>
	uint16_t X0=10;
 80070aa:	230a      	movs	r3, #10
 80070ac:	83bb      	strh	r3, [r7, #28]
	uint16_t Y0=147;
 80070ae:	2393      	movs	r3, #147	; 0x93
 80070b0:	837b      	strh	r3, [r7, #26]
	char text[]="TWOJ WYNIK TO:";
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <Print_Result+0xb4>)
 80070b4:	f107 0408 	add.w	r4, r7, #8
 80070b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070ba:	c407      	stmia	r4!, {r0, r1, r2}
 80070bc:	8023      	strh	r3, [r4, #0]
 80070be:	3402      	adds	r4, #2
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	7023      	strb	r3, [r4, #0]
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 80070c4:	2300      	movs	r3, #0
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e01d      	b.n	8007106 <Print_Result+0x82>
		ST7789V_WriteChar(this, X0+i*16, Y0,text[i], Font_16x26, RED, BLACK);
 80070ca:	7ffb      	ldrb	r3, [r7, #31]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	8bbb      	ldrh	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	b29c      	uxth	r4, r3
 80070d8:	7ffb      	ldrb	r3, [r7, #31]
 80070da:	3320      	adds	r3, #32
 80070dc:	443b      	add	r3, r7
 80070de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80070e2:	8b7a      	ldrh	r2, [r7, #26]
 80070e4:	2100      	movs	r1, #0
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80070ec:	9102      	str	r1, [sp, #8]
 80070ee:	4913      	ldr	r1, [pc, #76]	; (800713c <Print_Result+0xb8>)
 80070f0:	466d      	mov	r5, sp
 80070f2:	c903      	ldmia	r1, {r0, r1}
 80070f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80070f8:	4621      	mov	r1, r4
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fcbd 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 8007100:	7ffb      	ldrb	r3, [r7, #31]
 8007102:	3301      	adds	r3, #1
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	7ffb      	ldrb	r3, [r7, #31]
 8007108:	2b0d      	cmp	r3, #13
 800710a:	d9de      	bls.n	80070ca <Print_Result+0x46>
	}
	ST7789V_WriteChar(this, 112, 176,(char)(48+result), Font_16x26,RED, BLACK);
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	3330      	adds	r3, #48	; 0x30
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2200      	movs	r2, #0
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <Print_Result+0xb8>)
 800711e:	466a      	mov	r2, sp
 8007120:	c903      	ldmia	r1, {r0, r1}
 8007122:	e882 0003 	stmia.w	r2, {r0, r1}
 8007126:	22b0      	movs	r2, #176	; 0xb0
 8007128:	2170      	movs	r1, #112	; 0x70
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fca5 	bl	8007a7a <ST7789V_WriteChar>


}
 8007130:	bf00      	nop
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bdb0      	pop	{r4, r5, r7, pc}
 8007138:	08009120 	.word	0x08009120
 800713c:	2000000c 	.word	0x2000000c

08007140 <Print_Info_Calc>:
  * @brief 	Wyswietla informacje o ty ze aktualnie sa prowadzone obliczenia
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void Print_Info_Calc(ST7789V *this){
 8007140:	b5b0      	push	{r4, r5, r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af04      	add	r7, sp, #16
 8007146:	6078      	str	r0, [r7, #4]
	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BLACK);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8bda      	ldrh	r2, [r3, #30]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b9b      	ldrh	r3, [r3, #28]
 8007150:	2100      	movs	r1, #0
 8007152:	9101      	str	r1, [sp, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	2200      	movs	r2, #0
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb94 	bl	800788a <ST7789V_DrawRect>
	uint16_t X0=60;
 8007162:	233c      	movs	r3, #60	; 0x3c
 8007164:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y0=147;
 8007166:	2393      	movs	r3, #147	; 0x93
 8007168:	847b      	strh	r3, [r7, #34]	; 0x22
	char text[]="TRWAJA:";
 800716a:	4a35      	ldr	r2, [pc, #212]	; (8007240 <Print_Info_Calc+0x100>)
 800716c:	f107 0318 	add.w	r3, r7, #24
 8007170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007174:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800717e:	e021      	b.n	80071c4 <Print_Info_Calc+0x84>
		ST7789V_WriteChar(this, X0+i*16, Y0,text[i], Font_16x26, RED, BLACK);
 8007180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007184:	b29b      	uxth	r3, r3
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	b29a      	uxth	r2, r3
 800718a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800718c:	4413      	add	r3, r2
 800718e:	b29c      	uxth	r4, r3
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	443b      	add	r3, r7
 8007198:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800719c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800719e:	2100      	movs	r1, #0
 80071a0:	9103      	str	r1, [sp, #12]
 80071a2:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80071a6:	9102      	str	r1, [sp, #8]
 80071a8:	4926      	ldr	r1, [pc, #152]	; (8007244 <Print_Info_Calc+0x104>)
 80071aa:	466d      	mov	r5, sp
 80071ac:	c903      	ldmia	r1, {r0, r1}
 80071ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80071b2:	4621      	mov	r1, r4
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc60 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 80071ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071be:	3301      	adds	r3, #1
 80071c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c8:	2b06      	cmp	r3, #6
 80071ca:	d9d9      	bls.n	8007180 <Print_Info_Calc+0x40>
	}
	X0=30;
 80071cc:	231e      	movs	r3, #30
 80071ce:	84bb      	strh	r3, [r7, #36]	; 0x24
	Y0=173;
 80071d0:	23ad      	movs	r3, #173	; 0xad
 80071d2:	847b      	strh	r3, [r7, #34]	; 0x22
	char text1[]="OBLICZENIA:";
 80071d4:	4a1c      	ldr	r2, [pc, #112]	; (8007248 <Print_Info_Calc+0x108>)
 80071d6:	f107 030c 	add.w	r3, r7, #12
 80071da:	ca07      	ldmia	r2, {r0, r1, r2}
 80071dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071e6:	e021      	b.n	800722c <Print_Info_Calc+0xec>
		ST7789V_WriteChar(this, X0+i*16, Y0,text1[i], Font_16x26, RED, BLACK);
 80071e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f4:	4413      	add	r3, r2
 80071f6:	b29c      	uxth	r4, r3
 80071f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071fc:	3328      	adds	r3, #40	; 0x28
 80071fe:	443b      	add	r3, r7
 8007200:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007204:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007206:	2100      	movs	r1, #0
 8007208:	9103      	str	r1, [sp, #12]
 800720a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800720e:	9102      	str	r1, [sp, #8]
 8007210:	490c      	ldr	r1, [pc, #48]	; (8007244 <Print_Info_Calc+0x104>)
 8007212:	466d      	mov	r5, sp
 8007214:	c903      	ldmia	r1, {r0, r1}
 8007216:	e885 0003 	stmia.w	r5, {r0, r1}
 800721a:	4621      	mov	r1, r4
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc2c 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 8007222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007226:	3301      	adds	r3, #1
 8007228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800722c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d9d9      	bls.n	80071e8 <Print_Info_Calc+0xa8>
	}


}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bdb0      	pop	{r4, r5, r7, pc}
 800723e:	bf00      	nop
 8007240:	08009130 	.word	0x08009130
 8007244:	2000000c 	.word	0x2000000c
 8007248:	08009138 	.word	0x08009138

0800724c <Print_Info_MEM_CL>:
  * @brief 	Wyswietla informacje o ty ze aktualnie sa czysczane sa sektory  w pamieci
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void Print_Info_MEM_CL(ST7789V *this){
 800724c:	b5b0      	push	{r4, r5, r7, lr}
 800724e:	b08e      	sub	sp, #56	; 0x38
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BLACK);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8bda      	ldrh	r2, [r3, #30]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8b9b      	ldrh	r3, [r3, #28]
 800725c:	2100      	movs	r1, #0
 800725e:	9101      	str	r1, [sp, #4]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fb0e 	bl	800788a <ST7789V_DrawRect>
	uint16_t X0=30;
 800726e:	231e      	movs	r3, #30
 8007270:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y0=147;
 8007272:	2393      	movs	r3, #147	; 0x93
 8007274:	847b      	strh	r3, [r7, #34]	; 0x22
	char text[]="Czyszczenie";
 8007276:	4a35      	ldr	r2, [pc, #212]	; (800734c <Print_Info_MEM_CL+0x100>)
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	ca07      	ldmia	r2, {r0, r1, r2}
 800727e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 8007282:	2300      	movs	r3, #0
 8007284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007288:	e021      	b.n	80072ce <Print_Info_MEM_CL+0x82>
		ST7789V_WriteChar(this, X0+i*16, Y0,text[i], Font_16x26, RED, BLACK);
 800728a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800728e:	b29b      	uxth	r3, r3
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	b29a      	uxth	r2, r3
 8007294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007296:	4413      	add	r3, r2
 8007298:	b29c      	uxth	r4, r3
 800729a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800729e:	3328      	adds	r3, #40	; 0x28
 80072a0:	443b      	add	r3, r7
 80072a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80072a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80072a8:	2100      	movs	r1, #0
 80072aa:	9103      	str	r1, [sp, #12]
 80072ac:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80072b0:	9102      	str	r1, [sp, #8]
 80072b2:	4927      	ldr	r1, [pc, #156]	; (8007350 <Print_Info_MEM_CL+0x104>)
 80072b4:	466d      	mov	r5, sp
 80072b6:	c903      	ldmia	r1, {r0, r1}
 80072b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80072bc:	4621      	mov	r1, r4
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fbdb 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c8:	3301      	adds	r3, #1
 80072ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d2:	2b0a      	cmp	r3, #10
 80072d4:	d9d9      	bls.n	800728a <Print_Info_MEM_CL+0x3e>
	}
	X0=60;
 80072d6:	233c      	movs	r3, #60	; 0x3c
 80072d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	Y0=173;
 80072da:	23ad      	movs	r3, #173	; 0xad
 80072dc:	847b      	strh	r3, [r7, #34]	; 0x22
	char text1[]="Pamieci";
 80072de:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <Print_Info_MEM_CL+0x108>)
 80072e0:	f107 030c 	add.w	r3, r7, #12
 80072e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072e8:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 80072ec:	2300      	movs	r3, #0
 80072ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072f2:	e021      	b.n	8007338 <Print_Info_MEM_CL+0xec>
		ST7789V_WriteChar(this, X0+i*16, Y0,text1[i], Font_16x26, RED, BLACK);
 80072f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007300:	4413      	add	r3, r2
 8007302:	b29c      	uxth	r4, r3
 8007304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007308:	3328      	adds	r3, #40	; 0x28
 800730a:	443b      	add	r3, r7
 800730c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007310:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007312:	2100      	movs	r1, #0
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800731a:	9102      	str	r1, [sp, #8]
 800731c:	490c      	ldr	r1, [pc, #48]	; (8007350 <Print_Info_MEM_CL+0x104>)
 800731e:	466d      	mov	r5, sp
 8007320:	c903      	ldmia	r1, {r0, r1}
 8007322:	e885 0003 	stmia.w	r5, {r0, r1}
 8007326:	4621      	mov	r1, r4
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fba6 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 800732e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007332:	3301      	adds	r3, #1
 8007334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800733c:	2b06      	cmp	r3, #6
 800733e:	d9d9      	bls.n	80072f4 <Print_Info_MEM_CL+0xa8>
	}


}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	3728      	adds	r7, #40	; 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bdb0      	pop	{r4, r5, r7, pc}
 800734a:	bf00      	nop
 800734c:	08009144 	.word	0x08009144
 8007350:	2000000c 	.word	0x2000000c
 8007354:	08009150 	.word	0x08009150

08007358 <Print_Info_MEM_WR>:
  * @brief 	Wyswietla informacje o ty ze aktualnie sa wczytywane dane do pamieci
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void Print_Info_MEM_WR(ST7789V *this){
 8007358:	b5b0      	push	{r4, r5, r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af04      	add	r7, sp, #16
 800735e:	6078      	str	r0, [r7, #4]
	ST7789V_DrawRect(this, 0, 0, this->LCD_Width, this->LCD_Height, BLACK);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8bda      	ldrh	r2, [r3, #30]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8b9b      	ldrh	r3, [r3, #28]
 8007368:	2100      	movs	r1, #0
 800736a:	9101      	str	r1, [sp, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	4613      	mov	r3, r2
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fa88 	bl	800788a <ST7789V_DrawRect>
	uint16_t X0=30;
 800737a:	231e      	movs	r3, #30
 800737c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y0=147;
 800737e:	2393      	movs	r3, #147	; 0x93
 8007380:	847b      	strh	r3, [r7, #34]	; 0x22
	char text[]="Wczytywanie";
 8007382:	4a37      	ldr	r2, [pc, #220]	; (8007460 <Print_Info_MEM_WR+0x108>)
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	ca07      	ldmia	r2, {r0, r1, r2}
 800738a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 800738e:	2300      	movs	r3, #0
 8007390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007394:	e021      	b.n	80073da <Print_Info_MEM_WR+0x82>
		ST7789V_WriteChar(this, X0+i*16, Y0,text[i], Font_16x26, RED, BLACK);
 8007396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800739a:	b29b      	uxth	r3, r3
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	b29a      	uxth	r2, r3
 80073a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073a2:	4413      	add	r3, r2
 80073a4:	b29c      	uxth	r4, r3
 80073a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073aa:	3328      	adds	r3, #40	; 0x28
 80073ac:	443b      	add	r3, r7
 80073ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80073b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80073b4:	2100      	movs	r1, #0
 80073b6:	9103      	str	r1, [sp, #12]
 80073b8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80073bc:	9102      	str	r1, [sp, #8]
 80073be:	4929      	ldr	r1, [pc, #164]	; (8007464 <Print_Info_MEM_WR+0x10c>)
 80073c0:	466d      	mov	r5, sp
 80073c2:	c903      	ldmia	r1, {r0, r1}
 80073c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80073c8:	4621      	mov	r1, r4
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fb55 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text)-1;i++){
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d4:	3301      	adds	r3, #1
 80073d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073de:	2b0a      	cmp	r3, #10
 80073e0:	d9d9      	bls.n	8007396 <Print_Info_MEM_WR+0x3e>
	}
	X0=70;
 80073e2:	2346      	movs	r3, #70	; 0x46
 80073e4:	84bb      	strh	r3, [r7, #36]	; 0x24
	Y0=173;
 80073e6:	23ad      	movs	r3, #173	; 0xad
 80073e8:	847b      	strh	r3, [r7, #34]	; 0x22
	char text1[]="Danych";
 80073ea:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <Print_Info_MEM_WR+0x110>)
 80073ec:	f107 030c 	add.w	r3, r7, #12
 80073f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073f4:	6018      	str	r0, [r3, #0]
 80073f6:	3304      	adds	r3, #4
 80073f8:	8019      	strh	r1, [r3, #0]
 80073fa:	3302      	adds	r3, #2
 80073fc:	0c0a      	lsrs	r2, r1, #16
 80073fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007406:	e021      	b.n	800744c <Print_Info_MEM_WR+0xf4>
		ST7789V_WriteChar(this, X0+i*16, Y0,text1[i], Font_16x26, RED, BLACK);
 8007408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800740c:	b29b      	uxth	r3, r3
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	b29a      	uxth	r2, r3
 8007412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007414:	4413      	add	r3, r2
 8007416:	b29c      	uxth	r4, r3
 8007418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800741c:	3328      	adds	r3, #40	; 0x28
 800741e:	443b      	add	r3, r7
 8007420:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007426:	2100      	movs	r1, #0
 8007428:	9103      	str	r1, [sp, #12]
 800742a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800742e:	9102      	str	r1, [sp, #8]
 8007430:	490c      	ldr	r1, [pc, #48]	; (8007464 <Print_Info_MEM_WR+0x10c>)
 8007432:	466d      	mov	r5, sp
 8007434:	c903      	ldmia	r1, {r0, r1}
 8007436:	e885 0003 	stmia.w	r5, {r0, r1}
 800743a:	4621      	mov	r1, r4
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb1c 	bl	8007a7a <ST7789V_WriteChar>
	for(uint8_t i=0;i<sizeof(text1)-1;i++){
 8007442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007446:	3301      	adds	r3, #1
 8007448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800744c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007450:	2b05      	cmp	r3, #5
 8007452:	d9d9      	bls.n	8007408 <Print_Info_MEM_WR+0xb0>
	}
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	3728      	adds	r7, #40	; 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bdb0      	pop	{r4, r5, r7, pc}
 800745e:	bf00      	nop
 8007460:	08009158 	.word	0x08009158
 8007464:	2000000c 	.word	0x2000000c
 8007468:	08009164 	.word	0x08009164

0800746c <Print_Proc_10>:
  * @param  this - wskaznik na strukture ST7789V
  * @param  result - postep w kratkach (ile ma ich wyswietlic)
  * @retval None
*/

void Print_Proc_10(ST7789V *this,uint8_t number){
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b089      	sub	sp, #36	; 0x24
 8007470:	af02      	add	r7, sp, #8
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
	if(number>13){
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2b0d      	cmp	r3, #13
 800747c:	d901      	bls.n	8007482 <Print_Proc_10+0x16>
		number=13;
 800747e:	230d      	movs	r3, #13
 8007480:	70fb      	strb	r3, [r7, #3]
	}
	uint16_t start=8;
 8007482:	2308      	movs	r3, #8
 8007484:	82bb      	strh	r3, [r7, #20]
	uint16_t gap=8;
 8007486:	2308      	movs	r3, #8
 8007488:	827b      	strh	r3, [r7, #18]
	uint16_t Y0=220;
 800748a:	23dc      	movs	r3, #220	; 0xdc
 800748c:	823b      	strh	r3, [r7, #16]
	uint16_t size=10;
 800748e:	230a      	movs	r3, #10
 8007490:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0;i<number;i++){
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
 8007496:	e02a      	b.n	80074ee <Print_Proc_10+0x82>
		 ST7789V_DrawRect(this, start+(i*(size+gap)), Y0, start+size+i*(size+gap) ,Y0+10, RED);
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	b29a      	uxth	r2, r3
 800749c:	89f9      	ldrh	r1, [r7, #14]
 800749e:	8a7b      	ldrh	r3, [r7, #18]
 80074a0:	440b      	add	r3, r1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	fb12 f303 	smulbb	r3, r2, r3
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	8abb      	ldrh	r3, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	b29c      	uxth	r4, r3
 80074b0:	8aba      	ldrh	r2, [r7, #20]
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	4413      	add	r3, r2
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	b299      	uxth	r1, r3
 80074bc:	89f8      	ldrh	r0, [r7, #14]
 80074be:	8a7b      	ldrh	r3, [r7, #18]
 80074c0:	4403      	add	r3, r0
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	fb11 f303 	smulbb	r3, r1, r3
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	b299      	uxth	r1, r3
 80074ce:	8a3b      	ldrh	r3, [r7, #16]
 80074d0:	330a      	adds	r3, #10
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	8a3a      	ldrh	r2, [r7, #16]
 80074d6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80074da:	9001      	str	r0, [sp, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	460b      	mov	r3, r1
 80074e0:	4621      	mov	r1, r4
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9d1 	bl	800788a <ST7789V_DrawRect>
	for(uint8_t i=0;i<number;i++){
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	3301      	adds	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
 80074ee:	7dfa      	ldrb	r2, [r7, #23]
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d3d0      	bcc.n	8007498 <Print_Proc_10+0x2c>
	}


}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd90      	pop	{r4, r7, pc}

08007500 <ST7789V_Init>:
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/


void ST7789V_Init(ST7789V * this){
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]

	this->CS_port=LCD_CS_GPIO_Port;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a31      	ldr	r2, [pc, #196]	; (80075d0 <ST7789V_Init+0xd0>)
 800750c:	611a      	str	r2, [r3, #16]
	this->CS_Pin=LCD_CS_Pin;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	829a      	strh	r2, [r3, #20]
	this->RST_Port=LCD_RST_GPIO_Port;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <ST7789V_Init+0xd0>)
 8007518:	601a      	str	r2, [r3, #0]
	this->RST_Pin=LCD_RST_Pin;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	809a      	strh	r2, [r3, #4]
	this->DC_Port=LCD_DC_GPIO_Port;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <ST7789V_Init+0xd4>)
 8007524:	609a      	str	r2, [r3, #8]
	this->DC_Pin=LCD_DC_Pin;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2210      	movs	r2, #16
 800752a:	819a      	strh	r2, [r3, #12]
	this->pSpi=&hspi1;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2a      	ldr	r2, [pc, #168]	; (80075d8 <ST7789V_Init+0xd8>)
 8007530:	619a      	str	r2, [r3, #24]
	this->LCD_Height=320;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007538:	839a      	strh	r2, [r3, #28]
	this->LCD_Width=240;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	22f0      	movs	r2, #240	; 0xf0
 800753e:	83da      	strh	r2, [r3, #30]

	ST7789V_Reset(this);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f84b 	bl	80075dc <ST7789V_Reset>


	//////////////////////////////////
	ST7789V_WriteCommand(this, ST7789V_COLMOD_REG);
 8007546:	213a      	movs	r1, #58	; 0x3a
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f875 	bl	8007638 <ST7789V_WriteCommand>
	ST7789V_WriteDataByte(this, 0X55);//16 bit mode
 800754e:	2155      	movs	r1, #85	; 0x55
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8a4 	bl	800769e <ST7789V_WriteDataByte>

	ST7789V_WriteCommand(this, ST7789V_INVON_REG);
 8007556:	2121      	movs	r1, #33	; 0x21
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f86d 	bl	8007638 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_SLPOUT_REG);
 800755e:	2111      	movs	r1, #17
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f869 	bl	8007638 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_NORON_REG);
 8007566:	2113      	movs	r1, #19
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f865 	bl	8007638 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, ST7789V_DISPON_REG);
 800756e:	2129      	movs	r1, #41	; 0x29
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f861 	bl	8007638 <ST7789V_WriteCommand>
	ST7789V_WriteCommand(this, 0x01);
 8007576:	2101      	movs	r1, #1
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f85d 	bl	8007638 <ST7789V_WriteCommand>
	HAL_Delay(10);
 800757e:	200a      	movs	r0, #10
 8007580:	f7fa fb20 	bl	8001bc4 <HAL_Delay>
	ST7789V_WriteCommand(this, 0x11);
 8007584:	2111      	movs	r1, #17
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f856 	bl	8007638 <ST7789V_WriteCommand>
	HAL_Delay(100);
 800758c:	2064      	movs	r0, #100	; 0x64
 800758e:	f7fa fb19 	bl	8001bc4 <HAL_Delay>
	ST7789V_WriteCommand(this, 0x29);
 8007592:	2129      	movs	r1, #41	; 0x29
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f84f 	bl	8007638 <ST7789V_WriteCommand>

	ST7789V_SetRotation(this);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8fc 	bl	8007798 <ST7789V_SetRotation>

	ST7789V_SetAdress(this,0, 0, 240, 320);
 80075a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	23f0      	movs	r3, #240	; 0xf0
 80075a8:	2200      	movs	r2, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f90d 	bl	80077cc <ST7789V_SetAdress>
	ST7789V_DrawRect(this,0, 0, 240, 320, 0x0000);
 80075b2:	2300      	movs	r3, #0
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	23f0      	movs	r3, #240	; 0xf0
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f961 	bl	800788a <ST7789V_DrawRect>

}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40020400 	.word	0x40020400
 80075d4:	40020000 	.word	0x40020000
 80075d8:	2000859c 	.word	0x2000859c

080075dc <ST7789V_Reset>:
/*
  * @brief Resetuje ekran
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/
void ST7789V_Reset(ST7789V * this){
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(this->RST_Port, this->RST_Pin, GPIO_PIN_RESET);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	889b      	ldrh	r3, [r3, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	4619      	mov	r1, r3
 80075f0:	f7fb f958 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin, GPIO_PIN_RESET);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6918      	ldr	r0, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8a9b      	ldrh	r3, [r3, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	4619      	mov	r1, r3
 8007600:	f7fb f950 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8007604:	201e      	movs	r0, #30
 8007606:	f7fa fadd 	bl	8001bc4 <HAL_Delay>
	HAL_GPIO_WritePin(this->RST_Port, this->RST_Pin, GPIO_PIN_SET);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	889b      	ldrh	r3, [r3, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	4619      	mov	r1, r3
 8007616:	f7fb f945 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin, GPIO_PIN_SET);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6918      	ldr	r0, [r3, #16]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8a9b      	ldrh	r3, [r3, #20]
 8007622:	2201      	movs	r2, #1
 8007624:	4619      	mov	r1, r3
 8007626:	f7fb f93d 	bl	80028a4 <HAL_GPIO_WritePin>

	HAL_Delay(30);
 800762a:	201e      	movs	r0, #30
 800762c:	f7fa faca 	bl	8001bc4 <HAL_Delay>


}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <ST7789V_WriteCommand>:
  * @brief Funckja słuzaca do wpisywania komendy do pamieci ekranu
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void ST7789V_WriteCommand(ST7789V * this,uint8_t cmd){
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6918      	ldr	r0, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8a9b      	ldrh	r3, [r3, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	4619      	mov	r1, r3
 8007650:	f7fb f928 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_RESET);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6898      	ldr	r0, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	899b      	ldrh	r3, [r3, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	4619      	mov	r1, r3
 8007660:	f7fb f920 	bl	80028a4 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(this->pSpi, SPI_FLAG_TXE));
 8007664:	bf00      	nop
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d1f7      	bne.n	8007666 <ST7789V_WriteCommand+0x2e>
	HAL_SPI_Transmit(this->pSpi, &cmd, 1, HAL_MAX_DELAY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6998      	ldr	r0, [r3, #24]
 800767a:	1cf9      	adds	r1, r7, #3
 800767c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007680:	2201      	movs	r2, #1
 8007682:	f7fc ff06 	bl	8004492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6918      	ldr	r0, [r3, #16]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8a9b      	ldrh	r3, [r3, #20]
 800768e:	2201      	movs	r2, #1
 8007690:	4619      	mov	r1, r3
 8007692:	f7fb f907 	bl	80028a4 <HAL_GPIO_WritePin>

}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <ST7789V_WriteDataByte>:
/*
  * @brief Funckja słuzaca do wpisywania bajtu danych do pamieci ekranu
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/
void ST7789V_WriteDataByte(ST7789V * this,uint8_t data){
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6918      	ldr	r0, [r3, #16]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8a9b      	ldrh	r3, [r3, #20]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4619      	mov	r1, r3
 80076b6:	f7fb f8f5 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_SET);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6898      	ldr	r0, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	899b      	ldrh	r3, [r3, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	f7fb f8ed 	bl	80028a4 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(this->pSpi, SPI_FLAG_TXE));
 80076ca:	bf00      	nop
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d1f7      	bne.n	80076cc <ST7789V_WriteDataByte+0x2e>
	HAL_SPI_Transmit(this->pSpi, &data, 1, HAL_MAX_DELAY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6998      	ldr	r0, [r3, #24]
 80076e0:	1cf9      	adds	r1, r7, #3
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076e6:	2201      	movs	r2, #1
 80076e8:	f7fc fed3 	bl	8004492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6918      	ldr	r0, [r3, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8a9b      	ldrh	r3, [r3, #20]
 80076f4:	2201      	movs	r2, #1
 80076f6:	4619      	mov	r1, r3
 80076f8:	f7fb f8d4 	bl	80028a4 <HAL_GPIO_WritePin>


}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <ST7789V_WriteData>:
  * @brief Funckja słuzaca do wpisywania tablicy  danych do pamieci ekranu
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void ST7789V_WriteData(ST7789V * this,uint8_t *buff,uint32_t buffSize){
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_RESET);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6918      	ldr	r0, [r3, #16]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8a9b      	ldrh	r3, [r3, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	4619      	mov	r1, r3
 800771c:	f7fb f8c2 	bl	80028a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->DC_Port,this->DC_Pin, GPIO_PIN_SET);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6898      	ldr	r0, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	899b      	ldrh	r3, [r3, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	4619      	mov	r1, r3
 800772c:	f7fb f8ba 	bl	80028a4 <HAL_GPIO_WritePin>

	uint16_t DataSize;
	uint32_t buffsize=buffSize;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	613b      	str	r3, [r7, #16]
	while(buffsize>0){
 8007734:	e021      	b.n	800777a <ST7789V_WriteData+0x76>
		if (buffsize>65535)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773c:	d303      	bcc.n	8007746 <ST7789V_WriteData+0x42>
			DataSize=65535;
 800773e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007742:	82fb      	strh	r3, [r7, #22]
 8007744:	e001      	b.n	800774a <ST7789V_WriteData+0x46>
		else
			DataSize=buffsize;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	82fb      	strh	r3, [r7, #22]
		HAL_SPI_Transmit_DMA(this->pSpi, buff,DataSize);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	8afa      	ldrh	r2, [r7, #22]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f7fd fa8c 	bl	8004c70 <HAL_SPI_Transmit_DMA>
		while (this->pSpi->hdmatx->State != HAL_DMA_STATE_READY);
 8007758:	bf00      	nop
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b01      	cmp	r3, #1
 8007768:	d1f7      	bne.n	800775a <ST7789V_WriteData+0x56>
		buff+=DataSize;
 800776a:	8afb      	ldrh	r3, [r7, #22]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	60bb      	str	r3, [r7, #8]
		buffsize-=DataSize;
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	613b      	str	r3, [r7, #16]
	while(buffsize>0){
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1da      	bne.n	8007736 <ST7789V_WriteData+0x32>

	}
	HAL_GPIO_WritePin(this->CS_port,this->CS_Pin , GPIO_PIN_SET);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6918      	ldr	r0, [r3, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8a9b      	ldrh	r3, [r3, #20]
 8007788:	2201      	movs	r2, #1
 800778a:	4619      	mov	r1, r3
 800778c:	f7fb f88a 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8007790:	bf00      	nop
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <ST7789V_SetRotation>:
  * @brief Ustawia orientacje ekranu
  * @param  this - wskaznik na strukture ST7789V
  * @retval None
*/

void ST7789V_SetRotation(ST7789V * this){
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	ST7789V_WriteCommand(this,ST7789V_MADCTL_REG);
 80077a0:	2136      	movs	r1, #54	; 0x36
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff ff48 	bl	8007638 <ST7789V_WriteCommand>
	HAL_Delay(1);
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7fa fa0b 	bl	8001bc4 <HAL_Delay>
	ST7789V_WriteDataByte(this, 0x00|0x00);
 80077ae:	2100      	movs	r1, #0
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ff74 	bl	800769e <ST7789V_WriteDataByte>
	this->LCD_Height=320;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80077bc:	839a      	strh	r2, [r3, #28]
	this->LCD_Width=240;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	22f0      	movs	r2, #240	; 0xf0
 80077c2:	83da      	strh	r2, [r3, #30]

}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <ST7789V_SetAdress>:
  * @param X1 - wspołzedne X ostatniego pixela
  * @param Y1 - wspołzedne Y ostatniego pixela
  * @retval None
*/

void ST7789V_SetAdress(ST7789V* this,uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1){
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	4608      	mov	r0, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	461a      	mov	r2, r3
 80077da:	4603      	mov	r3, r0
 80077dc:	817b      	strh	r3, [r7, #10]
 80077de:	460b      	mov	r3, r1
 80077e0:	813b      	strh	r3, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
	if(X0>X1){
 80077e6:	897a      	ldrh	r2, [r7, #10]
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d905      	bls.n	80077fa <ST7789V_SetAdress+0x2e>
		uint16_t temp1=X0;
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	83fb      	strh	r3, [r7, #30]
		X0=X1;
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	817b      	strh	r3, [r7, #10]
		X1=temp1;
 80077f6:	8bfb      	ldrh	r3, [r7, #30]
 80077f8:	80fb      	strh	r3, [r7, #6]
	}

	if(Y0>Y1){
 80077fa:	893a      	ldrh	r2, [r7, #8]
 80077fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077fe:	429a      	cmp	r2, r3
 8007800:	d905      	bls.n	800780e <ST7789V_SetAdress+0x42>
		uint16_t temp2=Y0;
 8007802:	893b      	ldrh	r3, [r7, #8]
 8007804:	83bb      	strh	r3, [r7, #28]
		Y0=Y1;
 8007806:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007808:	813b      	strh	r3, [r7, #8]
		Y1=temp2;
 800780a:	8bbb      	ldrh	r3, [r7, #28]
 800780c:	853b      	strh	r3, [r7, #40]	; 0x28
	}
	ST7789V_WriteCommand(this, ST7789V_CASET_REG);
 800780e:	212a      	movs	r1, #42	; 0x2a
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff ff11 	bl	8007638 <ST7789V_WriteCommand>
	uint8_t adressX[4]={X0>>8,X0 & 0xFF,X1>>8,X1 & 0xFF};
 8007816:	897b      	ldrh	r3, [r7, #10]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	b29b      	uxth	r3, r3
 800781c:	b2db      	uxtb	r3, r3
 800781e:	763b      	strb	r3, [r7, #24]
 8007820:	897b      	ldrh	r3, [r7, #10]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	767b      	strb	r3, [r7, #25]
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	b29b      	uxth	r3, r3
 800782c:	b2db      	uxtb	r3, r3
 800782e:	76bb      	strb	r3, [r7, #26]
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	76fb      	strb	r3, [r7, #27]
	ST7789V_WriteData(this, adressX, 4);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	2204      	movs	r2, #4
 800783c:	4619      	mov	r1, r3
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff ff60 	bl	8007704 <ST7789V_WriteData>
	ST7789V_WriteCommand(this, ST7789V_RASET_REG);
 8007844:	212b      	movs	r1, #43	; 0x2b
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7ff fef6 	bl	8007638 <ST7789V_WriteCommand>
	uint8_t adressY[4]={Y0>>8,Y0 & 0xFF,Y1>>8,Y1 & 0xFF};
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	0a1b      	lsrs	r3, r3, #8
 8007850:	b29b      	uxth	r3, r3
 8007852:	b2db      	uxtb	r3, r3
 8007854:	753b      	strb	r3, [r7, #20]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	757b      	strb	r3, [r7, #21]
 800785c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	b2db      	uxtb	r3, r3
 8007864:	75bb      	strb	r3, [r7, #22]
 8007866:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007868:	b2db      	uxtb	r3, r3
 800786a:	75fb      	strb	r3, [r7, #23]
	ST7789V_WriteData(this, adressY, 4);
 800786c:	f107 0314 	add.w	r3, r7, #20
 8007870:	2204      	movs	r2, #4
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff ff45 	bl	8007704 <ST7789V_WriteData>
	ST7789V_WriteCommand(this, ST7789V_RAMWR_REG);
 800787a:	212c      	movs	r1, #44	; 0x2c
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f7ff fedb 	bl	8007638 <ST7789V_WriteCommand>


}
 8007882:	bf00      	nop
 8007884:	3720      	adds	r7, #32
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <ST7789V_DrawRect>:
  * @param Y1 - wspołzedne Y ostatniego pixela
  * @param color - kolor prostokąta
  * @retval None
*/

void ST7789V_DrawRect(ST7789V *this,uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color){
 800788a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788e:	b097      	sub	sp, #92	; 0x5c
 8007890:	af02      	add	r7, sp, #8
 8007892:	6178      	str	r0, [r7, #20]
 8007894:	4608      	mov	r0, r1
 8007896:	4611      	mov	r1, r2
 8007898:	461a      	mov	r2, r3
 800789a:	4603      	mov	r3, r0
 800789c:	827b      	strh	r3, [r7, #18]
 800789e:	460b      	mov	r3, r1
 80078a0:	823b      	strh	r3, [r7, #16]
 80078a2:	4613      	mov	r3, r2
 80078a4:	81fb      	strh	r3, [r7, #14]
 80078a6:	466b      	mov	r3, sp
 80078a8:	461e      	mov	r6, r3
	if(X0>X1){
 80078aa:	8a7a      	ldrh	r2, [r7, #18]
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d907      	bls.n	80078c2 <ST7789V_DrawRect+0x38>
		uint16_t temp1=X0;
 80078b2:	8a7b      	ldrh	r3, [r7, #18]
 80078b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		X0=X1;
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	827b      	strh	r3, [r7, #18]
		X1=temp1;
 80078bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078c0:	81fb      	strh	r3, [r7, #14]
	}

	if(Y0>Y1){
 80078c2:	8a3a      	ldrh	r2, [r7, #16]
 80078c4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d909      	bls.n	80078e0 <ST7789V_DrawRect+0x56>
		uint16_t temp2=Y0;
 80078cc:	8a3b      	ldrh	r3, [r7, #16]
 80078ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		Y0=Y1;
 80078d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80078d6:	823b      	strh	r3, [r7, #16]
		Y1=temp2;
 80078d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	}
	ST7789V_SetAdress(this, X0, Y0, X1, Y1);
 80078e0:	89f8      	ldrh	r0, [r7, #14]
 80078e2:	8a3a      	ldrh	r2, [r7, #16]
 80078e4:	8a79      	ldrh	r1, [r7, #18]
 80078e6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4603      	mov	r3, r0
 80078ee:	6978      	ldr	r0, [r7, #20]
 80078f0:	f7ff ff6c 	bl	80077cc <ST7789V_SetAdress>
	uint16_t X_size=X1-X0+1;
 80078f4:	89fa      	ldrh	r2, [r7, #14]
 80078f6:	8a7b      	ldrh	r3, [r7, #18]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3301      	adds	r3, #1
 80078fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t Y_size=Y1-Y0+1;
 8007902:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8007906:	8a3b      	ldrh	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	3301      	adds	r3, #1
 800790e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t colorA=color>>8;
 8007910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	b29b      	uxth	r3, r3
 8007918:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t colorB=color & 0xFF;
 800791c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8007920:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint32_t dataSize=X_size*Y_size*2;
 8007924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007928:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t chunkDataSize=200*2; //even number
 8007932:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t chunks=dataSize/chunkDataSize;
 8007938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t restDataSize=dataSize-chunks*chunkDataSize;
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t buff[chunkDataSize];
 8007950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007952:	460b      	mov	r3, r1
 8007954:	3b01      	subs	r3, #1
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
 8007958:	2300      	movs	r3, #0
 800795a:	6039      	str	r1, [r7, #0]
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	00c3      	lsls	r3, r0, #3
 800796a:	6838      	ldr	r0, [r7, #0]
 800796c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007970:	6838      	ldr	r0, [r7, #0]
 8007972:	00c2      	lsls	r2, r0, #3
 8007974:	2300      	movs	r3, #0
 8007976:	468a      	mov	sl, r1
 8007978:	469b      	mov	fp, r3
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007986:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800798a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800798e:	1dcb      	adds	r3, r1, #7
 8007990:	08db      	lsrs	r3, r3, #3
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	ebad 0d03 	sub.w	sp, sp, r3
 8007998:	ab02      	add	r3, sp, #8
 800799a:	3300      	adds	r3, #0
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buffRest[restDataSize];
 800799e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a0:	460b      	mov	r3, r1
 80079a2:	3b01      	subs	r3, #1
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	2300      	movs	r3, #0
 80079a8:	4688      	mov	r8, r1
 80079aa:	4699      	mov	r9, r3
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079c0:	2300      	movs	r3, #0
 80079c2:	460c      	mov	r4, r1
 80079c4:	461d      	mov	r5, r3
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	f04f 0300 	mov.w	r3, #0
 80079ce:	00eb      	lsls	r3, r5, #3
 80079d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079d4:	00e2      	lsls	r2, r4, #3
 80079d6:	1dcb      	adds	r3, r1, #7
 80079d8:	08db      	lsrs	r3, r3, #3
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	ebad 0d03 	sub.w	sp, sp, r3
 80079e0:	ab02      	add	r3, sp, #8
 80079e2:	3300      	adds	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 80079e6:	2300      	movs	r3, #0
 80079e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ea:	e00e      	b.n	8007a0a <ST7789V_DrawRect+0x180>
		buff[i]=colorA;
 80079ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f0:	4413      	add	r3, r2
 80079f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80079f6:	701a      	strb	r2, [r3, #0]
		buff[i+1]=colorB;
 80079f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fa:	3301      	adds	r3, #1
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8007a02:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 8007a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a06:	3302      	adds	r3, #2
 8007a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3ec      	bcc.n	80079ec <ST7789V_DrawRect+0x162>
	}
	for(uint32_t i =0;i<restDataSize;i+=2){
 8007a12:	2300      	movs	r3, #0
 8007a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a16:	e00e      	b.n	8007a36 <ST7789V_DrawRect+0x1ac>
		buffRest[i]=colorA;
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a22:	701a      	strb	r2, [r3, #0]
		buffRest[i+1]=colorB;
 8007a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a26:	3301      	adds	r3, #1
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8007a2e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<restDataSize;i+=2){
 8007a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a32:	3302      	adds	r3, #2
 8007a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d3ec      	bcc.n	8007a18 <ST7789V_DrawRect+0x18e>
	}
	for(uint16_t i=0;i<chunks;i++){
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a44:	e009      	b.n	8007a5a <ST7789V_DrawRect+0x1d0>

		ST7789V_WriteData(this, buff, chunkDataSize);
 8007a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a4a:	6978      	ldr	r0, [r7, #20]
 8007a4c:	f7ff fe5a 	bl	8007704 <ST7789V_WriteData>
	for(uint16_t i=0;i<chunks;i++){
 8007a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a54:	3301      	adds	r3, #1
 8007a56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d8f0      	bhi.n	8007a46 <ST7789V_DrawRect+0x1bc>

	}
	ST7789V_WriteData(this, buffRest, restDataSize);
 8007a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a66:	69f9      	ldr	r1, [r7, #28]
 8007a68:	6978      	ldr	r0, [r7, #20]
 8007a6a:	f7ff fe4b 	bl	8007704 <ST7789V_WriteData>
 8007a6e:	46b5      	mov	sp, r6
}
 8007a70:	bf00      	nop
 8007a72:	3754      	adds	r7, #84	; 0x54
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a7a <ST7789V_WriteChar>:
 * @param bgcolor - kolor tla
 * @return  none
 */


void ST7789V_WriteChar(ST7789V * this,uint16_t X0, uint16_t Y0, char ch, FontDef font, uint16_t color, uint16_t bgcolor){
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b08c      	sub	sp, #48	; 0x30
 8007a7e:	af02      	add	r7, sp, #8
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	461a      	mov	r2, r3
 8007a88:	4603      	mov	r3, r0
 8007a8a:	817b      	strh	r3, [r7, #10]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	813b      	strh	r3, [r7, #8]
 8007a90:	4613      	mov	r3, r2
 8007a92:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;
	ST7789V_SetAdress(this,X0,Y0,X0 + font.width - 1,Y0 + font.height - 1);
 8007a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	897b      	ldrh	r3, [r7, #10]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b298      	uxth	r0, r3
 8007aa4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	893b      	ldrh	r3, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	893a      	ldrh	r2, [r7, #8]
 8007ab6:	8979      	ldrh	r1, [r7, #10]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4603      	mov	r3, r0
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fe85 	bl	80077cc <ST7789V_SetAdress>
	for (i = 0; i < font.height; i++) {
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac6:	e043      	b.n	8007b50 <ST7789V_WriteChar+0xd6>
		b = font.data[(ch - 32) * font.height + i];
 8007ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	3b20      	subs	r3, #32
 8007ace:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	440b      	add	r3, r1
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < font.width; j++) {
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	623b      	str	r3, [r7, #32]
 8007ae8:	e029      	b.n	8007b3e <ST7789V_WriteChar+0xc4>
			if ((b << j) & 0x8000) {
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <ST7789V_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8007afa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007afc:	0a1b      	lsrs	r3, r3, #8
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	763b      	strb	r3, [r7, #24]
 8007b04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	767b      	strb	r3, [r7, #25]
				ST7789V_WriteData( this,data, sizeof(data));
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	2202      	movs	r2, #2
 8007b10:	4619      	mov	r1, r3
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fdf6 	bl	8007704 <ST7789V_WriteData>
 8007b18:	e00e      	b.n	8007b38 <ST7789V_WriteChar+0xbe>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8007b1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	753b      	strb	r3, [r7, #20]
 8007b24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	757b      	strb	r3, [r7, #21]
				ST7789V_WriteData( this,data, sizeof(data));
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	2202      	movs	r2, #2
 8007b30:	4619      	mov	r1, r3
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fde6 	bl	8007704 <ST7789V_WriteData>
		for (j = 0; j < font.width; j++) {
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	623b      	str	r3, [r7, #32]
 8007b3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007b42:	461a      	mov	r2, r3
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d3cf      	bcc.n	8007aea <ST7789V_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b50:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007b54:	461a      	mov	r2, r3
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d3b5      	bcc.n	8007ac8 <ST7789V_WriteChar+0x4e>
			}
		}
	}
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <XPT2046_TouchSelect>:
#endif



static void XPT2046_TouchSelect()
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b72:	4802      	ldr	r0, [pc, #8]	; (8007b7c <XPT2046_TouchSelect+0x14>)
 8007b74:	f7fa fe96 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	40020000 	.word	0x40020000

08007b80 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port,  ADC_CS_Pin, GPIO_PIN_SET);
 8007b84:	2201      	movs	r2, #1
 8007b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b8a:	4802      	ldr	r0, [pc, #8]	; (8007b94 <XPT2046_TouchUnselect+0x14>)
 8007b8c:	f7fa fe8a 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40020000 	.word	0x40020000

08007b98 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ADC_IRQ_GPIO_Port, ADC_IRQ_Pin) == GPIO_PIN_RESET;
 8007b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ba0:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <XPT2046_TouchPressed+0x20>)
 8007ba2:	f7fa fe67 	bl	8002874 <HAL_GPIO_ReadPin>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40020000 	.word	0x40020000

08007bbc <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	; 0x30
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 8007bc6:	f7ff ffcf 	bl	8007b68 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	77bb      	strb	r3, [r7, #30]
 8007bda:	e03f      	b.n	8007c5c <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8007bdc:	f7ff ffdc 	bl	8007b98 <XPT2046_TouchPressed>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f083 0301 	eor.w	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d13b      	bne.n	8007c64 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	77fb      	strb	r3, [r7, #31]
        uint8_t y_raw[2];
        uint8_t x_raw[2];



        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4945      	ldr	r1, [pc, #276]	; (8007d10 <XPT2046_TouchGetCoordinates+0x154>)
 8007bfa:	4846      	ldr	r0, [pc, #280]	; (8007d14 <XPT2046_TouchGetCoordinates+0x158>)
 8007bfc:	f7fc fc49 	bl	8004492 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8007c00:	f107 0210 	add.w	r2, r7, #16
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	4942      	ldr	r1, [pc, #264]	; (8007d18 <XPT2046_TouchGetCoordinates+0x15c>)
 8007c0e:	4841      	ldr	r0, [pc, #260]	; (8007d14 <XPT2046_TouchGetCoordinates+0x158>)
 8007c10:	f7fc fe8c 	bl	800492c <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c18:	2201      	movs	r2, #1
 8007c1a:	4940      	ldr	r1, [pc, #256]	; (8007d1c <XPT2046_TouchGetCoordinates+0x160>)
 8007c1c:	483d      	ldr	r0, [pc, #244]	; (8007d14 <XPT2046_TouchGetCoordinates+0x158>)
 8007c1e:	f7fc fc38 	bl	8004492 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8007c22:	f107 020c 	add.w	r2, r7, #12
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	493a      	ldr	r1, [pc, #232]	; (8007d18 <XPT2046_TouchGetCoordinates+0x15c>)
 8007c30:	4838      	ldr	r0, [pc, #224]	; (8007d14 <XPT2046_TouchGetCoordinates+0x158>)
 8007c32:	f7fc fe7b 	bl	800492c <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8007c36:	7b3b      	ldrb	r3, [r7, #12]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	7b7a      	ldrb	r2, [r7, #13]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	4413      	add	r3, r2
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8007c46:	7c3b      	ldrb	r3, [r7, #16]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	7c7a      	ldrb	r2, [r7, #17]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	4413      	add	r3, r2
 8007c54:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8007c56:	7fbb      	ldrb	r3, [r7, #30]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	77bb      	strb	r3, [r7, #30]
 8007c5c:	7fbb      	ldrb	r3, [r7, #30]
 8007c5e:	2b0f      	cmp	r3, #15
 8007c60:	d9bc      	bls.n	8007bdc <XPT2046_TouchGetCoordinates+0x20>
 8007c62:	e000      	b.n	8007c66 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8007c64:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8007c66:	f7ff ff8b 	bl	8007b80 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8007c6a:	7ffb      	ldrb	r3, [r7, #31]
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d801      	bhi.n	8007c74 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e049      	b.n	8007d08 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f640 5247 	movw	r2, #3399	; 0xd47
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d802      	bhi.n	8007c8a <XPT2046_TouchGetCoordinates+0xce>
 8007c84:	f640 5348 	movw	r3, #3400	; 0xd48
 8007c88:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	f247 1248 	movw	r2, #29000	; 0x7148
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d902      	bls.n	8007c9a <XPT2046_TouchGetCoordinates+0xde>
 8007c94:	f247 1348 	movw	r3, #29000	; 0x7148
 8007c98:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f640 42e3 	movw	r2, #3299	; 0xce3
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d802      	bhi.n	8007cb0 <XPT2046_TouchGetCoordinates+0xf4>
 8007caa:	f640 43e4 	movw	r3, #3300	; 0xce4
 8007cae:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f247 5230 	movw	r2, #30000	; 0x7530
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d902      	bls.n	8007cc0 <XPT2046_TouchGetCoordinates+0x104>
 8007cba:	f247 5330 	movw	r3, #30000	; 0x7530
 8007cbe:	617b      	str	r3, [r7, #20]


#if (ORIENTATION == 0)
	*x = 240-(raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	f5a3 2347 	sub.w	r3, r3, #815104	; 0xc7000
 8007cce:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8007cd2:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <XPT2046_TouchGetCoordinates+0x164>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	0b5b      	lsrs	r3, r3, #13
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	019b      	lsls	r3, r3, #6
 8007cf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007cf4:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8007cf8:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <XPT2046_TouchGetCoordinates+0x168>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	0b5b      	lsrs	r3, r3, #13
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8007d06:	2301      	movs	r3, #1
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3728      	adds	r7, #40	; 0x28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	0800919c 	.word	0x0800919c
 8007d14:	2000864c 	.word	0x2000864c
 8007d18:	080091a0 	.word	0x080091a0
 8007d1c:	080091a4 	.word	0x080091a4
 8007d20:	51eb851f 	.word	0x51eb851f
 8007d24:	4e8b8659 	.word	0x4e8b8659

08007d28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	4613      	mov	r3, r2
 8007d34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d40:	7a5b      	ldrb	r3, [r3, #9]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d131      	bne.n	8007dac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d4a:	7a5b      	ldrb	r3, [r3, #9]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d52:	2100      	movs	r1, #0
 8007d54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d58:	7a5b      	ldrb	r3, [r3, #9]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d66:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d68:	7a5b      	ldrb	r3, [r3, #9]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d70:	4413      	add	r3, r2
 8007d72:	79fa      	ldrb	r2, [r7, #7]
 8007d74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d78:	7a5b      	ldrb	r3, [r3, #9]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	b2d1      	uxtb	r1, r2
 8007d80:	4a0e      	ldr	r2, [pc, #56]	; (8007dbc <FATFS_LinkDriverEx+0x94>)
 8007d82:	7251      	strb	r1, [r2, #9]
 8007d84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d86:	7dbb      	ldrb	r3, [r7, #22]
 8007d88:	3330      	adds	r3, #48	; 0x30
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3301      	adds	r3, #1
 8007d94:	223a      	movs	r2, #58	; 0x3a
 8007d96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	222f      	movs	r2, #47	; 0x2f
 8007d9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	3303      	adds	r3, #3
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20008768 	.word	0x20008768

08007dc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff ffaa 	bl	8007d28 <FATFS_LinkDriverEx>
 8007dd4:	4603      	mov	r3, r0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <INIT_NETINFO>:
  * @brief 	Inicjalizuje parametry i dane potrzebne do sieci neuronowej
  * @param  this - wskaznik na strukture NET_INFO
  * @retval None
*/

void INIT_NETINFO(NET_INFO* this){
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]

	//TU BEDZIE SIE ZCZYTYWAC DANE Z 1 STRONY KARY SD
	//WARTOSCI PONIZEJ SA TESTOWE
	this->page_addres_W1_start=1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	601a      	str	r2, [r3, #0]
	this->page_addres_W1_vector_size=25;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2219      	movs	r2, #25
 8007df0:	605a      	str	r2, [r3, #4]
	this->W1_size=1024;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007df8:	609a      	str	r2, [r3, #8]
	this->W1_pages_size=25*1024;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8007e00:	60da      	str	r2, [r3, #12]
	this->page_addres_B1_start=25*1024+1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f246 4201 	movw	r2, #25601	; 0x6401
 8007e08:	611a      	str	r2, [r3, #16]
	this->B1_pages_size=32;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	615a      	str	r2, [r3, #20]

	this->page_addres_W2_start=(1024*25)+(1+32);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f246 4221 	movw	r2, #25633	; 0x6421
 8007e16:	619a      	str	r2, [r3, #24]
	this->page_addres_W2_vector_size=32;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	61da      	str	r2, [r3, #28]
	this->W2_size=512;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e24:	621a      	str	r2, [r3, #32]
	this->W2_pages_size=32*512;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24
	this->page_addres_B2_start=(1024*25)+(1+32)+32*512;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f24a 4221 	movw	r2, #42017	; 0xa421
 8007e34:	629a      	str	r2, [r3, #40]	; 0x28
	this->B2_pages_size=16;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	62da      	str	r2, [r3, #44]	; 0x2c

	this->page_addres_W3_start=(1024*25)+(1+32)+32*512 +16;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f24a 4231 	movw	r2, #42033	; 0xa431
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
	this->page_addres_W3_vector_size=16;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2210      	movs	r2, #16
 8007e48:	635a      	str	r2, [r3, #52]	; 0x34
	this->W3_size=10;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220a      	movs	r2, #10
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
	this->W3_pages_size=16*10;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	22a0      	movs	r2, #160	; 0xa0
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c
	this->page_addres_B3_start=(1024*25)+(1+32)+32*512+16*10;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f24a 42c1 	movw	r2, #42177	; 0xa4c1
 8007e5c:	641a      	str	r2, [r3, #64]	; 0x40
	this->B3_pages_size=1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <Init_ForwardPass>:
  * @param  this - wskaznik na strukture Linear
  * @param Net_size - ilosc neuronóœ w warstwie
  * @retval None
*/

void Init_ForwardPass(ForwardPass * this,NET * net,NET_INFO * ndata,MEMORY * mem){
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
	this->w28q64=mem;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	609a      	str	r2, [r3, #8]
	this->NeuralNetwork=net;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	601a      	str	r2, [r3, #0]
	this->net_data=ndata;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <FP_Load_Input>:
  * @brief WPISUJEMY do tablicy na wejsciu warstwy dane wartosci z tablicy buff
  * @param  this - wskaznik na strukture ForwardPass
  * @param buff - wskaznik na tablice kóra wpisujemy do tablicy DATABUF
  * @retval None
*/
void FP_Load_Input(ForwardPass * this,uint8_t * buff){
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	for(uint16_t i=0;i<INPUT_SIZE;i++){
 8007eaa:	2300      	movs	r3, #0
 8007eac:	81fb      	strh	r3, [r7, #14]
 8007eae:	e017      	b.n	8007ee0 <FP_Load_Input+0x40>
		this->DATABUF[i]=((double)(buff[i]))/255;
 8007eb0:	89fb      	ldrh	r3, [r7, #14]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7f8 facf 	bl	800045c <__aeabi_ui2d>
 8007ebe:	89fc      	ldrh	r4, [r7, #14]
 8007ec0:	a30d      	add	r3, pc, #52	; (adr r3, 8007ef8 <FP_Load_Input+0x58>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fc6d 	bl	80007a4 <__aeabi_ddiv>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	1ca1      	adds	r1, r4, #2
 8007ed2:	00c9      	lsls	r1, r1, #3
 8007ed4:	4401      	add	r1, r0
 8007ed6:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i=0;i<INPUT_SIZE;i++){
 8007eda:	89fb      	ldrh	r3, [r7, #14]
 8007edc:	3301      	adds	r3, #1
 8007ede:	81fb      	strh	r3, [r7, #14]
 8007ee0:	89fb      	ldrh	r3, [r7, #14]
 8007ee2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007ee6:	d3e3      	bcc.n	8007eb0 <FP_Load_Input+0x10>
	}
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd90      	pop	{r4, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	406fe000 	.word	0x406fe000

08007f00 <FP_Load_W1_wector>:
  * @brief Odczytujemy z pamieci wektor wag pierwszej warstwy i wpisujemy go do tablicy wag WEIGHTBUFF
  * @param  this - wskaznik na strukture ForwardPass
  * @param 	vector number - numer wektora do zczytania z pamieci
  * @retval None
*/
void FP_Load_W1_wector(ForwardPass * this,uint32_t vector_number){
 8007f00:	b590      	push	{r4, r7, lr}
 8007f02:	b0c7      	sub	sp, #284	; 0x11c
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f0e:	6018      	str	r0, [r3, #0]
 8007f10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f18:	6019      	str	r1, [r3, #0]
	//1023 max index wektora
	for(uint32_t i=0;i<this->net_data->page_addres_W1_vector_size;i++){
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f20:	e0a8      	b.n	8008074 <FP_Load_W1_wector+0x174>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_W1_start +i+this->net_data->page_addres_W1_vector_size*vector_number), read_buffer, W25Q64_PAGE_SIZE);
 8007f22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6898      	ldr	r0, [r3, #8]
 8007f2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f40:	441a      	add	r2, r3
 8007f42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8007f54:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8007f58:	6809      	ldr	r1, [r1, #0]
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	0219      	lsls	r1, r3, #8
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6a:	f001 f844 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f74:	e075      	b.n	8008062 <FP_Load_W1_wector+0x162>
			convert_buff[0]=read_buffer[i*8];
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007f80:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007f84:	5cd3      	ldrb	r3, [r2, r3]
 8007f86:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	3301      	adds	r3, #1
 8007f92:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007f96:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007f9a:	5cd3      	ldrb	r3, [r2, r3]
 8007f9c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007fac:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007fb0:	5cd3      	ldrb	r3, [r2, r3]
 8007fb2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	3303      	adds	r3, #3
 8007fbe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007fc2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007fc6:	5cd3      	ldrb	r3, [r2, r3]
 8007fc8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 8007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007fd8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007fdc:	5cd3      	ldrb	r3, [r2, r3]
 8007fde:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	3305      	adds	r3, #5
 8007fea:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007fee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007ff2:	5cd3      	ldrb	r3, [r2, r3]
 8007ff4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	3306      	adds	r3, #6
 8008000:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008004:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008008:	5cd3      	ldrb	r3, [r2, r3]
 800800a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	3307      	adds	r3, #7
 8008016:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800801a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800801e:	5cd3      	ldrb	r3, [r2, r3]
 8008020:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->WEIGHTBUFF[i*32+j]=ReconstructDouble(convert_buff);
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800802e:	18d4      	adds	r4, r2, r3
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fe0a 	bl	8008c4e <ReconstructDouble>
 800803a:	eeb0 7a40 	vmov.f32	s14, s0
 800803e:	eef0 7a60 	vmov.f32	s15, s1
 8008042:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008046:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	f204 4302 	addw	r3, r4, #1026	; 0x402
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 8008058:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800805c:	3301      	adds	r3, #1
 800805e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008062:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008066:	2b1f      	cmp	r3, #31
 8008068:	d985      	bls.n	8007f76 <FP_Load_W1_wector+0x76>
	for(uint32_t i=0;i<this->net_data->page_addres_W1_vector_size;i++){
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008074:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008078:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008086:	429a      	cmp	r2, r3
 8008088:	f4ff af4b 	bcc.w	8007f22 <FP_Load_W1_wector+0x22>
		}
	}
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8008094:	46bd      	mov	sp, r7
 8008096:	bd90      	pop	{r4, r7, pc}

08008098 <FP_Load_B1>:
/*
  * @brief Odczytujemy z pamieci biasy dla pierwszej  warstwy i wpisujemy go do tablicy biasów BIAS
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/
void FP_Load_B1(ForwardPass * this){
 8008098:	b590      	push	{r4, r7, lr}
 800809a:	b0c7      	sub	sp, #284	; 0x11c
 800809c:	af00      	add	r7, sp, #0
 800809e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80080a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80080a6:	6018      	str	r0, [r3, #0]
	//1023 max index wektora
	for(uint32_t i=0;i<this->net_data->B1_pages_size;i++){
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080ae:	e099      	b.n	80081e4 <FP_Load_B1+0x14c>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_B1_start +i), read_buffer, W25Q64_PAGE_SIZE);
 80080b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80080b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6898      	ldr	r0, [r3, #8]
 80080bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80080c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ce:	4413      	add	r3, r2
 80080d0:	0219      	lsls	r1, r3, #8
 80080d2:	f107 0208 	add.w	r2, r7, #8
 80080d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080da:	f000 ff8c 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 80080de:	2300      	movs	r3, #0
 80080e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080e4:	e075      	b.n	80081d2 <FP_Load_B1+0x13a>
			convert_buff[0]=read_buffer[i*8];
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80080f0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80080f4:	5cd3      	ldrb	r3, [r2, r3]
 80080f6:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	3301      	adds	r3, #1
 8008102:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008106:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800810a:	5cd3      	ldrb	r3, [r2, r3]
 800810c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 8008110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	3302      	adds	r3, #2
 8008118:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800811c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008120:	5cd3      	ldrb	r3, [r2, r3]
 8008122:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	3303      	adds	r3, #3
 800812e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008132:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008136:	5cd3      	ldrb	r3, [r2, r3]
 8008138:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	3304      	adds	r3, #4
 8008144:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008148:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800814c:	5cd3      	ldrb	r3, [r2, r3]
 800814e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 8008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	3305      	adds	r3, #5
 800815a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800815e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008162:	5cd3      	ldrb	r3, [r2, r3]
 8008164:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	3306      	adds	r3, #6
 8008170:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008174:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008178:	5cd3      	ldrb	r3, [r2, r3]
 800817a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	3307      	adds	r3, #7
 8008186:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800818a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800818e:	5cd3      	ldrb	r3, [r2, r3]
 8008190:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->BIAS[i*32+j]=ReconstructDouble(convert_buff);
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800819e:	18d4      	adds	r4, r2, r3
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fd52 	bl	8008c4e <ReconstructDouble>
 80081aa:	eeb0 7a40 	vmov.f32	s14, s0
 80081ae:	eef0 7a60 	vmov.f32	s15, s1
 80081b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80081b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f604 4302 	addw	r3, r4, #3074	; 0xc02
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	4413      	add	r3, r2
 80081c4:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 80081c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80081cc:	3301      	adds	r3, #1
 80081ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80081d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80081d6:	2b1f      	cmp	r3, #31
 80081d8:	d985      	bls.n	80080e6 <FP_Load_B1+0x4e>
	for(uint32_t i=0;i<this->net_data->B1_pages_size;i++){
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	3301      	adds	r3, #1
 80081e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80081e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80081f6:	429a      	cmp	r2, r3
 80081f8:	f4ff af5a 	bcc.w	80080b0 <FP_Load_B1+0x18>
		}
	}
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8008204:	46bd      	mov	sp, r7
 8008206:	bd90      	pop	{r4, r7, pc}

08008208 <FP_Forward_PassFirstLayer>:
  * i wpisujac wuniki do tablicy LAYEROUTBUF gdzie następnie po przejsciu przez całą warstwe dane z  LAYEROUTBUF
  * sa wpisywane na DATABUF czyli nasza tablcie wejsciowa co umozliwy dalsza propagacje
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/
void FP_Forward_PassFirstLayer(ForwardPass * this){
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	double val;
	FP_Load_B1(this);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ff41 	bl	8008098 <FP_Load_B1>
	for(uint32_t i=0;i<this->net_data->W1_size;i++){
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	e05c      	b.n	80082d6 <FP_Forward_PassFirstLayer+0xce>
		val=0;
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9c7 2306 	strd	r2, r3, [r7, #24]
		FP_Load_W1_wector(this, i);
 8008228:	6979      	ldr	r1, [r7, #20]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fe68 	bl	8007f00 <FP_Load_W1_wector>
		for(uint32_t j=0;j<INPUT_SIZE;j++){
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	e01d      	b.n	8008272 <FP_Forward_PassFirstLayer+0x6a>
			val+=this->DATABUF[j]*this->WEIGHTBUFF[j];
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	3302      	adds	r3, #2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	4413      	add	r3, r2
 8008240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f97c 	bl	8000550 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008260:	f7f7 ffc0 	bl	80001e4 <__adddf3>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(uint32_t j=0;j<INPUT_SIZE;j++){
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	3301      	adds	r3, #1
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008278:	d3dd      	bcc.n	8008236 <FP_Forward_PassFirstLayer+0x2e>
		}
		val+=this->BIAS[i];
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f603 4302 	addw	r3, r3, #3074	; 0xc02
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4413      	add	r3, r2
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800828e:	f7f7 ffa9 	bl	80001e4 <__adddf3>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	e9c7 2306 	strd	r2, r3, [r7, #24]
		//RELU
		if(val<0){
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082a6:	f7f8 fbc5 	bl	8000a34 <__aeabi_dcmplt>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <FP_Forward_PassFirstLayer+0xb4>
			val=0;
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
		this->LAYEROUTBUF[i]=val;
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f603 0302 	addw	r3, r3, #2050	; 0x802
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	18d1      	adds	r1, r2, r3
 80082c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082cc:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint32_t i=0;i<this->net_data->W1_size;i++){
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3301      	adds	r3, #1
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d39c      	bcc.n	800821c <FP_Forward_PassFirstLayer+0x14>
	}
	for(uint32_t i=0;i<this->net_data->W1_size;i++){
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e011      	b.n	800830c <FP_Forward_PassFirstLayer+0x104>
		this->DATABUF[i]=this->LAYEROUTBUF[i];
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f603 0302 	addw	r3, r3, #2050	; 0x802
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4413      	add	r3, r2
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	3102      	adds	r1, #2
 80082fe:	00c9      	lsls	r1, r1, #3
 8008300:	4401      	add	r1, r0
 8008302:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint32_t i=0;i<this->net_data->W1_size;i++){
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	429a      	cmp	r2, r3
 8008316:	d3e7      	bcc.n	80082e8 <FP_Forward_PassFirstLayer+0xe0>
	}
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <FP_Load_W2_wector>:
  * @brief Odczytujemy z pamieci wektor wag drugiej warstwy i wpisujemy go do tablicy wag WEIGHTBUFF
  * @param  this - wskaznik na strukture ForwardPass
  * @param 	vector number - numer wektora do zczytania z pamieci
  * @retval None
*/
void FP_Load_W2_wector(ForwardPass * this,uint32_t vector_number){
 8008322:	b590      	push	{r4, r7, lr}
 8008324:	b0c7      	sub	sp, #284	; 0x11c
 8008326:	af00      	add	r7, sp, #0
 8008328:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800832c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008330:	6018      	str	r0, [r3, #0]
 8008332:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008336:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800833a:	6019      	str	r1, [r3, #0]
	//511 max index wektora
	for(uint32_t i=0;i<this->net_data->page_addres_W2_vector_size;i++){
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008342:	e0a8      	b.n	8008496 <FP_Load_W2_wector+0x174>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_W2_start +i+this->net_data->page_addres_W2_vector_size*vector_number), read_buffer, W25Q64_PAGE_SIZE);
 8008344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008348:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6898      	ldr	r0, [r3, #8]
 8008350:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008354:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008362:	441a      	add	r2, r3
 8008364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008376:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800837a:	6809      	ldr	r1, [r1, #0]
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	4413      	add	r3, r2
 8008382:	0219      	lsls	r1, r3, #8
 8008384:	f107 0208 	add.w	r2, r7, #8
 8008388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800838c:	f000 fe33 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008396:	e075      	b.n	8008484 <FP_Load_W2_wector+0x162>
			convert_buff[0]=read_buffer[i*8];
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80083a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80083a6:	5cd3      	ldrb	r3, [r2, r3]
 80083a8:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	3301      	adds	r3, #1
 80083b4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80083b8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80083bc:	5cd3      	ldrb	r3, [r2, r3]
 80083be:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	3302      	adds	r3, #2
 80083ca:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80083ce:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80083d2:	5cd3      	ldrb	r3, [r2, r3]
 80083d4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	3303      	adds	r3, #3
 80083e0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80083e4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80083e8:	5cd3      	ldrb	r3, [r2, r3]
 80083ea:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	3304      	adds	r3, #4
 80083f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80083fa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80083fe:	5cd3      	ldrb	r3, [r2, r3]
 8008400:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	3305      	adds	r3, #5
 800840c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008410:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008414:	5cd3      	ldrb	r3, [r2, r3]
 8008416:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	3306      	adds	r3, #6
 8008422:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008426:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800842a:	5cd3      	ldrb	r3, [r2, r3]
 800842c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	3307      	adds	r3, #7
 8008438:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800843c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008440:	5cd3      	ldrb	r3, [r2, r3]
 8008442:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->WEIGHTBUFF[i*32+j]=ReconstructDouble(convert_buff);
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008450:	18d4      	adds	r4, r2, r3
 8008452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fbf9 	bl	8008c4e <ReconstructDouble>
 800845c:	eeb0 7a40 	vmov.f32	s14, s0
 8008460:	eef0 7a60 	vmov.f32	s15, s1
 8008464:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008468:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	f204 4302 	addw	r3, r4, #1026	; 0x402
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	4413      	add	r3, r2
 8008476:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 800847a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800847e:	3301      	adds	r3, #1
 8008480:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008484:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008488:	2b1f      	cmp	r3, #31
 800848a:	d985      	bls.n	8008398 <FP_Load_W2_wector+0x76>
	for(uint32_t i=0;i<this->net_data->page_addres_W2_vector_size;i++){
 800848c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008490:	3301      	adds	r3, #1
 8008492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008496:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800849a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80084a8:	429a      	cmp	r2, r3
 80084aa:	f4ff af4b 	bcc.w	8008344 <FP_Load_W2_wector+0x22>
		}
	}
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd90      	pop	{r4, r7, pc}

080084ba <FP_Load_B2>:
/*
  * @brief Odczytujemy z pamieci biasy dla drugiej warstwy i wpisujemy go do tablicy biasów BIAS
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/
void FP_Load_B2(ForwardPass * this){
 80084ba:	b590      	push	{r4, r7, lr}
 80084bc:	b0c7      	sub	sp, #284	; 0x11c
 80084be:	af00      	add	r7, sp, #0
 80084c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80084c8:	6018      	str	r0, [r3, #0]
	//511 max index wektora
	for(uint32_t i=0;i<this->net_data->B2_pages_size;i++){
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80084d0:	e099      	b.n	8008606 <FP_Load_B2+0x14c>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_B2_start +i), read_buffer, W25Q64_PAGE_SIZE);
 80084d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6898      	ldr	r0, [r3, #8]
 80084de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f0:	4413      	add	r3, r2
 80084f2:	0219      	lsls	r1, r3, #8
 80084f4:	f107 0208 	add.w	r2, r7, #8
 80084f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084fc:	f000 fd7b 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008506:	e075      	b.n	80085f4 <FP_Load_B2+0x13a>
			convert_buff[0]=read_buffer[i*8];
 8008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008512:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008516:	5cd3      	ldrb	r3, [r2, r3]
 8008518:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	3301      	adds	r3, #1
 8008524:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008528:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800852c:	5cd3      	ldrb	r3, [r2, r3]
 800852e:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	3302      	adds	r3, #2
 800853a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800853e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008542:	5cd3      	ldrb	r3, [r2, r3]
 8008544:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	3303      	adds	r3, #3
 8008550:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008554:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008558:	5cd3      	ldrb	r3, [r2, r3]
 800855a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	3304      	adds	r3, #4
 8008566:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800856a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800856e:	5cd3      	ldrb	r3, [r2, r3]
 8008570:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	3305      	adds	r3, #5
 800857c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008580:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008584:	5cd3      	ldrb	r3, [r2, r3]
 8008586:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	3306      	adds	r3, #6
 8008592:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008596:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800859a:	5cd3      	ldrb	r3, [r2, r3]
 800859c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	3307      	adds	r3, #7
 80085a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80085ac:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80085b0:	5cd3      	ldrb	r3, [r2, r3]
 80085b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->BIAS[i*32+j]=ReconstructDouble(convert_buff);
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085c0:	18d4      	adds	r4, r2, r3
 80085c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fb41 	bl	8008c4e <ReconstructDouble>
 80085cc:	eeb0 7a40 	vmov.f32	s14, s0
 80085d0:	eef0 7a60 	vmov.f32	s15, s1
 80085d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	f604 4302 	addw	r3, r4, #3074	; 0xc02
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4413      	add	r3, r2
 80085e6:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 80085ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80085f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085f8:	2b1f      	cmp	r3, #31
 80085fa:	d985      	bls.n	8008508 <FP_Load_B2+0x4e>
	for(uint32_t i=0;i<this->net_data->B2_pages_size;i++){
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	3301      	adds	r3, #1
 8008602:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008606:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800860a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008618:	429a      	cmp	r2, r3
 800861a:	f4ff af5a 	bcc.w	80084d2 <FP_Load_B2+0x18>
		}
	}
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}

0800862a <FP_Forward_PassSecondLayer>:
  * i wpisujac wuniki do tablicy LAYEROUTBUF gdzie następnie po przejsciu przez całą warstwe dane z  LAYEROUTBUF
  * sa wpisywane na DATABUF czyli nasza tablcie wejsciowa co umozliwy dalsza propagacje
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/
void FP_Forward_PassSecondLayer(ForwardPass * this){
 800862a:	b580      	push	{r7, lr}
 800862c:	b088      	sub	sp, #32
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
	double val;
	FP_Load_B2(this);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff ff41 	bl	80084ba <FP_Load_B2>
	for(uint32_t i=0;i<this->net_data->W2_size;i++){
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e05e      	b.n	80086fc <FP_Forward_PassSecondLayer+0xd2>
		val=0;
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	e9c7 2306 	strd	r2, r3, [r7, #24]
		FP_Load_W2_wector(this, i);
 800864a:	6979      	ldr	r1, [r7, #20]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff fe68 	bl	8008322 <FP_Load_W2_wector>
		for(uint32_t j=0;j<this->net_data->W1_size;j++){
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e01d      	b.n	8008694 <FP_Forward_PassSecondLayer+0x6a>
			val+=this->DATABUF[j]*this->WEIGHTBUFF[j];
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3302      	adds	r3, #2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	4413      	add	r3, r2
 8008662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	4413      	add	r3, r2
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 ff6b 	bl	8000550 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008682:	f7f7 fdaf 	bl	80001e4 <__adddf3>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(uint32_t j=0;j<this->net_data->W1_size;j++){
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	3301      	adds	r3, #1
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d3db      	bcc.n	8008658 <FP_Forward_PassSecondLayer+0x2e>
		}
		val+=this->BIAS[i];
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f603 4302 	addw	r3, r3, #3074	; 0xc02
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	4413      	add	r3, r2
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086b4:	f7f7 fd96 	bl	80001e4 <__adddf3>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		//RELU
		if(val<0){
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086cc:	f7f8 f9b2 	bl	8000a34 <__aeabi_dcmplt>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <FP_Forward_PassSecondLayer+0xb8>
			val=0;
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	f04f 0300 	mov.w	r3, #0
 80086de:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
		this->LAYEROUTBUF[i]=val;
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f603 0302 	addw	r3, r3, #2050	; 0x802
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	18d1      	adds	r1, r2, r3
 80086ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086f2:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint32_t i=0;i<this->net_data->W2_size;i++){
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	3301      	adds	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	429a      	cmp	r2, r3
 8008706:	d39a      	bcc.n	800863e <FP_Forward_PassSecondLayer+0x14>
	}
	for(uint32_t i=0;i<this->net_data->W2_size;i++){
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e011      	b.n	8008732 <FP_Forward_PassSecondLayer+0x108>
		this->DATABUF[i]=this->LAYEROUTBUF[i];
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f603 0302 	addw	r3, r3, #2050	; 0x802
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	4413      	add	r3, r2
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	3102      	adds	r1, #2
 8008724:	00c9      	lsls	r1, r1, #3
 8008726:	4401      	add	r1, r0
 8008728:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint32_t i=0;i<this->net_data->W2_size;i++){
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3301      	adds	r3, #1
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	429a      	cmp	r2, r3
 800873c:	d3e7      	bcc.n	800870e <FP_Forward_PassSecondLayer+0xe4>
	}
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <FP_Load_W3_wector>:
  * @brief Odczytujemy z pamieci wektor wag trzeciej warstwy i wpisujemy go do tablicy wag WEIGHTBUFF
  * @param  this - wskaznik na strukture ForwardPass
  * @param 	vector number - numer wektora do zczytania z pamieci
  * @retval None
*/
void FP_Load_W3_wector(ForwardPass * this,uint32_t vector_number){
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b0c7      	sub	sp, #284	; 0x11c
 800874c:	af00      	add	r7, sp, #0
 800874e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008756:	6018      	str	r0, [r3, #0]
 8008758:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800875c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008760:	6019      	str	r1, [r3, #0]
	//9 max index wektora
	for(uint32_t i=0;i<this->net_data->page_addres_W3_vector_size;i++){
 8008762:	2300      	movs	r3, #0
 8008764:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008768:	e0a8      	b.n	80088bc <FP_Load_W3_wector+0x174>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_W3_start  +i+this->net_data->page_addres_W2_vector_size*vector_number), read_buffer, W25Q64_PAGE_SIZE);
 800876a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800876e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6898      	ldr	r0, [r3, #8]
 8008776:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800877a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008788:	441a      	add	r2, r3
 800878a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800878e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800879c:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80087a0:	6809      	ldr	r1, [r1, #0]
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	0219      	lsls	r1, r3, #8
 80087aa:	f107 0208 	add.w	r2, r7, #8
 80087ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b2:	f000 fc20 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 80087b6:	2300      	movs	r3, #0
 80087b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80087bc:	e075      	b.n	80088aa <FP_Load_W3_wector+0x162>
			convert_buff[0]=read_buffer[i*8];
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80087c8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80087cc:	5cd3      	ldrb	r3, [r2, r3]
 80087ce:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	3301      	adds	r3, #1
 80087da:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80087de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80087e2:	5cd3      	ldrb	r3, [r2, r3]
 80087e4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	3302      	adds	r3, #2
 80087f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80087f4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80087f8:	5cd3      	ldrb	r3, [r2, r3]
 80087fa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	3303      	adds	r3, #3
 8008806:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800880a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800880e:	5cd3      	ldrb	r3, [r2, r3]
 8008810:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 8008814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	3304      	adds	r3, #4
 800881c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008820:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008824:	5cd3      	ldrb	r3, [r2, r3]
 8008826:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 800882a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	3305      	adds	r3, #5
 8008832:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008836:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800883a:	5cd3      	ldrb	r3, [r2, r3]
 800883c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	3306      	adds	r3, #6
 8008848:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800884c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008850:	5cd3      	ldrb	r3, [r2, r3]
 8008852:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	3307      	adds	r3, #7
 800885e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008862:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008866:	5cd3      	ldrb	r3, [r2, r3]
 8008868:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->WEIGHTBUFF[i*32+j]=ReconstructDouble(convert_buff);
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008876:	18d4      	adds	r4, r2, r3
 8008878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f9e6 	bl	8008c4e <ReconstructDouble>
 8008882:	eeb0 7a40 	vmov.f32	s14, s0
 8008886:	eef0 7a60 	vmov.f32	s15, s1
 800888a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800888e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	f204 4302 	addw	r3, r4, #1026	; 0x402
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	4413      	add	r3, r2
 800889c:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 80088a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80088a4:	3301      	adds	r3, #1
 80088a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80088aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80088ae:	2b1f      	cmp	r3, #31
 80088b0:	d985      	bls.n	80087be <FP_Load_W3_wector+0x76>
	for(uint32_t i=0;i<this->net_data->page_addres_W3_vector_size;i++){
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	3301      	adds	r3, #1
 80088b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80088ce:	429a      	cmp	r2, r3
 80088d0:	f4ff af4b 	bcc.w	800876a <FP_Load_W3_wector+0x22>
		}
	}
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd90      	pop	{r4, r7, pc}

080088e0 <FP_Load_B3>:
/*
  * @brief Odczytujemy z pamieci biasy dla trzeciej  warstwy i wpisujemy go do tablicy biasów BIAS
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/
void FP_Load_B3(ForwardPass * this){
 80088e0:	b590      	push	{r4, r7, lr}
 80088e2:	b0c7      	sub	sp, #284	; 0x11c
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80088ee:	6018      	str	r0, [r3, #0]
	//511 max index wektora
	for(uint32_t i=0;i<this->net_data->B3_pages_size;i++){
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088f6:	e099      	b.n	8008a2c <FP_Load_B3+0x14c>
		uint8_t read_buffer[W25Q64_PAGE_SIZE];
		uint8_t convert_buff[8];
		W25Q64_ReadDataBytes(this->w28q64,W25Q64_PAGE_SIZE*(this->net_data->page_addres_B3_start +i), read_buffer, W25Q64_PAGE_SIZE);
 80088f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6898      	ldr	r0, [r3, #8]
 8008904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008908:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008916:	4413      	add	r3, r2
 8008918:	0219      	lsls	r1, r3, #8
 800891a:	f107 0208 	add.w	r2, r7, #8
 800891e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008922:	f000 fb68 	bl	8008ff6 <W25Q64_ReadDataBytes>
		for(uint32_t j=0;j<32;j++){
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800892c:	e075      	b.n	8008a1a <FP_Load_B3+0x13a>
			convert_buff[0]=read_buffer[i*8];
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008938:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800893c:	5cd3      	ldrb	r3, [r2, r3]
 800893e:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			convert_buff[1]=read_buffer[i*8+1];
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	3301      	adds	r3, #1
 800894a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800894e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008952:	5cd3      	ldrb	r3, [r2, r3]
 8008954:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			convert_buff[2]=read_buffer[i*8+2];
 8008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	3302      	adds	r3, #2
 8008960:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008964:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008968:	5cd3      	ldrb	r3, [r2, r3]
 800896a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			convert_buff[3]=read_buffer[i*8+3];
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	3303      	adds	r3, #3
 8008976:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800897a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800897e:	5cd3      	ldrb	r3, [r2, r3]
 8008980:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
			convert_buff[4]=read_buffer[i*8+4];
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	3304      	adds	r3, #4
 800898c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008990:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008994:	5cd3      	ldrb	r3, [r2, r3]
 8008996:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
			convert_buff[5]=read_buffer[i*8+5];
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	3305      	adds	r3, #5
 80089a2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80089a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80089aa:	5cd3      	ldrb	r3, [r2, r3]
 80089ac:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
			convert_buff[6]=read_buffer[i*8+6];
 80089b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	3306      	adds	r3, #6
 80089b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80089bc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80089c0:	5cd3      	ldrb	r3, [r2, r3]
 80089c2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			convert_buff[7]=read_buffer[i*8+7];
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	3307      	adds	r3, #7
 80089ce:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80089d2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80089d6:	5cd3      	ldrb	r3, [r2, r3]
 80089d8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			this->BIAS[i*32+j]=ReconstructDouble(convert_buff);
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80089e6:	18d4      	adds	r4, r2, r3
 80089e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f92e 	bl	8008c4e <ReconstructDouble>
 80089f2:	eeb0 7a40 	vmov.f32	s14, s0
 80089f6:	eef0 7a60 	vmov.f32	s15, s1
 80089fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	f604 4302 	addw	r3, r4, #3074	; 0xc02
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	ed83 7b00 	vstr	d7, [r3]
		for(uint32_t j=0;j<32;j++){
 8008a10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a14:	3301      	adds	r3, #1
 8008a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a1e:	2b1f      	cmp	r3, #31
 8008a20:	d985      	bls.n	800892e <FP_Load_B3+0x4e>
	for(uint32_t i=0;i<this->net_data->B3_pages_size;i++){
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a26:	3301      	adds	r3, #1
 8008a28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	f4ff af5a 	bcc.w	80088f8 <FP_Load_B3+0x18>
		}
	}
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <FP_Forward_PassThirdLayer>:
  * i wpisujac wuniki do tablicy LAYEROUTBUF
  * @param  this - wskaznik na strukture ForwardPass
  * @retval None
*/

void FP_Forward_PassThirdLayer(ForwardPass * this){
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	double val;
	FP_Load_B3(this);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ff41 	bl	80088e0 <FP_Load_B3>
	for(uint32_t i=0;i<this->net_data->W3_size;i++){
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e05e      	b.n	8008b22 <FP_Forward_PassThirdLayer+0xd2>
		val=0;
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		FP_Load_W3_wector(this, i);
 8008a70:	68f9      	ldr	r1, [r7, #12]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fe68 	bl	8008748 <FP_Load_W3_wector>
		for(uint32_t j=0;j<this->net_data->W2_size;j++){
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	e01d      	b.n	8008aba <FP_Forward_PassThirdLayer+0x6a>
			val+=this->DATABUF[j]*this->WEIGHTBUFF[j];
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3302      	adds	r3, #2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4413      	add	r3, r2
 8008a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4413      	add	r3, r2
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fd58 	bl	8000550 <__aeabi_dmul>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aa8:	f7f7 fb9c 	bl	80001e4 <__adddf3>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(uint32_t j=0;j<this->net_data->W2_size;j++){
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60bb      	str	r3, [r7, #8]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d3db      	bcc.n	8008a7e <FP_Forward_PassThirdLayer+0x2e>
		}
		val+=this->BIAS[i];
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f603 4302 	addw	r3, r3, #3074	; 0xc02
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ada:	f7f7 fb83 	bl	80001e4 <__adddf3>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		//RELU
		if(val<0){
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008af2:	f7f7 ff9f 	bl	8000a34 <__aeabi_dcmplt>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <FP_Forward_PassThirdLayer+0xb8>
			val=0;
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}
		this->LAYEROUTBUF[i]=val;
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f603 0302 	addw	r3, r3, #2050	; 0x802
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	18d1      	adds	r1, r2, r3
 8008b14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b18:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint32_t i=0;i<this->net_data->W3_size;i++){
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d39a      	bcc.n	8008a64 <FP_Forward_PassThirdLayer+0x14>
	}
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <FP_Retrun_Result>:
/*
  * @brief zwracamy index najwiekszej wartosci w tablicy
  * @param  this - wskaznik na strukture ForwardPass
  * @retval result - index najwiekszej wartosci
*/
uint8_t FP_Retrun_Result(ForwardPass * this){
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	uint8_t result=0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<this->net_data->W3_size;i++){
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]
 8008b48:	e019      	b.n	8008b7e <FP_Retrun_Result+0x46>
		if(this->LAYEROUTBUF[i] > this->LAYEROUTBUF[result]){
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f603 0302 	addw	r3, r3, #2050	; 0x802
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	4413      	add	r3, r2
 8008b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	f603 0302 	addw	r3, r3, #2050	; 0x802
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	4413      	add	r3, r2
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 ff81 	bl	8000a70 <__aeabi_dcmpgt>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <FP_Retrun_Result+0x40>
			result=i;
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<this->net_data->W3_size;i++){
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	73bb      	strb	r3, [r7, #14]
 8008b7e:	7bba      	ldrb	r2, [r7, #14]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3df      	bcc.n	8008b4a <FP_Retrun_Result+0x12>
		}
	}
	return result;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <Init_Layer>:
  * @param  this - wskaznik na strukture Linear
  * @param input_size - ilosc wejsc w warstwie
  * @param Net_size - ilosc neuronóœ w warstwie
  * @retval None
*/
void Init_Layer(Linear * this,uint16_t input_size,uint16_t Net_size){
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	803b      	strh	r3, [r7, #0]
	this->input_num=input_size;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	887a      	ldrh	r2, [r7, #2]
 8008ba8:	801a      	strh	r2, [r3, #0]
	this->nueron_num=Net_size;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	883a      	ldrh	r2, [r7, #0]
 8008bae:	805a      	strh	r2, [r3, #2]
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <Init_Net>:
  * @param lin1 - wskaznik na strukture Linear
  * @param lin2 - wskaznik na strukture Linear
  * @param lin3 - wskaznik na strukture Linear
  * @retval None
*/
void Init_Net(NET * this,Linear * lin1,Linear* lin2,Linear * lin3){
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	this->first_Layer=lin1;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	601a      	str	r2, [r3, #0]
	this->second_Layer=lin2;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
	this->third_Layer=lin3;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	609a      	str	r2, [r3, #8]
	Init_Layer(lin1,784, 1024);
 8008bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008be0:	f44f 7144 	mov.w	r1, #784	; 0x310
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f7ff ffd5 	bl	8008b94 <Init_Layer>
	Init_Layer(lin2,1024, 512);
 8008bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ffce 	bl	8008b94 <Init_Layer>
	Init_Layer(lin3, 512,10);
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bfe:	6838      	ldr	r0, [r7, #0]
 8008c00:	f7ff ffc8 	bl	8008b94 <Init_Layer>
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SplitDouble>:
  * @brief zamieniamy wartosc double na 8 bajtowa tablice uint8_t
  * @param  vlad - wartosc która rozbijamy na tablice
  * @param  valbuff - wskaznik na tablcie do której bedziemy wpisywac wartosci z rozbitego doubla
  * @retval None
*/
void SplitDouble(double vald,uint8_t* valbuff){
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	ed87 0b02 	vstr	d0, [r7, #8]
 8008c16:	6078      	str	r0, [r7, #4]
	uint8_t * pvald=(uint8_t*)&vald;
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<8;i++){
 8008c1e:	2300      	movs	r3, #0
 8008c20:	75fb      	strb	r3, [r7, #23]
 8008c22:	e00a      	b.n	8008c3a <SplitDouble+0x2e>
		valbuff[i]=pvald[i];
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	441a      	add	r2, r3
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	440b      	add	r3, r1
 8008c30:	7812      	ldrb	r2, [r2, #0]
 8008c32:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++){
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	3301      	adds	r3, #1
 8008c38:	75fb      	strb	r3, [r7, #23]
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	2b07      	cmp	r3, #7
 8008c3e:	d9f1      	bls.n	8008c24 <SplitDouble+0x18>
	}
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <ReconstructDouble>:
/*
  * @brief zamieniamy wartosc 8 bajtowej tablicy zwracaja odtworzonego doubla
  * @param  valbuff - wskaznik na tablcie z której bedziemy pobierac wartosci do sklejenia doubla
  * @retval vlad - wartosc która zostałą odtworzona  z tablicy
*/
double  ReconstructDouble(uint8_t *valbuff){
 8008c4e:	b480      	push	{r7}
 8008c50:	b087      	sub	sp, #28
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
	double vald;
	uint8_t * pvald=(uint8_t*)&vald;
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<8;i++){
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]
 8008c60:	e00a      	b.n	8008c78 <ReconstructDouble+0x2a>
		pvald[i]=valbuff[i];
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	441a      	add	r2, r3
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	6939      	ldr	r1, [r7, #16]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++){
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	3301      	adds	r3, #1
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	2b07      	cmp	r3, #7
 8008c7c:	d9f1      	bls.n	8008c62 <ReconstructDouble+0x14>
	}
	return vald;
 8008c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c82:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c86:	eeb0 0a47 	vmov.f32	s0, s14
 8008c8a:	eef0 0a67 	vmov.f32	s1, s15
 8008c8e:	371c      	adds	r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <Invert_Array>:
  * @param  buff - wskaznik na tablice ktora chcemy odwrocic
  * @param  bufflen - rozmiar tablicy
  * @retval None
*/

void Invert_Array(uint8_t *buff,uint16_t bufflen){
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	807b      	strh	r3, [r7, #2]
	uint16_t start=0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	81fb      	strh	r3, [r7, #14]
	uint16_t end=bufflen-1;
 8008ca8:	887b      	ldrh	r3, [r7, #2]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	81bb      	strh	r3, [r7, #12]
	uint16_t i=30000;//zabezbieczenie max iter
 8008cae:	f247 5330 	movw	r3, #30000	; 0x7530
 8008cb2:	817b      	strh	r3, [r7, #10]
	while(start<end &&  i>0){
 8008cb4:	e01a      	b.n	8008cec <Invert_Array+0x54>
		uint8_t temp = buff[start];
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	727b      	strb	r3, [r7, #9]
		buff[start] = buff[end];
 8008cc0:	89bb      	ldrh	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	440b      	add	r3, r1
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
		buff[end] = temp;
 8008cd0:	89bb      	ldrh	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	7a7a      	ldrb	r2, [r7, #9]
 8008cd8:	701a      	strb	r2, [r3, #0]
		start++;
 8008cda:	89fb      	ldrh	r3, [r7, #14]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	81fb      	strh	r3, [r7, #14]
		end--;
 8008ce0:	89bb      	ldrh	r3, [r7, #12]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	81bb      	strh	r3, [r7, #12]
		i--;
 8008ce6:	897b      	ldrh	r3, [r7, #10]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	817b      	strh	r3, [r7, #10]
	while(start<end &&  i>0){
 8008cec:	89fa      	ldrh	r2, [r7, #14]
 8008cee:	89bb      	ldrh	r3, [r7, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d202      	bcs.n	8008cfa <Invert_Array+0x62>
 8008cf4:	897b      	ldrh	r3, [r7, #10]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1dd      	bne.n	8008cb6 <Invert_Array+0x1e>
	}
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <W25Q64_SPI_Transmit_Data>:
  * @param  data - wskaznik na tablice z danymi do wpisania
  * @param  size - rozmiar tej tablicy
  * @retval HAL_Status
*/

HAL_StatusTypeDef W25Q64_SPI_Transmit_Data(MEMORY * this,uint8_t *data, uint16_t size){
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	4613      	mov	r3, r2
 8008d12:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Transmit(this->pSpi, data, size, 1000);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6918      	ldr	r0, [r3, #16]
 8008d18:	88fa      	ldrh	r2, [r7, #6]
 8008d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	f7fb fbb7 	bl	8004492 <HAL_SPI_Transmit>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]

	return status;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <W25Q64_SPI_Receive_Data>:
  * @param  data - wskaznik na tablice dla danych do odczytania
  * @param  size - rozmiar tej tablicy
  * @retval HAL_Status
*/

HAL_StatusTypeDef W25Q64_SPI_Receive_Data(MEMORY * this,uint8_t *data, uint16_t size){
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_SPI_Receive(this->pSpi, data, size, 1000);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6918      	ldr	r0, [r3, #16]
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	f7fb fcdd 	bl	800470a <HAL_SPI_Receive>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]

	return status;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <W25Q64_Set_ChipSelect_Low>:
  * @brief  ustawia pin CS na stan niski
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/

void W25Q64_Set_ChipSelect_Low(MEMORY * this){
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_RESET);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6898      	ldr	r0, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	899b      	ldrh	r3, [r3, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7f9 fd97 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <W25Q64_Set_ChipSelect_High>:
/*
  * @brief  ustawia pin CS na stan wysoki
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/
void W25Q64_Set_ChipSelect_High(MEMORY * this){
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CS_port, this->CS_Pin, GPIO_PIN_SET);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6898      	ldr	r0, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	899b      	ldrh	r3, [r3, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	4619      	mov	r1, r3
 8008d92:	f7f9 fd87 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <W25Q64_Init>:
  * @brief  Inicjalizuje strukture pamieci
  * @param  this - wskaznik na strukture MEMORY
  * @retval Hal_Status
*/

uint8_t W25Q64_Init(MEMORY * this){
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	this->CS_port=W25Q64_CS_GPIO_Port;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a10      	ldr	r2, [pc, #64]	; (8008dec <W25Q64_Init+0x4c>)
 8008dac:	609a      	str	r2, [r3, #8]
	this->CS_Pin=W25Q64_CS_Pin;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2240      	movs	r2, #64	; 0x40
 8008db2:	819a      	strh	r2, [r3, #12]
	this->pSpi=&hspi3;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a0e      	ldr	r2, [pc, #56]	; (8008df0 <W25Q64_Init+0x50>)
 8008db8:	611a      	str	r2, [r3, #16]


	W25Q64_ResetFlash(this);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f81a 	bl	8008df4 <W25Q64_ResetFlash>
	W25Q64_get_JEDEC_ID(this);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f83d 	bl	8008e40 <W25Q64_get_JEDEC_ID>

	if(W25Q64_WIBOND_ID	 == this->manufacturer_ID && W25Q64_SPI_DEVICE_ID == this->memory_type && W25Q64_CAPACITY_64_MBIT	 == this->capacity)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2bef      	cmp	r3, #239	; 0xef
 8008dcc:	d109      	bne.n	8008de2 <W25Q64_Init+0x42>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	d105      	bne.n	8008de2 <W25Q64_Init+0x42>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	789b      	ldrb	r3, [r3, #2]
 8008dda:	2b17      	cmp	r3, #23
 8008ddc:	d101      	bne.n	8008de2 <W25Q64_Init+0x42>
		return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <W25Q64_Init+0x44>
	else
		return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40020400 	.word	0x40020400
 8008df0:	200085f4 	.word	0x200085f4

08008df4 <W25Q64_ResetFlash>:
/*
  * @brief  Resetuje pamiec
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/
void W25Q64_ResetFlash(MEMORY * this){
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send[] = { W25Q64_ENABLE_RESET	, W25Q64_RESET };
 8008dfc:	f649 1366 	movw	r3, #39270	; 0x9966
 8008e00:	81bb      	strh	r3, [r7, #12]

	W25Q64_Set_ChipSelect_Low(this);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ffab 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 1);
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff ff78 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ffb1 	bl	8008d7e <W25Q64_Set_ChipSelect_High>

    W25Q64_Set_ChipSelect_Low(this);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff ff9e 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send[1], 1);
 8008e22:	f107 030c 	add.w	r3, r7, #12
 8008e26:	3301      	adds	r3, #1
 8008e28:	2201      	movs	r2, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff ff6a 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ffa3 	bl	8008d7e <W25Q64_Set_ChipSelect_High>
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <W25Q64_get_JEDEC_ID>:
/*
  * @brief  odczytuje informacje z pamieci o ID, typie pamieci i jej pojemnosci
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/
void W25Q64_get_JEDEC_ID(MEMORY * this){
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = 0x9F;
 8008e48:	239f      	movs	r3, #159	; 0x9f
 8008e4a:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[3] = { 0, 0, 0 };
 8008e4c:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <W25Q64_get_JEDEC_ID+0x60>)
 8008e4e:	f107 030c 	add.w	r3, r7, #12
 8008e52:	6812      	ldr	r2, [r2, #0]
 8008e54:	4611      	mov	r1, r2
 8008e56:	8019      	strh	r1, [r3, #0]
 8008e58:	3302      	adds	r3, #2
 8008e5a:	0c12      	lsrs	r2, r2, #16
 8008e5c:	701a      	strb	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low(this);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff ff7d 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>

	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 8008e64:	f107 030f 	add.w	r3, r7, #15
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff4a 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(this,receive_data, 3);
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	2203      	movs	r2, #3
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff ff59 	bl	8008d32 <W25Q64_SPI_Receive_Data>

	W25Q64_Set_ChipSelect_High(this);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff ff7c 	bl	8008d7e <W25Q64_Set_ChipSelect_High>

	this->manufacturer_ID = receive_data[0];
 8008e86:	7b3a      	ldrb	r2, [r7, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	701a      	strb	r2, [r3, #0]
	this->memory_type = receive_data[1];
 8008e8c:	7b7a      	ldrb	r2, [r7, #13]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	705a      	strb	r2, [r3, #1]
	this->capacity = receive_data[2];
 8008e92:	7bba      	ldrb	r2, [r7, #14]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	709a      	strb	r2, [r3, #2]
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0800916c 	.word	0x0800916c

08008ea4 <W25Q64_WriteEnable>:
  * 		odczytywania w pamieci
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/

void W25Q64_WriteEnable(MEMORY * this){
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send =  W25Q64_WRITE_ENABLE;
 8008eac:	2306      	movs	r3, #6
 8008eae:	73fb      	strb	r3, [r7, #15]

	W25Q64_Set_ChipSelect_Low(this);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff54 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 8008eb6:	f107 030f 	add.w	r3, r7, #15
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff ff21 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High(this);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff5a 	bl	8008d7e <W25Q64_Set_ChipSelect_High>
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>:
  * @brief  Wpisanie komendy Write enable i czekanie na odblokowanie
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/

void W25Q64_WriteEnable_and_WaitForWriteEnableLatch(MEMORY * this){
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
	while(!(W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_ENABLE_LATCH))
 8008eda:	e002      	b.n	8008ee2 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0x10>
	{
		W25Q64_WriteEnable(this);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff ffe1 	bl	8008ea4 <W25Q64_WriteEnable>
	while(!(W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_ENABLE_LATCH))
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8ba 	bl	800905c <W25Q64_ReadStatusRegister1>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f4      	beq.n	8008edc <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0xa>
	}
}
 8008ef2:	bf00      	nop
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <W25Q64_WaitForWriteInProgressClear>:
/*
  * @brief  Sprawdza czy trwa oraz czeka az zakonczy sie operacja wczytywania/kasowani lub odczytywania na pamieci
  * @param  this - wskaznik na strukture MEMORY
  * @retval None
*/
void W25Q64_WaitForWriteInProgressClear(MEMORY * this){
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	while((W25Q64_ReadStatusRegister1(this) & W25Q64_WRITE_IN_PROGRESS)){};
 8008f04:	bf00      	nop
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f8a8 	bl	800905c <W25Q64_ReadStatusRegister1>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f7      	bne.n	8008f06 <W25Q64_WaitForWriteInProgressClear+0xa>
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <W25Q64_SectorErase>:
  * @brief  Czysci sektor pamieci
  * @param  this - wskaznik na strukture MEMORY
  * @param  sector_number - sektor który chcemy wyczyscic
  * @retval HAL_Status
*/
HAL_StatusTypeDef W25Q64_SectorErase(MEMORY * this,uint16_t sector_number){
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	807b      	strh	r3, [r7, #2]
	uint32_t adress;
	adress = sector_number * SECTOR_SIZE;
 8008f2c:	887b      	ldrh	r3, [r7, #2]
 8008f2e:	031b      	lsls	r3, r3, #12
 8008f30:	617b      	str	r3, [r7, #20]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff ffe0 	bl	8008efc <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch(this);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ffc8 	bl	8008ed2 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = W25Q64_SECTOR_ERASE;
 8008f42:	2320      	movs	r3, #32
 8008f44:	733b      	strb	r3, [r7, #12]
	data_to_send[1] = (adress >> 16) & 0xff;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	0c1b      	lsrs	r3, r3, #16
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	737b      	strb	r3, [r7, #13]
	data_to_send[2] = (adress >> 8) & 0xff;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	73bb      	strb	r3, [r7, #14]
	data_to_send[3] = adress & 0xff;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	73fb      	strb	r3, [r7, #15]

	W25Q64_Set_ChipSelect_Low(this);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fefe 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	status = W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	2204      	movs	r2, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fecb 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
 8008f70:	4603      	mov	r3, r0
 8008f72:	74fb      	strb	r3, [r7, #19]
	W25Q64_Set_ChipSelect_High(this);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ff02 	bl	8008d7e <W25Q64_Set_ChipSelect_High>

	W25Q64_WaitForWriteInProgressClear(this);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ffbe 	bl	8008efc <W25Q64_WaitForWriteInProgressClear>

	return status;
 8008f80:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <W25Q64_PageProgram>:
  * @param  page_adress - adres strony w pamieci
  * @param data - wskaznik na tablice z której chcemy wpisac dane
  * @param size- rozmiar tej tablicy
  * @retval HAL_Status
*/
HAL_StatusTypeDef W25Q64_PageProgram(MEMORY * this,uint32_t page_adress, uint8_t *data, uint16_t size){
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b086      	sub	sp, #24
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
 8008f96:	807b      	strh	r3, [r7, #2]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff ffad 	bl	8008efc <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch(this);
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff ff95 	bl	8008ed2 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>
	data_to_send[0] = W25Q64_PAGE_PROGRAM;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (page_adress >> 16) & 0xff;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	0c1b      	lsrs	r3, r3, #16
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (page_adress >> 8) & 0xff;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	0a1b      	lsrs	r3, r3, #8
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = page_adress & 0xff;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low(this);
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fecb 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 8008fc8:	f107 0310 	add.w	r3, r7, #16
 8008fcc:	2204      	movs	r2, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff fe98 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Transmit_Data(this,data, size);
 8008fd6:	887b      	ldrh	r3, [r7, #2]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7ff fe92 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High(this);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fec9 	bl	8008d7e <W25Q64_Set_ChipSelect_High>
	return status;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <W25Q64_ReadDataBytes>:
  * @param size- rozmiar tej tablicy
  * @retval HAL_Status
*/


HAL_StatusTypeDef W25Q64_ReadDataBytes(MEMORY * this,uint32_t adress, uint8_t *data, uint16_t size){
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
 8009002:	807b      	strh	r3, [r7, #2]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8009004:	2300      	movs	r3, #0
 8009006:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status;

	W25Q64_WaitForWriteInProgressClear(this);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff ff77 	bl	8008efc <W25Q64_WaitForWriteInProgressClear>

	data_to_send[0] = W25Q64_READ_DATA;
 800900e:	2303      	movs	r3, #3
 8009010:	743b      	strb	r3, [r7, #16]
	data_to_send[1] = (adress >> 16) & 0xff;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	0c1b      	lsrs	r3, r3, #16
 8009016:	b2db      	uxtb	r3, r3
 8009018:	747b      	strb	r3, [r7, #17]
	data_to_send[2] = (adress >> 8) & 0xff;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	b2db      	uxtb	r3, r3
 8009020:	74bb      	strb	r3, [r7, #18]
	data_to_send[3] = adress & 0xff;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	74fb      	strb	r3, [r7, #19]

	W25Q64_Set_ChipSelect_Low(this);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fe98 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,data_to_send, 4);
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	2204      	movs	r2, #4
 8009034:	4619      	mov	r1, r3
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fe65 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Receive_Data(this,data, size);
 800903c:	887b      	ldrh	r3, [r7, #2]
 800903e:	461a      	mov	r2, r3
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe75 	bl	8008d32 <W25Q64_SPI_Receive_Data>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
	W25Q64_Set_ChipSelect_High(this);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fe96 	bl	8008d7e <W25Q64_Set_ChipSelect_High>

	return status;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <W25Q64_ReadStatusRegister1>:
/*
  * @brief  zwraca wartosc rejestru statusu 1
  * @param  this - wskaznik na strukture MEMORY
  * @retval wartosc rejestru Status1
*/
uint8_t W25Q64_ReadStatusRegister1(MEMORY * this){
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = W25Q64_READ_STATUS_REG1;
 8009064:	2305      	movs	r3, #5
 8009066:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	73bb      	strb	r3, [r7, #14]

	W25Q64_Set_ChipSelect_Low(this);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff fe76 	bl	8008d5e <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(this,&data_to_send, 1);
 8009072:	f107 030f 	add.w	r3, r7, #15
 8009076:	2201      	movs	r2, #1
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fe43 	bl	8008d06 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(this,&receive_data, 1);
 8009080:	f107 030e 	add.w	r3, r7, #14
 8009084:	2201      	movs	r2, #1
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fe52 	bl	8008d32 <W25Q64_SPI_Receive_Data>
	W25Q64_Set_ChipSelect_High(this);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fe75 	bl	8008d7e <W25Q64_Set_ChipSelect_High>

	return receive_data;
 8009094:	7bbb      	ldrb	r3, [r7, #14]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <__libc_init_array>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4d0d      	ldr	r5, [pc, #52]	; (80090d8 <__libc_init_array+0x38>)
 80090a4:	4c0d      	ldr	r4, [pc, #52]	; (80090dc <__libc_init_array+0x3c>)
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	2600      	movs	r6, #0
 80090ac:	42a6      	cmp	r6, r4
 80090ae:	d109      	bne.n	80090c4 <__libc_init_array+0x24>
 80090b0:	4d0b      	ldr	r5, [pc, #44]	; (80090e0 <__libc_init_array+0x40>)
 80090b2:	4c0c      	ldr	r4, [pc, #48]	; (80090e4 <__libc_init_array+0x44>)
 80090b4:	f000 f820 	bl	80090f8 <_init>
 80090b8:	1b64      	subs	r4, r4, r5
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	2600      	movs	r6, #0
 80090be:	42a6      	cmp	r6, r4
 80090c0:	d105      	bne.n	80090ce <__libc_init_array+0x2e>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c8:	4798      	blx	r3
 80090ca:	3601      	adds	r6, #1
 80090cc:	e7ee      	b.n	80090ac <__libc_init_array+0xc>
 80090ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d2:	4798      	blx	r3
 80090d4:	3601      	adds	r6, #1
 80090d6:	e7f2      	b.n	80090be <__libc_init_array+0x1e>
 80090d8:	0800a4fc 	.word	0x0800a4fc
 80090dc:	0800a4fc 	.word	0x0800a4fc
 80090e0:	0800a4fc 	.word	0x0800a4fc
 80090e4:	0800a500 	.word	0x0800a500

080090e8 <memset>:
 80090e8:	4402      	add	r2, r0
 80090ea:	4603      	mov	r3, r0
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d100      	bne.n	80090f2 <memset+0xa>
 80090f0:	4770      	bx	lr
 80090f2:	f803 1b01 	strb.w	r1, [r3], #1
 80090f6:	e7f9      	b.n	80090ec <memset+0x4>

080090f8 <_init>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr

08009104 <_fini>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr

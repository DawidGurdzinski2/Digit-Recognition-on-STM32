
DIGIT_REC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a80  08003a80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000010  08003a98  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08003a98  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f03  00000000  00000000  00028937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168d4  00000000  00000000  0002b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae74  00000000  00000000  00041fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ccd  00000000  00000000  0004ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c78  00000000  00000000  000d2b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a3c 	.word	0x08003a3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003a3c 	.word	0x08003a3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x3c>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x3c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	203a      	movs	r0, #58	; 0x3a
 8000504:	f000 fce5 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000508:	203a      	movs	r0, #58	; 0x3a
 800050a:	f000 fcfe 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000570:	481e      	ldr	r0, [pc, #120]	; (80005ec <MX_GPIO_Init+0xd0>)
 8000572:	f001 f9f1 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	481d      	ldr	r0, [pc, #116]	; (80005f0 <MX_GPIO_Init+0xd4>)
 800057c:	f001 f9ec 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2104      	movs	r1, #4
 8000584:	481a      	ldr	r0, [pc, #104]	; (80005f0 <MX_GPIO_Init+0xd4>)
 8000586:	f001 f9e7 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|ADC_CS_Pin;
 800058a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005a4:	f001 f83c 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_LED_Pin;
 80005a8:	2307      	movs	r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xd4>)
 80005c0:	f001 f82e 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_IRQ_Pin;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005da:	f001 f821 	bl	8001620 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020400 	.word	0x40020400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fafa 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f82a 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ff8c 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f7ff ff6a 	bl	80004dc <MX_DMA_Init>
  MX_SPI1_Init();
 8000608:	f000 f892 	bl	8000730 <MX_SPI1_Init>
  MX_SPI3_Init();
 800060c:	f000 f8c8 	bl	80007a0 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000610:	f000 f8fc 	bl	800080c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8000614:	f002 feb6 	bl	8003384 <Init>
  memset(Screen.Atributs,0,NUM_PIXELS);
 8000618:	f44f 7244 	mov.w	r2, #784	; 0x310
 800061c:	2100      	movs	r1, #0
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0x54>)
 8000620:	f003 fa04 	bl	8003a2c <memset>
  refreshMenu();
 8000624:	f002 fe56 	bl	80032d4 <refreshMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 8000628:	4908      	ldr	r1, [pc, #32]	; (800064c <main+0x58>)
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x5c>)
 800062c:	f003 f924 	bl	8003878 <XPT2046_TouchGetCoordinates>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f8      	beq.n	8000628 <main+0x34>
		  // Draw_Circle(PosX, PosY, 10, BLUE);
		  updateScreen(PosX, PosY);
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <main+0x5c>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <main+0x58>)
 800063c:	8812      	ldrh	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fe69 	bl	8003318 <updateScreen>
	  if(XPT2046_TouchGetCoordinates(&PosX,&PosY)){
 8000646:	e7ef      	b.n	8000628 <main+0x34>
 8000648:	2000019c 	.word	0x2000019c
 800064c:	2000002e 	.word	0x2000002e
 8000650:	2000002c 	.word	0x2000002c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f9e2 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <SystemClock_Config+0xc8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xcc>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f957 	bl	800198c <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f81e 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2103      	movs	r1, #3
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fbb9 	bl	8001e7c <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 f808 	bl	8000724 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_SPI1_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <MX_SPI1_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI1_Init+0x68>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_SPI1_Init+0x68>)
 8000744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000748:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_SPI1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x68>)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x68>)
 8000766:	2208      	movs	r2, #8
 8000768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_SPI1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_SPI1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x68>)
 800077e:	220a      	movs	r2, #10
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_SPI1_Init+0x68>)
 8000784:	f001 fd26 	bl	80021d4 <HAL_SPI_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800078e:	f7ff ffc9 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000030 	.word	0x20000030
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI3_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI3_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI3_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI3_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI3_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI3_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI3_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI3_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI3_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI3_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI3_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI3_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI3_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI3_Init+0x64>)
 80007f2:	f001 fcef 	bl	80021d4 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007fc:	f7ff ff92 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000088 	.word	0x20000088
 8000808:	40003c00 	.word	0x40003c00

0800080c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI4_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI4_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI4_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI4_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI4_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI4_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI4_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI4_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI4_Init+0x64>)
 8000840:	2238      	movs	r2, #56	; 0x38
 8000842:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI4_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI4_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI4_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI4_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI4_Init+0x64>)
 800085e:	f001 fcb9 	bl	80021d4 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000868:	f7ff ff5c 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000e0 	.word	0x200000e0
 8000874:	40013400 	.word	0x40013400

08000878 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a82      	ldr	r2, [pc, #520]	; (8000aa0 <HAL_SPI_MspInit+0x228>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d15a      	bne.n	8000950 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	4b81      	ldr	r3, [pc, #516]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a80      	ldr	r2, [pc, #512]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e2:	2305      	movs	r3, #5
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	486e      	ldr	r0, [pc, #440]	; (8000aa8 <HAL_SPI_MspInit+0x230>)
 80008ee:	f000 fe97 	bl	8001620 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80008f2:	4b6e      	ldr	r3, [pc, #440]	; (8000aac <HAL_SPI_MspInit+0x234>)
 80008f4:	4a6e      	ldr	r2, [pc, #440]	; (8000ab0 <HAL_SPI_MspInit+0x238>)
 80008f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80008f8:	4b6c      	ldr	r3, [pc, #432]	; (8000aac <HAL_SPI_MspInit+0x234>)
 80008fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000900:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800090c:	4b67      	ldr	r3, [pc, #412]	; (8000aac <HAL_SPI_MspInit+0x234>)
 800090e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000912:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000914:	4b65      	ldr	r3, [pc, #404]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091a:	4b64      	ldr	r3, [pc, #400]	; (8000aac <HAL_SPI_MspInit+0x234>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000926:	4b61      	ldr	r3, [pc, #388]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800092c:	4b5f      	ldr	r3, [pc, #380]	; (8000aac <HAL_SPI_MspInit+0x234>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000932:	485e      	ldr	r0, [pc, #376]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000934:	f000 fb04 	bl	8000f40 <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800093e:	f7ff fef1 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a59      	ldr	r2, [pc, #356]	; (8000aac <HAL_SPI_MspInit+0x234>)
 8000946:	649a      	str	r2, [r3, #72]	; 0x48
 8000948:	4a58      	ldr	r2, [pc, #352]	; (8000aac <HAL_SPI_MspInit+0x234>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800094e:	e0a3      	b.n	8000a98 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <HAL_SPI_MspInit+0x23c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13d      	bne.n	80009d6 <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a50      	ldr	r2, [pc, #320]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a49      	ldr	r2, [pc, #292]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80009a4:	2307      	movs	r3, #7
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <HAL_SPI_MspInit+0x240>)
 80009b0:	f000 fe36 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009b4:	2330      	movs	r3, #48	; 0x30
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c4:	2306      	movs	r3, #6
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	483a      	ldr	r0, [pc, #232]	; (8000ab8 <HAL_SPI_MspInit+0x240>)
 80009d0:	f000 fe26 	bl	8001620 <HAL_GPIO_Init>
}
 80009d4:	e060      	b.n	8000a98 <HAL_SPI_MspInit+0x220>
  else if(spiHandle->Instance==SPI4)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <HAL_SPI_MspInit+0x244>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d15b      	bne.n	8000a98 <HAL_SPI_MspInit+0x220>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80009ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ee:	6453      	str	r3, [r2, #68]	; 0x44
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <HAL_SPI_MspInit+0x22c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a34:	2302      	movs	r3, #2
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000a44:	2305      	movs	r3, #5
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <HAL_SPI_MspInit+0x230>)
 8000a50:	f000 fde6 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000a66:	2306      	movs	r3, #6
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <HAL_SPI_MspInit+0x240>)
 8000a72:	f000 fdd5 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_SPI_MspInit+0x230>)
 8000a94:	f000 fdc4 	bl	8001620 <HAL_GPIO_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	20000138 	.word	0x20000138
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40003c00 	.word	0x40003c00
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40013400 	.word	0x40013400

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f89a 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA2_Stream2_IRQHandler+0x10>)
 8000b6a:	f000 faef 	bl	800114c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000138 	.word	0x20000138

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff ffd7 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 ff0b 	bl	80039e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fd11 	bl	80005f4 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be0:	08003a88 	.word	0x08003a88
  ldr r2, =_sbss
 8000be4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000be8:	200004b0 	.word	0x200004b0

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f94f 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff ff4c 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f967 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 f92f 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000198 	.word	0x20000198

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000198 	.word	0x20000198

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff feb6 	bl	8000cbc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e099      	b.n	8001090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	e00f      	b.n	8000f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7e:	f7ff fe9d 	bl	8000cbc <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d908      	bls.n	8000f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e078      	b.n	8001090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e8      	bne.n	8000f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_DMA_Init+0x158>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4313      	orrs	r3, r2
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f023 0307 	bic.w	r3, r3, #7
 800101e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2b04      	cmp	r3, #4
 8001030:	d117      	bne.n	8001062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00e      	beq.n	8001062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fa6f 	bl	8001528 <DMA_CheckFifoParam>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105e:	2301      	movs	r3, #1
 8001060:	e016      	b.n	8001090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fa26 	bl	80014bc <DMA_CalcBaseAndBitshift>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	223f      	movs	r2, #63	; 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	f010803f 	.word	0xf010803f

0800109c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_DMA_Start_IT+0x26>
 80010be:	2302      	movs	r3, #2
 80010c0:	e040      	b.n	8001144 <HAL_DMA_Start_IT+0xa8>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d12f      	bne.n	8001136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2202      	movs	r2, #2
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f9b8 	bl	8001460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0216 	orr.w	r2, r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001158:	4b8e      	ldr	r3, [pc, #568]	; (8001394 <HAL_DMA_IRQHandler+0x248>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a8e      	ldr	r2, [pc, #568]	; (8001398 <HAL_DMA_IRQHandler+0x24c>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0a9b      	lsrs	r3, r3, #10
 8001164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	2208      	movs	r2, #8
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01a      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2208      	movs	r2, #8
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2201      	movs	r2, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d012      	beq.n	80011ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2201      	movs	r2, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2204      	movs	r2, #4
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d012      	beq.n	8001224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	2204      	movs	r2, #4
 8001212:	409a      	lsls	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	f043 0204 	orr.w	r2, r3, #4
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	2210      	movs	r2, #16
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d043      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03c      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	2210      	movs	r2, #16
 8001248:	409a      	lsls	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d018      	beq.n	800128e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d024      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
 800127a:	e01f      	b.n	80012bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01b      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
 800128c:	e016      	b.n	80012bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0208 	bic.w	r2, r2, #8
 80012aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2220      	movs	r2, #32
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 808f 	beq.w	80013ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 8087 	beq.w	80013ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	2220      	movs	r2, #32
 80012e4:	409a      	lsls	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d136      	bne.n	8001364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0216 	bic.w	r2, r2, #22
 8001304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <HAL_DMA_IRQHandler+0x1da>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0208 	bic.w	r2, r2, #8
 8001334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	223f      	movs	r2, #63	; 0x3f
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001356:	2b00      	cmp	r3, #0
 8001358:	d07e      	beq.n	8001458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
        }
        return;
 8001362:	e079      	b.n	8001458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01d      	beq.n	80013ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10d      	bne.n	800139c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	2b00      	cmp	r3, #0
 8001386:	d031      	beq.n	80013ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
 8001390:	e02c      	b.n	80013ec <HAL_DMA_IRQHandler+0x2a0>
 8001392:	bf00      	nop
 8001394:	20000000 	.word	0x20000000
 8001398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
 80013ac:	e01e      	b.n	80013ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0210 	bic.w	r2, r2, #16
 80013ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d032      	beq.n	800145a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d022      	beq.n	8001446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2205      	movs	r2, #5
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	d307      	bcc.n	8001434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f2      	bne.n	8001418 <HAL_DMA_IRQHandler+0x2cc>
 8001432:	e000      	b.n	8001436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
 8001456:	e000      	b.n	800145a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001458:	bf00      	nop
    }
  }
}
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800147c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d108      	bne.n	80014a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800149e:	e007      	b.n	80014b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3b10      	subs	r3, #16
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <DMA_CalcBaseAndBitshift+0x64>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <DMA_CalcBaseAndBitshift+0x68>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d909      	bls.n	80014fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58
 80014fc:	e007      	b.n	800150e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	aaaaaaab 	.word	0xaaaaaaab
 8001524:	08003a64 	.word	0x08003a64

08001528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d11f      	bne.n	8001582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d856      	bhi.n	80015f6 <DMA_CheckFifoParam+0xce>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <DMA_CheckFifoParam+0x28>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	08001573 	.word	0x08001573
 8001558:	08001561 	.word	0x08001561
 800155c:	080015f7 	.word	0x080015f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d046      	beq.n	80015fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001570:	e043      	b.n	80015fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800157a:	d140      	bne.n	80015fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001580:	e03d      	b.n	80015fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158a:	d121      	bne.n	80015d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d837      	bhi.n	8001602 <DMA_CheckFifoParam+0xda>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <DMA_CheckFifoParam+0x70>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015af 	.word	0x080015af
 80015a0:	080015a9 	.word	0x080015a9
 80015a4:	080015c1 	.word	0x080015c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      break;
 80015ac:	e030      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d025      	beq.n	8001606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015be:	e022      	b.n	8001606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c8:	d11f      	bne.n	800160a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ce:	e01c      	b.n	800160a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d903      	bls.n	80015de <DMA_CheckFifoParam+0xb6>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d003      	beq.n	80015e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015dc:	e018      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
      break;
 80015e2:	e015      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
      break;
 80015f4:	e00b      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 80015f6:	bf00      	nop
 80015f8:	e00a      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 80015fa:	bf00      	nop
 80015fc:	e008      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
 8001600:	e006      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
 8001604:	e004      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 8001606:	bf00      	nop
 8001608:	e002      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;   
 800160a:	bf00      	nop
 800160c:	e000      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 800160e:	bf00      	nop
    }
  } 
  
  return status; 
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e159      	b.n	80018f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8148 	bne.w	80018ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a2 	beq.w	80018ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a56      	ldr	r2, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_GPIO_Init+0x2ec>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x2f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x202>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2f4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x1fe>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <HAL_GPIO_Init+0x2f8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x1fa>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a46      	ldr	r2, [pc, #280]	; (800191c <HAL_GPIO_Init+0x2fc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x1f6>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_GPIO_Init+0x300>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x1f2>
 800180e:	2304      	movs	r3, #4
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001812:	2307      	movs	r3, #7
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001822:	2300      	movs	r3, #0
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001834:	4935      	ldr	r1, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2ec>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x304>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ba:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	f67f aea2 	bls.w	800163c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40013c00 	.word	0x40013c00

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e001      	b.n	800194a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e267      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b7e      	ldr	r3, [pc, #504]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d05b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e242      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x74>
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6f      	ldr	r2, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6c      	ldr	r2, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a24:	4b69      	ldr	r3, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a68      	ldr	r2, [pc, #416]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f93a 	bl	8000cbc <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f936 	bl	8000cbc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e207      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f926 	bl	8000cbc <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f922 	bl	8000cbc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1f3      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c7      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4937      	ldr	r1, [pc, #220]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f8db 	bl	8000cbc <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f8d7 	bl	8000cbc <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a8      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4925      	ldr	r1, [pc, #148]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f8ba 	bl	8000cbc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f8b6 	bl	8000cbc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e187      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f89a 	bl	8000cbc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f896 	bl	8000cbc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e167      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x200>
 8001baa:	e01b      	b.n	8001be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f883 	bl	8000cbc <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e00e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f87f 	bl	8000cbc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d907      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e150      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ea      	bne.n	8001bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b77      	ldr	r3, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a73      	ldr	r2, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f83f 	bl	8000cbc <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f83b 	bl	8000cbc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e10c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2ea>
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a63      	ldr	r2, [pc, #396]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x30c>
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5e      	ldr	r2, [pc, #376]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c98:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a57      	ldr	r2, [pc, #348]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4b55      	ldr	r3, [pc, #340]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f800 	bl	8000cbc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fffc 	bl	8000cbc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0cb      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x334>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7fe ffea 	bl	8000cbc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7fe ffe6 	bl	8000cbc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0b5      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a1 	beq.w	8001e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d05c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d141      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ffba 	bl	8000cbc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ffb6 	bl	8000cbc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e087      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	491b      	ldr	r1, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe ff8f 	bl	8000cbc <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da2:	f7fe ff8b 	bl	8000cbc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e05c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x416>
 8001dc0:	e054      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff78 	bl	8000cbc <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe ff74 	bl	8000cbc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e045      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x444>
 8001dee:	e03d      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e038      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0cc      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d044      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e067      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4934      	ldr	r1, [pc, #208]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fea6 	bl	8000cbc <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fea2 	bl	8000cbc <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d20c      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fe06 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	08003a54 	.word	0x08003a54
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b090      	sub	sp, #64	; 0x40
 800204e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d00d      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x40>
 800206c:	2b08      	cmp	r3, #8
 800206e:	f200 80a1 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x34>
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x3a>
 800207a:	e09b      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_GetSysClockFreq+0x184>)
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002080:	e09b      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002084:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002086:	e098      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d028      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	2200      	movs	r2, #0
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	627a      	str	r2, [r7, #36]	; 0x24
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b0:	2100      	movs	r1, #0
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b4:	fb03 f201 	mul.w	r2, r3, r1
 80020b8:	2300      	movs	r3, #0
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	4413      	add	r3, r2
 80020c0:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c2:	fba0 1202 	umull	r1, r2, r0, r2
 80020c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020c8:	460a      	mov	r2, r1
 80020ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ce:	4413      	add	r3, r2
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	2200      	movs	r2, #0
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	61fa      	str	r2, [r7, #28]
 80020da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e2:	f7fe f879 	bl	80001d8 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4613      	mov	r3, r2
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ee:	e053      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	2200      	movs	r2, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	617a      	str	r2, [r7, #20]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002102:	f04f 0b00 	mov.w	fp, #0
 8002106:	4652      	mov	r2, sl
 8002108:	465b      	mov	r3, fp
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	0159      	lsls	r1, r3, #5
 8002114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002118:	0150      	lsls	r0, r2, #5
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	ebb2 080a 	subs.w	r8, r2, sl
 8002122:	eb63 090b 	sbc.w	r9, r3, fp
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002132:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002136:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800213a:	ebb2 0408 	subs.w	r4, r2, r8
 800213e:	eb63 0509 	sbc.w	r5, r3, r9
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	00eb      	lsls	r3, r5, #3
 800214c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002150:	00e2      	lsls	r2, r4, #3
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	eb14 030a 	adds.w	r3, r4, sl
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	eb45 030b 	adc.w	r3, r5, fp
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216e:	4629      	mov	r1, r5
 8002170:	028b      	lsls	r3, r1, #10
 8002172:	4621      	mov	r1, r4
 8002174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002178:	4621      	mov	r1, r4
 800217a:	028a      	lsls	r2, r1, #10
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	2200      	movs	r2, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	60fa      	str	r2, [r7, #12]
 8002188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218c:	f7fe f824 	bl	80001d8 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	3301      	adds	r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetSysClockFreq+0x184>)
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3740      	adds	r7, #64	; 0x40
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	017d7840 	.word	0x017d7840

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07b      	b.n	80022de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021f6:	d009      	beq.n	800220c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	e005      	b.n	800220c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fb26 	bl	8000878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0104 	and.w	r1, r3, #4
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f003 0210 	and.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_SPI_Transmit+0x22>
 8002304:	2302      	movs	r3, #2
 8002306:	e126      	b.n	8002556 <HAL_SPI_Transmit+0x270>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002310:	f7fe fcd4 	bl	8000cbc <HAL_GetTick>
 8002314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d002      	beq.n	800232c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800232a:	e10b      	b.n	8002544 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x52>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800233c:	e102      	b.n	8002544 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	d10f      	bne.n	80023a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d007      	beq.n	80023c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023cc:	d14b      	bne.n	8002466 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_SPI_Transmit+0xf6>
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d13e      	bne.n	800245a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002400:	e02b      	b.n	800245a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d112      	bne.n	8002436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	; 0x36
 8002434:	e011      	b.n	800245a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe fc41 	bl	8000cbc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Transmit+0x168>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Transmit+0x16e>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002458:	e074      	b.n	8002544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ce      	bne.n	8002402 <HAL_SPI_Transmit+0x11c>
 8002464:	e04c      	b.n	8002500 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_SPI_Transmit+0x18e>
 800246e:	8afb      	ldrh	r3, [r7, #22]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d140      	bne.n	80024f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800249a:	e02c      	b.n	80024f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d113      	bne.n	80024d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80024d0:	e011      	b.n	80024f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d2:	f7fe fbf3 	bl	8000cbc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d803      	bhi.n	80024ea <HAL_SPI_Transmit+0x204>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e8:	d102      	bne.n	80024f0 <HAL_SPI_Transmit+0x20a>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024f4:	e026      	b.n	8002544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1cd      	bne.n	800249c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fbab 	bl	8002c60 <SPI_EndRxTxTransaction>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
 8002540:	e000      	b.n	8002544 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002554:	7ffb      	ldrb	r3, [r7, #31]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08c      	sub	sp, #48	; 0x30
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x26>
 8002580:	2302      	movs	r3, #2
 8002582:	e18a      	b.n	800289a <HAL_SPI_TransmitReceive+0x33c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800258c:	f7fe fb96 	bl	8000cbc <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d00f      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x70>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b4:	d107      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x68>
 80025be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d003      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025cc:	e15b      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x82>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x82>
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025e6:	e14e      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d003      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2205      	movs	r2, #5
 80025f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d007      	beq.n	8002650 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002658:	d178      	bne.n	800274c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x10a>
 8002662:	8b7b      	ldrh	r3, [r7, #26]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d166      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800268c:	e053      	b.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d11b      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d113      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c9a      	adds	r2, r3, #2
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d119      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x1b8>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d014      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	1c9a      	adds	r2, r3, #2
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002712:	2301      	movs	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002716:	f7fe fad1 	bl	8000cbc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002722:	429a      	cmp	r2, r3
 8002724:	d807      	bhi.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272c:	d003      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002734:	e0a7      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1a6      	bne.n	800268e <HAL_SPI_TransmitReceive+0x130>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1a1      	bne.n	800268e <HAL_SPI_TransmitReceive+0x130>
 800274a:	e07c      	b.n	8002846 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_SPI_TransmitReceive+0x1fc>
 8002754:	8b7b      	ldrh	r3, [r7, #26]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d16b      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002780:	e057      	b.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d11c      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d114      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <HAL_SPI_TransmitReceive+0x2ae>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800280c:	f7fe fa56 	bl	8000cbc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002818:	429a      	cmp	r2, r3
 800281a:	d803      	bhi.n	8002824 <HAL_SPI_TransmitReceive+0x2c6>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002822:	d102      	bne.n	800282a <HAL_SPI_TransmitReceive+0x2cc>
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002830:	e029      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1a2      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x224>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d19d      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa08 	bl	8002c60 <SPI_EndRxTxTransaction>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002862:	e010      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	e000      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002884:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800289a:	4618      	mov	r0, r3
 800289c:	3730      	adds	r7, #48	; 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_SPI_Transmit_DMA+0x20>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e09b      	b.n	80029fc <HAL_SPI_Transmit_DMA+0x158>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
 80028da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028dc:	e089      	b.n	80029f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_SPI_Transmit_DMA+0x46>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ee:	e080      	b.n	80029f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002936:	d10f      	bne.n	8002958 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002946:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002956:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_SPI_Transmit_DMA+0x160>)
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_SPI_Transmit_DMA+0x164>)
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <HAL_SPI_Transmit_DMA+0x168>)
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	2200      	movs	r2, #0
 8002976:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4619      	mov	r1, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002990:	f7fe fb84 	bl	800109c <HAL_DMA_Start_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029b2:	e01e      	b.n	80029f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d007      	beq.n	80029d2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0202 	orr.w	r2, r2, #2
 80029f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08002af5 	.word	0x08002af5
 8002a08:	08002a4d 	.word	0x08002a4d
 8002a0c:	08002b11 	.word	0x08002b11

08002a10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a5a:	f7fe f92f 	bl	8000cbc <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6e:	d03b      	beq.n	8002ae8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0220 	bic.w	r2, r2, #32
 8002a7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0202 	bic.w	r2, r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	f000 f8e3 	bl	8002c60 <SPI_EndRxTxTransaction>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff ffa9 	bl	8002a38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ae6:	e002      	b.n	8002aee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002ae8:	6978      	ldr	r0, [r7, #20]
 8002aea:	f7ff ff91 	bl	8002a10 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ff8e 	bl	8002a24 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0203 	bic.w	r2, r2, #3
 8002b2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff78 	bl	8002a38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b60:	f7fe f8ac 	bl	8000cbc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b70:	f7fe f8a4 	bl	8000cbc <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	0d1b      	lsrs	r3, r3, #20
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b86:	e054      	b.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b8e:	d050      	beq.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b90:	f7fe f894 	bl	8000cbc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d902      	bls.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d13d      	bne.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbe:	d111      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	d004      	beq.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d107      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d10f      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e017      	b.n	8002c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d19b      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <SPI_EndRxTxTransaction+0x7c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <SPI_EndRxTxTransaction+0x80>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0d5b      	lsrs	r3, r3, #21
 8002c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8a:	d112      	bne.n	8002cb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f7ff ff5a 	bl	8002b50 <SPI_WaitFlagStateUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e00f      	b.n	8002cd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d0f2      	beq.n	8002cb2 <SPI_EndRxTxTransaction+0x52>
 8002ccc:	e000      	b.n	8002cd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cce:	bf00      	nop
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	165e9f81 	.word	0x165e9f81

08002ce4 <calcChunk>:




//column 0-27  row 0-27
void calcChunk(uint16_t X ,uint16_t Y){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	460a      	mov	r2, r1
 8002cee:	80fb      	strh	r3, [r7, #6]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80bb      	strh	r3, [r7, #4]

	uint8_t column =30-(X-X%PIXEL_SIZE)/PIXEL_SIZE;
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	10db      	asrs	r3, r3, #3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f1c3 031e 	rsb	r3, r3, #30
 8002cfe:	73fb      	strb	r3, [r7, #15]
	uint8_t row=40-(Y-Y%PIXEL_SIZE)/PIXEL_SIZE;
 8002d00:	88bb      	ldrh	r3, [r7, #4]
 8002d02:	10db      	asrs	r3, r3, #3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002d0a:	73bb      	strb	r3, [r7, #14]
	static uint8_t prevRow=0,prevCol=0;
	if(column==0) column=1;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <calcChunk+0x32>
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
	if(column>=29) column=MATRIX_RESOLUTION;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b1c      	cmp	r3, #28
 8002d1a:	d901      	bls.n	8002d20 <calcChunk+0x3c>
 8002d1c:	231c      	movs	r3, #28
 8002d1e:	73fb      	strb	r3, [r7, #15]
	column--;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
	if(row==0) row=1;
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <calcChunk+0x4c>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73bb      	strb	r3, [r7, #14]
	if(row>=29) row=MATRIX_RESOLUTION;
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2b1c      	cmp	r3, #28
 8002d34:	d901      	bls.n	8002d3a <calcChunk+0x56>
 8002d36:	231c      	movs	r3, #28
 8002d38:	73bb      	strb	r3, [r7, #14]
	row--;
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	73bb      	strb	r3, [r7, #14]
	if(prevRow!=row || prevCol!=column){
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <calcChunk+0x90>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	7bba      	ldrb	r2, [r7, #14]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d104      	bne.n	8002d54 <calcChunk+0x70>
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <calcChunk+0x94>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d00b      	beq.n	8002d6c <calcChunk+0x88>
		boundaryConditions(row, column);
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	7bbb      	ldrb	r3, [r7, #14]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f80e 	bl	8002d7c <boundaryConditions>
		prevRow=row;
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <calcChunk+0x90>)
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
 8002d64:	7013      	strb	r3, [r2, #0]
		prevCol=column;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <calcChunk+0x94>)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	7013      	strb	r3, [r2, #0]
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200004ac 	.word	0x200004ac
 8002d78:	200004ad 	.word	0x200004ad

08002d7c <boundaryConditions>:
 * 7 - L LU U RU R
 * 8 - U RU R
 * 9 - L LU U
 */

void boundaryConditions(uint8_t row , uint8_t column){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71bb      	strb	r3, [r7, #6]
	uint8_t bound1=0,bound2=0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	2300      	movs	r3, #0
 8002d92:	73bb      	strb	r3, [r7, #14]
	if(row==0)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <boundaryConditions+0x24>
		bound1=4;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e004      	b.n	8002daa <boundaryConditions+0x2e>
	else if(row==27)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b1b      	cmp	r3, #27
 8002da4:	d101      	bne.n	8002daa <boundaryConditions+0x2e>
		bound1=7;
 8002da6:	2307      	movs	r3, #7
 8002da8:	73fb      	strb	r3, [r7, #15]
	if(column==0)
 8002daa:	79bb      	ldrb	r3, [r7, #6]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <boundaryConditions+0x3a>
		bound2=1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73bb      	strb	r3, [r7, #14]
 8002db4:	e004      	b.n	8002dc0 <boundaryConditions+0x44>
	else if(column==27)
 8002db6:	79bb      	ldrb	r3, [r7, #6]
 8002db8:	2b1b      	cmp	r3, #27
 8002dba:	d101      	bne.n	8002dc0 <boundaryConditions+0x44>
		bound2=2;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	73bb      	strb	r3, [r7, #14]
	switch(bound1+bound2){
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	7bbb      	ldrb	r3, [r7, #14]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2b09      	cmp	r3, #9
 8002dc8:	f200 81b7 	bhi.w	800313a <boundaryConditions+0x3be>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <boundaryConditions+0x58>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002dfd 	.word	0x08002dfd
 8002dd8:	08002e9b 	.word	0x08002e9b
 8002ddc:	08002f01 	.word	0x08002f01
 8002de0:	0800313b 	.word	0x0800313b
 8002de4:	08002f67 	.word	0x08002f67
 8002de8:	08002fcd 	.word	0x08002fcd
 8002dec:	0800300f 	.word	0x0800300f
 8002df0:	08003051 	.word	0x08003051
 8002df4:	080030b7 	.word	0x080030b7
 8002df8:	080030f9 	.word	0x080030f9
		case 0:{
			putDataToArray(row, column-1, 64); //L
 8002dfc:	79bb      	ldrb	r3, [r7, #6]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b2d9      	uxtb	r1, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9a2 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column-1, 64); //LU
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	79bb      	ldrb	r3, [r7, #6]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2240      	movs	r2, #64	; 0x40
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f000 f998 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	79b9      	ldrb	r1, [r7, #6]
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f990 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8002e30:	79b9      	ldrb	r1, [r7, #6]
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f98a 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column+1,64);//RU
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b2d8      	uxtb	r0, r3
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f000 f980 	bl	8003150 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 8002e50:	79bb      	ldrb	r3, [r7, #6]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2240      	movs	r2, #64	; 0x40
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f978 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f000 f96e 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	79b9      	ldrb	r1, [r7, #6]
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f966 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	3301      	adds	r3, #1
 8002e88:	b2d8      	uxtb	r0, r3
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2240      	movs	r2, #64	; 0x40
 8002e92:	4619      	mov	r1, r3
 8002e94:	f000 f95c 	bl	8003150 <putDataToArray>

			break;
 8002e98:	e156      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 1:{// 1 - U D R RU RD
			putDataToArray(row+1, column, 64); //D
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	79b9      	ldrb	r1, [r7, #6]
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f953 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column+1, 64); //RD
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f000 f949 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8002ebe:	79b9      	ldrb	r1, [r7, #6]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 f943 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f000 f939 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	79b9      	ldrb	r1, [r7, #6]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f931 	bl	8003150 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2d9      	uxtb	r1, r3
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f929 	bl	8003150 <putDataToArray>
			break;
 8002efe:	e123      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 2:{//2 - U D L LU LD
			putDataToArray(row+1, column, 64);//D
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	79b9      	ldrb	r1, [r7, #6]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f920 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2d8      	uxtb	r0, r3
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2240      	movs	r2, #64	; 0x40
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f000 f916 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8002f24:	79b9      	ldrb	r1, [r7, #6]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f910 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b2d8      	uxtb	r0, r3
 8002f36:	79bb      	ldrb	r3, [r7, #6]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f000 f906 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	79b9      	ldrb	r1, [r7, #6]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f8fe 	bl	8003150 <putDataToArray>
			putDataToArray(row, column-1, 64);//L
 8002f54:	79bb      	ldrb	r3, [r7, #6]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b2d9      	uxtb	r1, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2240      	movs	r2, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f8f6 	bl	8003150 <putDataToArray>
			break;
 8002f64:	e0f0      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 4:{// 4 - L LD D RD R
			putDataToArray(row, column-1, 64);//L
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	2240      	movs	r2, #64	; 0x40
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f8ed 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2d8      	uxtb	r0, r3
 8002f7c:	79bb      	ldrb	r3, [r7, #6]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2240      	movs	r2, #64	; 0x40
 8002f84:	4619      	mov	r1, r3
 8002f86:	f000 f8e3 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8002f8a:	79b9      	ldrb	r1, [r7, #6]
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f8dd 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	79bb      	ldrb	r3, [r7, #6]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f000 f8d3 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	79b9      	ldrb	r1, [r7, #6]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8cb 	bl	8003150 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 8002fba:	79bb      	ldrb	r3, [r7, #6]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2d9      	uxtb	r1, r3
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f8c3 	bl	8003150 <putDataToArray>

			break;
 8002fca:	e0bd      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 5:{//5 - D RD R
			putDataToArray(row, column+1, 64);//R
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2d9      	uxtb	r1, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f8ba 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column+1, 64);//RD
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b2d8      	uxtb	r0, r3
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	4619      	mov	r1, r3
 8002fec:	f000 f8b0 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8002ff0:	79b9      	ldrb	r1, [r7, #6]
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f8aa 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	79b9      	ldrb	r1, [r7, #6]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f8a2 	bl	8003150 <putDataToArray>
			break;
 800300c:	e09c      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 6:{// 6 - L LD D
			putDataToArray(row, column-1, 64);//L
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	3b01      	subs	r3, #1
 8003012:	b2d9      	uxtb	r1, r3
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f899 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 64);
 800301e:	79b9      	ldrb	r1, [r7, #6]
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f893 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column-1, 64);//LD
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	3301      	adds	r3, #1
 800302e:	b2d8      	uxtb	r0, r3
 8003030:	79bb      	ldrb	r3, [r7, #6]
 8003032:	3b01      	subs	r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2240      	movs	r2, #64	; 0x40
 8003038:	4619      	mov	r1, r3
 800303a:	f000 f889 	bl	8003150 <putDataToArray>
			putDataToArray(row+1, column, 64);//D
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	3301      	adds	r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	79b9      	ldrb	r1, [r7, #6]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f881 	bl	8003150 <putDataToArray>
			break;
 800304e:	e07b      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 7:{//7 - L LU U RU R
			putDataToArray(row, column-1, 64);//L
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	3b01      	subs	r3, #1
 8003054:	b2d9      	uxtb	r1, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f878 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2d8      	uxtb	r0, r3
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	3b01      	subs	r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	4619      	mov	r1, r3
 8003070:	f000 f86e 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 8003074:	79b9      	ldrb	r1, [r7, #6]
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f868 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	3b01      	subs	r3, #1
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	79bb      	ldrb	r3, [r7, #6]
 8003088:	3301      	adds	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	4619      	mov	r1, r3
 8003090:	f000 f85e 	bl	8003150 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	3301      	adds	r3, #1
 8003098:	b2d9      	uxtb	r1, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f856 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column, 64);//U
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	79b9      	ldrb	r1, [r7, #6]
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f84e 	bl	8003150 <putDataToArray>
			break;
 80030b4:	e048      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 8:{//8 - U RU R
			putDataToArray(row-1, column, 64);//U
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	79b9      	ldrb	r1, [r7, #6]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f845 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column+1, 64);//RU
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b2d8      	uxtb	r0, r3
 80030cc:	79bb      	ldrb	r3, [r7, #6]
 80030ce:	3301      	adds	r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	4619      	mov	r1, r3
 80030d6:	f000 f83b 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 80030da:	79b9      	ldrb	r1, [r7, #6]
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	22ff      	movs	r2, #255	; 0xff
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f835 	bl	8003150 <putDataToArray>
			putDataToArray(row, column+1, 64);//R
 80030e6:	79bb      	ldrb	r3, [r7, #6]
 80030e8:	3301      	adds	r3, #1
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f82d 	bl	8003150 <putDataToArray>
			break;
 80030f6:	e027      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		case 9:{//9 - L LU U
			putDataToArray(row-1, column, 64);//U
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	79b9      	ldrb	r1, [r7, #6]
 8003100:	2240      	movs	r2, #64	; 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f824 	bl	8003150 <putDataToArray>
			putDataToArray(row-1, column-1, 64);//LU
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3b01      	subs	r3, #1
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	79bb      	ldrb	r3, [r7, #6]
 8003110:	3b01      	subs	r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	4619      	mov	r1, r3
 8003118:	f000 f81a 	bl	8003150 <putDataToArray>
			putDataToArray(row, column, 255);
 800311c:	79b9      	ldrb	r1, [r7, #6]
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f814 	bl	8003150 <putDataToArray>
			putDataToArray(row, column-1, 64);//L
 8003128:	79bb      	ldrb	r3, [r7, #6]
 800312a:	3b01      	subs	r3, #1
 800312c:	b2d9      	uxtb	r1, r3
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f80c 	bl	8003150 <putDataToArray>
			break;
 8003138:	e006      	b.n	8003148 <boundaryConditions+0x3cc>
		}
		default:{
			putDataToArray(row, column, 255);
 800313a:	79b9      	ldrb	r1, [r7, #6]
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f805 	bl	8003150 <putDataToArray>
			break;
 8003146:	bf00      	nop





}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <putDataToArray>:

void putDataToArray(uint8_t row , uint8_t column,uint8_t value){
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b087      	sub	sp, #28
 8003154:	af02      	add	r7, sp, #8
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
 800315a:	460b      	mov	r3, r1
 800315c:	71bb      	strb	r3, [r7, #6]
 800315e:	4613      	mov	r3, r2
 8003160:	717b      	strb	r3, [r7, #5]
	uint16_t X0=LCD_WIDTH-2*PIXEL_SIZE-PIXEL_SIZE*column;
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	f1c3 031c 	rsb	r3, r3, #28
 8003168:	b29b      	uxth	r3, r3
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	81fb      	strh	r3, [r7, #14]
	uint16_t X1=LCD_WIDTH-PIXEL_SIZE-PIXEL_SIZE*column;
 800316e:	79bb      	ldrb	r3, [r7, #6]
 8003170:	f1c3 031d 	rsb	r3, r3, #29
 8003174:	b29b      	uxth	r3, r3
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	81bb      	strh	r3, [r7, #12]
	uint16_t Y0=LCD_HEIGHT-PIXEL_SIZE-PIXEL_SIZE*row;
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8003180:	b29b      	uxth	r3, r3
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	817b      	strh	r3, [r7, #10]
	uint16_t Y1=LCD_HEIGHT-2*PIXEL_SIZE-PIXEL_SIZE*row;
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f1c3 0326 	rsb	r3, r3, #38	; 0x26
 800318c:	b29b      	uxth	r3, r3
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	813b      	strh	r3, [r7, #8]
	if(Screen.Atributs[MATRIX_RESOLUTION*row+column]<=64){
 8003192:	79fa      	ldrb	r2, [r7, #7]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	79bb      	ldrb	r3, [r7, #6]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <putDataToArray+0x180>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d820      	bhi.n	80031ec <putDataToArray+0x9c>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]+=value;
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	461a      	mov	r2, r3
 80031b6:	79bb      	ldrb	r3, [r7, #6]
 80031b8:	4413      	add	r3, r2
 80031ba:	4a45      	ldr	r2, [pc, #276]	; (80032d0 <putDataToArray+0x180>)
 80031bc:	5cd1      	ldrb	r1, [r2, r3]
 80031be:	79fa      	ldrb	r2, [r7, #7]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	461a      	mov	r2, r3
 80031ca:	79bb      	ldrb	r3, [r7, #6]
 80031cc:	4413      	add	r3, r2
 80031ce:	797a      	ldrb	r2, [r7, #5]
 80031d0:	440a      	add	r2, r1
 80031d2:	b2d1      	uxtb	r1, r2
 80031d4:	4a3e      	ldr	r2, [pc, #248]	; (80032d0 <putDataToArray+0x180>)
 80031d6:	54d1      	strb	r1, [r2, r3]
		Draw_Rect(X0, Y0, X1, Y1, GREEN);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	89ba      	ldrh	r2, [r7, #12]
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	89f8      	ldrh	r0, [r7, #14]
 80031e0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80031e4:	9400      	str	r4, [sp, #0]
 80031e6:	f000 fa37 	bl	8003658 <Draw_Rect>
	else{
		Screen.Atributs[MATRIX_RESOLUTION*row+column]=255;
		Draw_Rect(X0, Y0, X1, Y1, RED);
	}

}
 80031ea:	e06c      	b.n	80032c6 <putDataToArray+0x176>
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]<=128){
 80031ec:	79fa      	ldrb	r2, [r7, #7]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	461a      	mov	r2, r3
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	4413      	add	r3, r2
 80031fc:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <putDataToArray+0x180>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d81f      	bhi.n	8003244 <putDataToArray+0xf4>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]+=value;
 8003204:	79fa      	ldrb	r2, [r7, #7]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	79bb      	ldrb	r3, [r7, #6]
 8003212:	4413      	add	r3, r2
 8003214:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <putDataToArray+0x180>)
 8003216:	5cd1      	ldrb	r1, [r2, r3]
 8003218:	79fa      	ldrb	r2, [r7, #7]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	461a      	mov	r2, r3
 8003224:	79bb      	ldrb	r3, [r7, #6]
 8003226:	4413      	add	r3, r2
 8003228:	797a      	ldrb	r2, [r7, #5]
 800322a:	440a      	add	r2, r1
 800322c:	b2d1      	uxtb	r1, r2
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <putDataToArray+0x180>)
 8003230:	54d1      	strb	r1, [r2, r3]
		Draw_Rect(X0, Y0, X1, Y1,BLUE);
 8003232:	893b      	ldrh	r3, [r7, #8]
 8003234:	89ba      	ldrh	r2, [r7, #12]
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	89f8      	ldrh	r0, [r7, #14]
 800323a:	241f      	movs	r4, #31
 800323c:	9400      	str	r4, [sp, #0]
 800323e:	f000 fa0b 	bl	8003658 <Draw_Rect>
}
 8003242:	e040      	b.n	80032c6 <putDataToArray+0x176>
	else if(Screen.Atributs[MATRIX_RESOLUTION*row+column]<=192){
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	79bb      	ldrb	r3, [r7, #6]
 8003252:	4413      	add	r3, r2
 8003254:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <putDataToArray+0x180>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	2bc0      	cmp	r3, #192	; 0xc0
 800325a:	d820      	bhi.n	800329e <putDataToArray+0x14e>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]+=value;
 800325c:	79fa      	ldrb	r2, [r7, #7]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	461a      	mov	r2, r3
 8003268:	79bb      	ldrb	r3, [r7, #6]
 800326a:	4413      	add	r3, r2
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <putDataToArray+0x180>)
 800326e:	5cd1      	ldrb	r1, [r2, r3]
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	461a      	mov	r2, r3
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	4413      	add	r3, r2
 8003280:	797a      	ldrb	r2, [r7, #5]
 8003282:	440a      	add	r2, r1
 8003284:	b2d1      	uxtb	r1, r2
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <putDataToArray+0x180>)
 8003288:	54d1      	strb	r1, [r2, r3]
		Draw_Rect(X0, Y0, X1, Y1, PINK);
 800328a:	893b      	ldrh	r3, [r7, #8]
 800328c:	89ba      	ldrh	r2, [r7, #12]
 800328e:	8979      	ldrh	r1, [r7, #10]
 8003290:	89f8      	ldrh	r0, [r7, #14]
 8003292:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8003296:	9400      	str	r4, [sp, #0]
 8003298:	f000 f9de 	bl	8003658 <Draw_Rect>
}
 800329c:	e013      	b.n	80032c6 <putDataToArray+0x176>
		Screen.Atributs[MATRIX_RESOLUTION*row+column]=255;
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	461a      	mov	r2, r3
 80032aa:	79bb      	ldrb	r3, [r7, #6]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <putDataToArray+0x180>)
 80032b0:	21ff      	movs	r1, #255	; 0xff
 80032b2:	54d1      	strb	r1, [r2, r3]
		Draw_Rect(X0, Y0, X1, Y1, RED);
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	89ba      	ldrh	r2, [r7, #12]
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	89f8      	ldrh	r0, [r7, #14]
 80032bc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80032c0:	9400      	str	r4, [sp, #0]
 80032c2:	f000 f9c9 	bl	8003658 <Draw_Rect>
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2000019c 	.word	0x2000019c

080032d4 <refreshMenu>:
#include "matrix.h"
#include <string.h>

extern struct matrix Screen;

void refreshMenu(void){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af02      	add	r7, sp, #8
	Draw_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, GREEN);
 80032da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032e4:	22f0      	movs	r2, #240	; 0xf0
 80032e6:	2100      	movs	r1, #0
 80032e8:	2000      	movs	r0, #0
 80032ea:	f000 f9b5 	bl	8003658 <Draw_Rect>
	Draw_Rect(8, 88, LCD_WIDTH-PIXEL_SIZE, LCD_HEIGHT-PIXEL_SIZE, WHITE);
 80032ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f44f 739c 	mov.w	r3, #312	; 0x138
 80032f8:	22e8      	movs	r2, #232	; 0xe8
 80032fa:	2158      	movs	r1, #88	; 0x58
 80032fc:	2008      	movs	r0, #8
 80032fe:	f000 f9ab 	bl	8003658 <Draw_Rect>
	memset(Screen.Atributs,0,NUM_PIXELS);
 8003302:	f44f 7244 	mov.w	r2, #784	; 0x310
 8003306:	2100      	movs	r1, #0
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <refreshMenu+0x40>)
 800330a:	f000 fb8f 	bl	8003a2c <memset>




}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	2000019c 	.word	0x2000019c

08003318 <updateScreen>:

void updateScreen(uint16_t X ,uint16_t Y){
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af02      	add	r7, sp, #8
 800331e:	4603      	mov	r3, r0
 8003320:	460a      	mov	r2, r1
 8003322:	80fb      	strh	r3, [r7, #6]
 8003324:	4613      	mov	r3, r2
 8003326:	80bb      	strh	r3, [r7, #4]
	static uint8_t menuState=1;
	if(Y>=88 &&menuState==1){
 8003328:	88bb      	ldrh	r3, [r7, #4]
 800332a:	2b57      	cmp	r3, #87	; 0x57
 800332c:	d90a      	bls.n	8003344 <updateScreen+0x2c>
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <updateScreen+0x68>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <updateScreen+0x2c>
		calcChunk(X, Y);
 8003336:	88ba      	ldrh	r2, [r7, #4]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fcd1 	bl	8002ce4 <calcChunk>
 8003342:	e019      	b.n	8003378 <updateScreen+0x60>


	}
	else if(Y<=60 && menuState==1){
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	2b3c      	cmp	r3, #60	; 0x3c
 8003348:	d810      	bhi.n	800336c <updateScreen+0x54>
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <updateScreen+0x68>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10c      	bne.n	800336c <updateScreen+0x54>
		menuState=0;
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <updateScreen+0x68>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		//uint8_t  prediction = predict(void)
		//uint8_t  predictionProb = getProb(void)
		Draw_Rect(0, 0, LCD_WIDTH, LCD_HEIGHT, BLUE);
 8003358:	231f      	movs	r3, #31
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003360:	22f0      	movs	r2, #240	; 0xf0
 8003362:	2100      	movs	r1, #0
 8003364:	2000      	movs	r0, #0
 8003366:	f000 f977 	bl	8003658 <Draw_Rect>
 800336a:	e005      	b.n	8003378 <updateScreen+0x60>
		//DrawText(" ")
	}else{
		refreshMenu();
 800336c:	f7ff ffb2 	bl	80032d4 <refreshMenu>
		menuState=1;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <updateScreen+0x68>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
	}


}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000009 	.word	0x20000009

08003384 <Init>:

volatile uint16_t LCD_HEIGHT = 320;
volatile uint16_t LCD_WIDTH	=240;


void Init(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af02      	add	r7, sp, #8


	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	2101      	movs	r1, #1
 800338e:	4827      	ldr	r0, [pc, #156]	; (800342c <Init+0xa8>)
 8003390:	f7fe fae2 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	2102      	movs	r1, #2
 8003398:	4824      	ldr	r0, [pc, #144]	; (800342c <Init+0xa8>)
 800339a:	f7fe fadd 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 800339e:	201e      	movs	r0, #30
 80033a0:	f7fd fc98 	bl	8000cd4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80033a4:	2201      	movs	r2, #1
 80033a6:	2101      	movs	r1, #1
 80033a8:	4820      	ldr	r0, [pc, #128]	; (800342c <Init+0xa8>)
 80033aa:	f7fe fad5 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80033ae:	2201      	movs	r2, #1
 80033b0:	2102      	movs	r1, #2
 80033b2:	481e      	ldr	r0, [pc, #120]	; (800342c <Init+0xa8>)
 80033b4:	f7fe fad0 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80033b8:	201e      	movs	r0, #30
 80033ba:	f7fd fc8b 	bl	8000cd4 <HAL_Delay>
	//////////////////////////////////
	Write_Command(COLMOD_REG);
 80033be:	203a      	movs	r0, #58	; 0x3a
 80033c0:	f000 f836 	bl	8003430 <Write_Command>
	Write_Data_byte(0x55); //16 bit mode
 80033c4:	2055      	movs	r0, #85	; 0x55
 80033c6:	f000 f861 	bl	800348c <Write_Data_byte>

	Write_Command(INVON_REG);
 80033ca:	2021      	movs	r0, #33	; 0x21
 80033cc:	f000 f830 	bl	8003430 <Write_Command>
	Write_Command(SLPOUT_REG);
 80033d0:	2011      	movs	r0, #17
 80033d2:	f000 f82d 	bl	8003430 <Write_Command>
	Write_Command(NORON_REG);
 80033d6:	2013      	movs	r0, #19
 80033d8:	f000 f82a 	bl	8003430 <Write_Command>
	Write_Command(DISPON_REG);
 80033dc:	2029      	movs	r0, #41	; 0x29
 80033de:	f000 f827 	bl	8003430 <Write_Command>
	Write_Command(0x01);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f000 f824 	bl	8003430 <Write_Command>
	HAL_Delay(10);
 80033e8:	200a      	movs	r0, #10
 80033ea:	f7fd fc73 	bl	8000cd4 <HAL_Delay>
	Write_Command(0x11);
 80033ee:	2011      	movs	r0, #17
 80033f0:	f000 f81e 	bl	8003430 <Write_Command>
	HAL_Delay(100);
 80033f4:	2064      	movs	r0, #100	; 0x64
 80033f6:	f7fd fc6d 	bl	8000cd4 <HAL_Delay>
	Write_Command(0x29);
 80033fa:	2029      	movs	r0, #41	; 0x29
 80033fc:	f000 f818 	bl	8003430 <Write_Command>

	Set_Rotation();
 8003400:	f000 f8b6 	bl	8003570 <Set_Rotation>
	Set_Adress(0, 0, 240, 320);
 8003404:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003408:	22f0      	movs	r2, #240	; 0xf0
 800340a:	2100      	movs	r1, #0
 800340c:	2000      	movs	r0, #0
 800340e:	f000 f8c7 	bl	80035a0 <Set_Adress>
	Draw_Rect(0, 0, 240, 320, 0x0000);
 8003412:	2300      	movs	r3, #0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800341a:	22f0      	movs	r2, #240	; 0xf0
 800341c:	2100      	movs	r1, #0
 800341e:	2000      	movs	r0, #0
 8003420:	f000 f91a 	bl	8003658 <Draw_Rect>

}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40020400 	.word	0x40020400

08003430 <Write_Command>:




void Write_Command(uint8_t cmd){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800343a:	2200      	movs	r2, #0
 800343c:	2102      	movs	r1, #2
 800343e:	4810      	ldr	r0, [pc, #64]	; (8003480 <Write_Command+0x50>)
 8003440:	f7fe fa8a 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	2110      	movs	r1, #16
 8003448:	480e      	ldr	r0, [pc, #56]	; (8003484 <Write_Command+0x54>)
 800344a:	f7fe fa85 	bl	8001958 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(&SPI_PORT, SPI_FLAG_TXE));
 800344e:	bf00      	nop
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <Write_Command+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d1f8      	bne.n	8003450 <Write_Command+0x20>
	HAL_SPI_Transmit(&SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 800345e:	1df9      	adds	r1, r7, #7
 8003460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003464:	2201      	movs	r2, #1
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <Write_Command+0x58>)
 8003468:	f7fe ff3d 	bl	80022e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800346c:	2201      	movs	r2, #1
 800346e:	2102      	movs	r1, #2
 8003470:	4803      	ldr	r0, [pc, #12]	; (8003480 <Write_Command+0x50>)
 8003472:	f7fe fa71 	bl	8001958 <HAL_GPIO_WritePin>

}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40020400 	.word	0x40020400
 8003484:	40020000 	.word	0x40020000
 8003488:	20000030 	.word	0x20000030

0800348c <Write_Data_byte>:

void Write_Data_byte(uint8_t data){
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003496:	2200      	movs	r2, #0
 8003498:	2102      	movs	r1, #2
 800349a:	4810      	ldr	r0, [pc, #64]	; (80034dc <Write_Data_byte+0x50>)
 800349c:	f7fe fa5c 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80034a0:	2201      	movs	r2, #1
 80034a2:	2110      	movs	r1, #16
 80034a4:	480e      	ldr	r0, [pc, #56]	; (80034e0 <Write_Data_byte+0x54>)
 80034a6:	f7fe fa57 	bl	8001958 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(&SPI_PORT, SPI_FLAG_TXE));
 80034aa:	bf00      	nop
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <Write_Data_byte+0x58>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d1f8      	bne.n	80034ac <Write_Data_byte+0x20>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 80034ba:	1df9      	adds	r1, r7, #7
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034c0:	2201      	movs	r2, #1
 80034c2:	4808      	ldr	r0, [pc, #32]	; (80034e4 <Write_Data_byte+0x58>)
 80034c4:	f7fe ff0f 	bl	80022e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80034c8:	2201      	movs	r2, #1
 80034ca:	2102      	movs	r1, #2
 80034cc:	4803      	ldr	r0, [pc, #12]	; (80034dc <Write_Data_byte+0x50>)
 80034ce:	f7fe fa43 	bl	8001958 <HAL_GPIO_WritePin>

}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020000 	.word	0x40020000
 80034e4:	20000030 	.word	0x20000030

080034e8 <Write_Data>:


void Write_Data(uint8_t *buff,uint32_t buffSize){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2102      	movs	r1, #2
 80034f6:	481b      	ldr	r0, [pc, #108]	; (8003564 <Write_Data+0x7c>)
 80034f8:	f7fe fa2e 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80034fc:	2201      	movs	r2, #1
 80034fe:	2110      	movs	r1, #16
 8003500:	4819      	ldr	r0, [pc, #100]	; (8003568 <Write_Data+0x80>)
 8003502:	f7fe fa29 	bl	8001958 <HAL_GPIO_WritePin>
	uint16_t DataSize;
	uint32_t buffsize=buffSize;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	60bb      	str	r3, [r7, #8]
	while(buffsize>0){
 800350a:	e01f      	b.n	800354c <Write_Data+0x64>
		if (buffsize>65535)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d303      	bcc.n	800351c <Write_Data+0x34>
			DataSize=65535;
 8003514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003518:	81fb      	strh	r3, [r7, #14]
 800351a:	e001      	b.n	8003520 <Write_Data+0x38>
		else
			DataSize=buffsize;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit_DMA(&SPI_PORT, buff,DataSize);
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	461a      	mov	r2, r3
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4811      	ldr	r0, [pc, #68]	; (800356c <Write_Data+0x84>)
 8003528:	f7ff f9bc 	bl	80028a4 <HAL_SPI_Transmit_DMA>
		while (SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800352c:	bf00      	nop
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <Write_Data+0x84>)
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d1f8      	bne.n	800352e <Write_Data+0x46>
		{}
		buff+=DataSize;
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	607b      	str	r3, [r7, #4]
		buffsize-=DataSize;
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	60bb      	str	r3, [r7, #8]
	while(buffsize>0){
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1dc      	bne.n	800350c <Write_Data+0x24>

	}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003552:	2201      	movs	r2, #1
 8003554:	2102      	movs	r1, #2
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <Write_Data+0x7c>)
 8003558:	f7fe f9fe 	bl	8001958 <HAL_GPIO_WritePin>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40020400 	.word	0x40020400
 8003568:	40020000 	.word	0x40020000
 800356c:	20000030 	.word	0x20000030

08003570 <Set_Rotation>:


void Set_Rotation(void){
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	Write_Command(MADCTL_REG);
 8003574:	2036      	movs	r0, #54	; 0x36
 8003576:	f7ff ff5b 	bl	8003430 <Write_Command>
	HAL_Delay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f7fd fbaa 	bl	8000cd4 <HAL_Delay>
	Write_Data_byte(0x00|0x00);
 8003580:	2000      	movs	r0, #0
 8003582:	f7ff ff83 	bl	800348c <Write_Data_byte>
	LCD_HEIGHT=320;
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <Set_Rotation+0x28>)
 8003588:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800358c:	801a      	strh	r2, [r3, #0]
	LCD_WIDTH=240;
 800358e:	4b03      	ldr	r3, [pc, #12]	; (800359c <Set_Rotation+0x2c>)
 8003590:	22f0      	movs	r2, #240	; 0xf0
 8003592:	801a      	strh	r2, [r3, #0]
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	2000000a 	.word	0x2000000a
 800359c:	2000000c 	.word	0x2000000c

080035a0 <Set_Adress>:


void Set_Adress(uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1){
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	80fb      	strh	r3, [r7, #6]
 80035b2:	4603      	mov	r3, r0
 80035b4:	80bb      	strh	r3, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	807b      	strh	r3, [r7, #2]
 80035ba:	4613      	mov	r3, r2
 80035bc:	803b      	strh	r3, [r7, #0]
	if(X0>X1){
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d905      	bls.n	80035d2 <Set_Adress+0x32>
		uint16_t temp1=X0;
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	82fb      	strh	r3, [r7, #22]
		X0=X1;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	80fb      	strh	r3, [r7, #6]
		X1=temp1;
 80035ce:	8afb      	ldrh	r3, [r7, #22]
 80035d0:	807b      	strh	r3, [r7, #2]
	}

	if(Y0>Y1){
 80035d2:	88ba      	ldrh	r2, [r7, #4]
 80035d4:	883b      	ldrh	r3, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d905      	bls.n	80035e6 <Set_Adress+0x46>
		uint16_t temp2=Y0;
 80035da:	88bb      	ldrh	r3, [r7, #4]
 80035dc:	82bb      	strh	r3, [r7, #20]
		Y0=Y1;
 80035de:	883b      	ldrh	r3, [r7, #0]
 80035e0:	80bb      	strh	r3, [r7, #4]
		Y1=temp2;
 80035e2:	8abb      	ldrh	r3, [r7, #20]
 80035e4:	803b      	strh	r3, [r7, #0]
	}
	Write_Command(CASET_REG);
 80035e6:	202a      	movs	r0, #42	; 0x2a
 80035e8:	f7ff ff22 	bl	8003430 <Write_Command>
	uint8_t adressX[4]={X0>>8,X0 & 0xFF,X1>>8,X1 & 0xFF};
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	743b      	strb	r3, [r7, #16]
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	747b      	strb	r3, [r7, #17]
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	74bb      	strb	r3, [r7, #18]
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	74fb      	strb	r3, [r7, #19]
	Write_Data(adressX,4);
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	2104      	movs	r1, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff68 	bl	80034e8 <Write_Data>
	Write_Command(RASET_REG);
 8003618:	202b      	movs	r0, #43	; 0x2b
 800361a:	f7ff ff09 	bl	8003430 <Write_Command>
	uint8_t adressY[4]={Y0>>8,Y0 & 0xFF,Y1>>8,Y1 & 0xFF};
 800361e:	88bb      	ldrh	r3, [r7, #4]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	b29b      	uxth	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	733b      	strb	r3, [r7, #12]
 8003628:	88bb      	ldrh	r3, [r7, #4]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	737b      	strb	r3, [r7, #13]
 800362e:	883b      	ldrh	r3, [r7, #0]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	73bb      	strb	r3, [r7, #14]
 8003638:	883b      	ldrh	r3, [r7, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	73fb      	strb	r3, [r7, #15]
	Write_Data(adressY,4);
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	2104      	movs	r1, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff4f 	bl	80034e8 <Write_Data>
	Write_Command(RAMWR_REG);
 800364a:	202c      	movs	r0, #44	; 0x2c
 800364c:	f7ff fef0 	bl	8003430 <Write_Command>

}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}

08003658 <Draw_Rect>:


}


void Draw_Rect(uint16_t X0,uint16_t Y0,uint16_t X1,uint16_t Y1,uint16_t color){
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b093      	sub	sp, #76	; 0x4c
 800365e:	af00      	add	r7, sp, #0
 8003660:	4606      	mov	r6, r0
 8003662:	4608      	mov	r0, r1
 8003664:	4611      	mov	r1, r2
 8003666:	461a      	mov	r2, r3
 8003668:	4633      	mov	r3, r6
 800366a:	81fb      	strh	r3, [r7, #14]
 800366c:	4603      	mov	r3, r0
 800366e:	81bb      	strh	r3, [r7, #12]
 8003670:	460b      	mov	r3, r1
 8003672:	817b      	strh	r3, [r7, #10]
 8003674:	4613      	mov	r3, r2
 8003676:	813b      	strh	r3, [r7, #8]
 8003678:	466b      	mov	r3, sp
 800367a:	461e      	mov	r6, r3
	if(X0>X1){
 800367c:	89fa      	ldrh	r2, [r7, #14]
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	429a      	cmp	r2, r3
 8003682:	d905      	bls.n	8003690 <Draw_Rect+0x38>
		uint16_t temp1=X0;
 8003684:	89fb      	ldrh	r3, [r7, #14]
 8003686:	87bb      	strh	r3, [r7, #60]	; 0x3c
		X0=X1;
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	81fb      	strh	r3, [r7, #14]
		X1=temp1;
 800368c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800368e:	817b      	strh	r3, [r7, #10]
	}

	if(Y0>Y1){
 8003690:	89ba      	ldrh	r2, [r7, #12]
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d905      	bls.n	80036a4 <Draw_Rect+0x4c>
		uint16_t temp2=Y0;
 8003698:	89bb      	ldrh	r3, [r7, #12]
 800369a:	877b      	strh	r3, [r7, #58]	; 0x3a
		Y0=Y1;
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	81bb      	strh	r3, [r7, #12]
		Y1=temp2;
 80036a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80036a2:	813b      	strh	r3, [r7, #8]
	}

	Set_Adress(X0, Y0, X1, Y1);
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	897a      	ldrh	r2, [r7, #10]
 80036a8:	89b9      	ldrh	r1, [r7, #12]
 80036aa:	89f8      	ldrh	r0, [r7, #14]
 80036ac:	f7ff ff78 	bl	80035a0 <Set_Adress>
	uint16_t X_size=X1-X0+1;
 80036b0:	897a      	ldrh	r2, [r7, #10]
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t Y_size=Y1-Y0+1;
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	89bb      	ldrh	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t colorA=color>>8;
 80036c8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t colorB=color & 0xFF;
 80036d4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80036d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint32_t dataSize=X_size*Y_size*2;
 80036dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t chunkDataSize=200*2; //even number
 80036e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t chunks=dataSize/chunkDataSize;
 80036ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t restDataSize=dataSize-chunks*chunkDataSize;
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t buff[chunkDataSize];
 8003706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003708:	460b      	mov	r3, r1
 800370a:	3b01      	subs	r3, #1
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	2300      	movs	r3, #0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	00c3      	lsls	r3, r0, #3
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	00c2      	lsls	r2, r0, #3
 800372a:	2300      	movs	r3, #0
 800372c:	468a      	mov	sl, r1
 800372e:	469b      	mov	fp, r3
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003744:	1dcb      	adds	r3, r1, #7
 8003746:	08db      	lsrs	r3, r3, #3
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	ebad 0d03 	sub.w	sp, sp, r3
 800374e:	466b      	mov	r3, sp
 8003750:	3300      	adds	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
	uint8_t buffRest[restDataSize];
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	460b      	mov	r3, r1
 8003758:	3b01      	subs	r3, #1
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	2300      	movs	r3, #0
 800375e:	4688      	mov	r8, r1
 8003760:	4699      	mov	r9, r3
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003776:	2300      	movs	r3, #0
 8003778:	460c      	mov	r4, r1
 800377a:	461d      	mov	r5, r3
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	00eb      	lsls	r3, r5, #3
 8003786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378a:	00e2      	lsls	r2, r4, #3
 800378c:	1dcb      	adds	r3, r1, #7
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	ebad 0d03 	sub.w	sp, sp, r3
 8003796:	466b      	mov	r3, sp
 8003798:	3300      	adds	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
 80037a0:	e00e      	b.n	80037c0 <Draw_Rect+0x168>
		buff[i]=colorA;
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a6:	4413      	add	r3, r2
 80037a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80037ac:	701a      	strb	r2, [r3, #0]
		buff[i+1]=colorB;
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	3301      	adds	r3, #1
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80037b8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<chunkDataSize;i+=2){
 80037ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037bc:	3302      	adds	r3, #2
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
 80037c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3ec      	bcc.n	80037a2 <Draw_Rect+0x14a>
	}
	for(uint32_t i =0;i<restDataSize;i+=2){
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
 80037cc:	e00e      	b.n	80037ec <Draw_Rect+0x194>
		buffRest[i]=colorA;
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d2:	4413      	add	r3, r2
 80037d4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80037d8:	701a      	strb	r2, [r3, #0]
		buffRest[i+1]=colorB;
 80037da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037dc:	3301      	adds	r3, #1
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80037e4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i =0;i<restDataSize;i+=2){
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	3302      	adds	r3, #2
 80037ea:	647b      	str	r3, [r7, #68]	; 0x44
 80037ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3ec      	bcc.n	80037ce <Draw_Rect+0x176>
	}
	for(uint16_t i=0;i<chunks;i++){
 80037f4:	2300      	movs	r3, #0
 80037f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80037f8:	e006      	b.n	8003808 <Draw_Rect+0x1b0>
		Write_Data(buff, chunkDataSize);
 80037fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037fc:	69f8      	ldr	r0, [r7, #28]
 80037fe:	f7ff fe73 	bl	80034e8 <Write_Data>
	for(uint16_t i=0;i<chunks;i++){
 8003802:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003804:	3301      	adds	r3, #1
 8003806:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003808:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800380a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380c:	429a      	cmp	r2, r3
 800380e:	d8f4      	bhi.n	80037fa <Draw_Rect+0x1a2>

	}
	Write_Data(buffRest, restDataSize);
 8003810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f7ff fe68 	bl	80034e8 <Write_Data>
 8003818:	46b5      	mov	sp, r6
}
 800381a:	bf00      	nop
 800381c:	374c      	adds	r7, #76	; 0x4c
 800381e:	46bd      	mov	sp, r7
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003824 <XPT2046_TouchSelect>:
#endif



static void XPT2046_TouchSelect()
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800382e:	4802      	ldr	r0, [pc, #8]	; (8003838 <XPT2046_TouchSelect+0x14>)
 8003830:	f7fe f892 	bl	8001958 <HAL_GPIO_WritePin>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40020000 	.word	0x40020000

0800383c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADC_CS_GPIO_Port,  ADC_CS_Pin, GPIO_PIN_SET);
 8003840:	2201      	movs	r2, #1
 8003842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003846:	4802      	ldr	r0, [pc, #8]	; (8003850 <XPT2046_TouchUnselect+0x14>)
 8003848:	f7fe f886 	bl	8001958 <HAL_GPIO_WritePin>
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40020000 	.word	0x40020000

08003854 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ADC_IRQ_GPIO_Port, ADC_IRQ_Pin) == GPIO_PIN_RESET;
 8003858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <XPT2046_TouchPressed+0x20>)
 800385e:	f7fe f863 	bl	8001928 <HAL_GPIO_ReadPin>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
}
 800386e:	4618      	mov	r0, r3
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40020000 	.word	0x40020000

08003878 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af02      	add	r7, sp, #8
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };


    XPT2046_TouchSelect();
 8003882:	f7ff ffcf 	bl	8003824 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	77bb      	strb	r3, [r7, #30]
 8003896:	e03f      	b.n	8003918 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8003898:	f7ff ffdc 	bl	8003854 <XPT2046_TouchPressed>
 800389c:	4603      	mov	r3, r0
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13b      	bne.n	8003920 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	3301      	adds	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
        uint8_t y_raw[2];
        uint8_t x_raw[2];



        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038b2:	2201      	movs	r2, #1
 80038b4:	4945      	ldr	r1, [pc, #276]	; (80039cc <XPT2046_TouchGetCoordinates+0x154>)
 80038b6:	4846      	ldr	r0, [pc, #280]	; (80039d0 <XPT2046_TouchGetCoordinates+0x158>)
 80038b8:	f7fe fd15 	bl	80022e6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80038bc:	f107 0210 	add.w	r2, r7, #16
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2302      	movs	r3, #2
 80038c8:	4942      	ldr	r1, [pc, #264]	; (80039d4 <XPT2046_TouchGetCoordinates+0x15c>)
 80038ca:	4841      	ldr	r0, [pc, #260]	; (80039d0 <XPT2046_TouchGetCoordinates+0x158>)
 80038cc:	f7fe fe47 	bl	800255e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d4:	2201      	movs	r2, #1
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <XPT2046_TouchGetCoordinates+0x160>)
 80038d8:	483d      	ldr	r0, [pc, #244]	; (80039d0 <XPT2046_TouchGetCoordinates+0x158>)
 80038da:	f7fe fd04 	bl	80022e6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80038de:	f107 020c 	add.w	r2, r7, #12
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2302      	movs	r3, #2
 80038ea:	493a      	ldr	r1, [pc, #232]	; (80039d4 <XPT2046_TouchGetCoordinates+0x15c>)
 80038ec:	4838      	ldr	r0, [pc, #224]	; (80039d0 <XPT2046_TouchGetCoordinates+0x158>)
 80038ee:	f7fe fe36 	bl	800255e <HAL_SPI_TransmitReceive>


        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80038f2:	7b3b      	ldrb	r3, [r7, #12]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	7b7a      	ldrb	r2, [r7, #13]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	4413      	add	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8003902:	7c3b      	ldrb	r3, [r7, #16]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	7c7a      	ldrb	r2, [r7, #17]
 8003908:	4313      	orrs	r3, r2
 800390a:	461a      	mov	r2, r3
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	4413      	add	r3, r2
 8003910:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8003912:	7fbb      	ldrb	r3, [r7, #30]
 8003914:	3301      	adds	r3, #1
 8003916:	77bb      	strb	r3, [r7, #30]
 8003918:	7fbb      	ldrb	r3, [r7, #30]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d9bc      	bls.n	8003898 <XPT2046_TouchGetCoordinates+0x20>
 800391e:	e000      	b.n	8003922 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8003920:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8003922:	f7ff ff8b 	bl	800383c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d801      	bhi.n	8003930 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 800392c:	2300      	movs	r3, #0
 800392e:	e049      	b.n	80039c4 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f640 5247 	movw	r2, #3399	; 0xd47
 800393c:	4293      	cmp	r3, r2
 800393e:	d802      	bhi.n	8003946 <XPT2046_TouchGetCoordinates+0xce>
 8003940:	f640 5348 	movw	r3, #3400	; 0xd48
 8003944:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f247 1248 	movw	r2, #29000	; 0x7148
 800394c:	4293      	cmp	r3, r2
 800394e:	d902      	bls.n	8003956 <XPT2046_TouchGetCoordinates+0xde>
 8003950:	f247 1348 	movw	r3, #29000	; 0x7148
 8003954:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f640 42e3 	movw	r2, #3299	; 0xce3
 8003962:	4293      	cmp	r3, r2
 8003964:	d802      	bhi.n	800396c <XPT2046_TouchGetCoordinates+0xf4>
 8003966:	f640 43e4 	movw	r3, #3300	; 0xce4
 800396a:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003972:	4293      	cmp	r3, r2
 8003974:	d902      	bls.n	800397c <XPT2046_TouchGetCoordinates+0x104>
 8003976:	f247 5330 	movw	r3, #30000	; 0x7530
 800397a:	617b      	str	r3, [r7, #20]


#if (ORIENTATION == 0)
	*x = 240-(raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	f5a3 2347 	sub.w	r3, r3, #815104	; 0xc7000
 800398a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <XPT2046_TouchGetCoordinates+0x164>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	0b5b      	lsrs	r3, r3, #13
 8003996:	b29b      	uxth	r3, r3
 8003998:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	019b      	lsls	r3, r3, #6
 80039ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80039b0:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <XPT2046_TouchGetCoordinates+0x168>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0b5b      	lsrs	r3, r3, #13
 80039bc:	b29a      	uxth	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08003a6c 	.word	0x08003a6c
 80039d0:	200000e0 	.word	0x200000e0
 80039d4:	08003a70 	.word	0x08003a70
 80039d8:	08003a74 	.word	0x08003a74
 80039dc:	51eb851f 	.word	0x51eb851f
 80039e0:	4e8b8659 	.word	0x4e8b8659

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4d0d      	ldr	r5, [pc, #52]	; (8003a1c <__libc_init_array+0x38>)
 80039e8:	4c0d      	ldr	r4, [pc, #52]	; (8003a20 <__libc_init_array+0x3c>)
 80039ea:	1b64      	subs	r4, r4, r5
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	2600      	movs	r6, #0
 80039f0:	42a6      	cmp	r6, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	4d0b      	ldr	r5, [pc, #44]	; (8003a24 <__libc_init_array+0x40>)
 80039f6:	4c0c      	ldr	r4, [pc, #48]	; (8003a28 <__libc_init_array+0x44>)
 80039f8:	f000 f820 	bl	8003a3c <_init>
 80039fc:	1b64      	subs	r4, r4, r5
 80039fe:	10a4      	asrs	r4, r4, #2
 8003a00:	2600      	movs	r6, #0
 8003a02:	42a6      	cmp	r6, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0c:	4798      	blx	r3
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a16:	4798      	blx	r3
 8003a18:	3601      	adds	r6, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	08003a80 	.word	0x08003a80
 8003a20:	08003a80 	.word	0x08003a80
 8003a24:	08003a80 	.word	0x08003a80
 8003a28:	08003a84 	.word	0x08003a84

08003a2c <memset>:
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <_init>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr

08003a48 <_fini>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr
